import{_ as n,Y as s,Z as a,a2 as t}from"./framework-301d0703.js";const p={},o=t(`<h1 id="lr-1-解析器详解" tabindex="-1"><a class="header-anchor" href="#lr-1-解析器详解" aria-hidden="true">#</a> LR(1) 解析器详解</h1><p>LR(1) 解析器是一种自底向上的语法分析方法，广泛应用于编译器设计中。它能够有效地处理上下文无关文法，并生成语法分析树。本文将详细介绍 LR(1) 解析器的各类概念，包括展望符、文法、终结符、非终结符、产生式、产生式集合、FIRST 集、闭包、GOTO 表、表达式的含义，并阐述它们之间的协作关系。最后，我们将使用 C++11 编写一些示例代码来帮助理解。在代码中，我们将避免使用运算符重载，并使用 C++11 的特性。</p><h2 id="_1-文法-grammar" tabindex="-1"><a class="header-anchor" href="#_1-文法-grammar" aria-hidden="true">#</a> 1. 文法（Grammar）</h2><p><strong>文法</strong>是描述语言语法结构的规则集合，由以下四部分组成：</p><ul><li><strong>非终结符集合（N）</strong>：表示语法结构的符号，如表达式、语句等。</li><li><strong>终结符集合（Σ）</strong>：实际输入的基本符号，如关键字、运算符、标识符等。</li><li><strong>开始符号（S）</strong>：文法的起始非终结符，表示语法分析的入口。</li><li><strong>产生式集合（P）</strong>：定义非终结符如何展开为终结符和非终结符的规则。</li></ul><p>文法通常表示为四元组 ( G = (N, Σ, P, S) )。</p><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>E  → E + T
E  → T
T  → T * F
T  → F
F  → ( E )
F  → id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-终结符和非终结符" tabindex="-1"><a class="header-anchor" href="#_2-终结符和非终结符" aria-hidden="true">#</a> 2. 终结符和非终结符</h2><ul><li><strong>终结符（Terminal symbols）</strong>：不能再被展开的基本符号，通常对应于词法分析器的输出，例如 <code>+</code>、<code>*</code>、<code>(</code>、<code>)</code>、<code>id</code> 等。</li><li><strong>非终结符（Non-terminal symbols）</strong>：可以被展开为其他符号的符号，表示语法结构，例如 <code>E</code>、<code>T</code>、<code>F</code>。</li></ul><p>在上述示例中：</p><ul><li><strong>终结符</strong>：<code>+</code>、<code>*</code>、<code>(</code>、<code>)</code>、<code>id</code></li><li><strong>非终结符</strong>：<code>E</code>、<code>T</code>、<code>F</code></li></ul><h2 id="_3-产生式和产生式集合" tabindex="-1"><a class="header-anchor" href="#_3-产生式和产生式集合" aria-hidden="true">#</a> 3. 产生式和产生式集合</h2><p>**产生式（Production）**是描述非终结符如何展开的规则，形式为 ( A \\rightarrow \\alpha )，其中 ( A ) 是非终结符，( \\alpha ) 是终结符和非终结符的串。</p><p>**产生式集合（P）**是所有产生式的集合，定义了文法的完整规则。</p><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>P = {
    E  → E + T,
    E  → T,
    T  → T * F,
    T  → F,
    F  → ( E ),
    F  → id
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-first-集" tabindex="-1"><a class="header-anchor" href="#_4-first-集" aria-hidden="true">#</a> 4. FIRST 集</h2><p><strong>FIRST 集</strong>用于确定一个符号串可能首先产生的终结符集合，对于预测分析和构建 LR(1) 项目集至关重要。</p><p><strong>定义：</strong></p><ul><li>对于符号串 ( \\alpha )，( FIRST(\\alpha) ) 是所有可能作为 ( \\alpha ) 的第一个符号的终结符集合。</li></ul><p><strong>计算方法：</strong></p><ol><li><strong>对于终结符 ( a )</strong>，( FIRST(a) = { a } )。</li><li><strong>对于非终结符 ( A )</strong>，递归计算 ( FIRST(A) )： <ul><li>对于每个产生式 ( A \\rightarrow \\alpha )，将 ( FIRST(\\alpha) ) 加入 ( FIRST(A) )。</li></ul></li><li><strong>对于符号串 ( \\alpha \\beta )</strong>，如果 ( \\varepsilon \\in FIRST(\\alpha) )，则 ( FIRST(\\alpha \\beta) = FIRST(\\alpha) \\cup FIRST(\\beta) )；否则 ( FIRST(\\alpha \\beta) = FIRST(\\alpha) )。</li></ol><p><strong>示例：</strong></p><p>计算 <code>FIRST(F)</code>：</p><ul><li><code>F → ( E )</code>，<code>FIRST(( E )) = { ( }</code></li><li><code>F → id</code>，<code>FIRST(id) = { id }</code></li><li>因此，<code>FIRST(F) = { ( , id }</code></li></ul><h2 id="_5-展望符-lookahead-symbols" tabindex="-1"><a class="header-anchor" href="#_5-展望符-lookahead-symbols" aria-hidden="true">#</a> 5. 展望符（Lookahead symbols）</h2><p><strong>展望符</strong>是 LR(1) 项目中的一个重要概念，用于指导解析器在何时进行归约操作。</p><p><strong>定义：</strong></p><ul><li>展望符 ( a ) 是在项目 ( [A \\rightarrow \\alpha \\cdot \\beta, a] ) 中的符号，表示在输入符号为 ( a ) 时，可以考虑对 ( A \\rightarrow \\alpha \\beta ) 进行归约。</li></ul><p><strong>作用：</strong></p><ul><li>展望符帮助解析器在构建项目集规范族时，准确地预测何时应用某个产生式的归约，避免语法分析中的冲突。</li></ul><p><strong>示例：</strong></p><ul><li>项目 ( [E \\rightarrow E + T \\cdot, $] ) 中的展望符为 <code>\\$</code>，表示在输入结束符 <code>\\$</code> 时，可以对 <code>E → E + T</code> 进行归约。</li></ul><h2 id="_6-闭包-closure" tabindex="-1"><a class="header-anchor" href="#_6-闭包-closure" aria-hidden="true">#</a> 6. 闭包（Closure）</h2><p><strong>闭包</strong>是用于构建 LR(1) 项目集的关键概念。</p><p><strong>项目（Item）</strong>：带有位置标记和展望符的产生式，形式为 ( [A \\rightarrow \\alpha \\cdot \\beta, a] )。</p><p><strong>闭包计算：</strong></p><ol><li>初始化闭包为给定的项目集合。</li><li>对于闭包中的每个项目 ( [A \\rightarrow \\alpha \\cdot B \\beta, a] )，如果 <code>•</code> 后面是非终结符 <code>B</code>，则对于 <code>B</code> 的每个产生式 ( B \\rightarrow \\gamma )，将项目 ( [B \\rightarrow \\cdot \\gamma, b] ) 加入闭包，其中 <code>b</code> 属于 ( FIRST(\\beta a) )。</li></ol><p><strong>示例：</strong></p><p>假设项目 ( [E \\rightarrow E \\cdot + T, a] )，<code>•</code> 后面是终结符 <code>+</code>，则不需扩展。若 <code>•</code> 后面是非终结符，则需根据其产生式和展望符扩展闭包。</p><h2 id="_7-goto-函数" tabindex="-1"><a class="header-anchor" href="#_7-goto-函数" aria-hidden="true">#</a> 7. GOTO 函数</h2><p><strong>GOTO 函数</strong>描述了在项目集之间基于某个符号的转移关系。</p><p><strong>定义：</strong></p><ul><li>对于项目集 ( I ) 和符号 ( X )，( GOTO(I, X) ) 是所有在 ( I ) 中的项目中 <code>•</code> 后面是 ( X ) 的项目，<code>•</code> 前进一位后得到的项目集合，再对其求闭包。</li></ul><p><strong>示例：</strong></p><p>如果有项目 ( [A \\rightarrow \\alpha \\cdot X \\beta, a] ) 在集合 ( I ) 中，那么 ( GOTO(I, X) ) 将包含项目 ( [A \\rightarrow \\alpha X \\cdot \\beta, a] ) 的闭包。</p><h2 id="_8-表达式的含义" tabindex="-1"><a class="header-anchor" href="#_8-表达式的含义" aria-hidden="true">#</a> 8. 表达式的含义</h2><p>在 LR(1) 解析器中，<strong>表达式</strong>通常指代项目，描述了解析器在分析过程中的状态和预期。</p><p><strong>项目表示：</strong></p><ul><li>( [A \\rightarrow \\alpha \\cdot \\beta, a] )：表示已经识别了 ( \\alpha )，接下来期望看到 ( \\beta )，并在展望符 ( a ) 下应用归约。</li></ul><p><strong>项目的作用：</strong></p><ul><li>指示解析器在当前状态下可能的移动（移入）和归约操作。</li></ul><h2 id="_9-各概念的协作关系" tabindex="-1"><a class="header-anchor" href="#_9-各概念的协作关系" aria-hidden="true">#</a> 9. 各概念的协作关系</h2><ul><li><strong>文法</strong>定义了语言的完整语法规则，由<strong>产生式集合</strong>描述。</li><li><strong>终结符</strong>和<strong>非终结符</strong>是文法的基本组成元素。</li><li><strong>FIRST 集</strong>用于预测可能的输入，辅助构建项目集和分析表。</li><li><strong>展望符</strong>在项目中指示了何时进行归约操作，避免语法分析中的冲突。</li><li><strong>闭包</strong>和 <strong>GOTO 函数</strong>用于构建 LR(1) 项目集规范族，确定解析器的状态转移。</li><li>**表达式（项目）**表示解析器的当前状态和预期操作。</li><li><strong>GOTO 表</strong>是在构建项目集规范族后生成的，用于在解析过程中进行状态转移。</li></ul><p>它们共同协作，实现了 LR(1) 解析器对输入串的正确解析。</p><h2 id="_10-c-11-示例-避免使用运算符重载" tabindex="-1"><a class="header-anchor" href="#_10-c-11-示例-避免使用运算符重载" aria-hidden="true">#</a> 10. C++11 示例（避免使用运算符重载）</h2><p>下面通过一个简单的 C++11 程序，演示如何构建 FIRST 集、项目集规范族和 GOTO 表，重点展示展望符的处理。在代码中，我们将避免使用运算符重载。</p><h3 id="_10-1-定义数据结构" tabindex="-1"><a class="header-anchor" href="#_10-1-定义数据结构" aria-hidden="true">#</a> 10.1 定义数据结构</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// 产生式</span>
<span class="token keyword">struct</span> <span class="token class-name">Production</span> <span class="token punctuation">{</span>
    string left<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 项目</span>
<span class="token keyword">struct</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>
    string left<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> right<span class="token punctuation">;</span>
    <span class="token keyword">int</span> dotPosition<span class="token punctuation">;</span>
    string lookahead<span class="token punctuation">;</span>

    <span class="token comment">// 比较函数，用于在集合中排序</span>
    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> Item<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Item<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>left <span class="token operator">!=</span> b<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>left <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>right <span class="token operator">!=</span> b<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>right <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>dotPosition <span class="token operator">!=</span> b<span class="token punctuation">.</span>dotPosition<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>dotPosition <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>dotPosition<span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span>lookahead <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>lookahead<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 等于函数，用于比较两个项目是否相等</span>
    <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">equal</span><span class="token punctuation">(</span><span class="token keyword">const</span> Item<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Item<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span>left <span class="token operator">==</span> b<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span>
               a<span class="token punctuation">.</span>right <span class="token operator">==</span> b<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span>
               a<span class="token punctuation">.</span>dotPosition <span class="token operator">==</span> b<span class="token punctuation">.</span>dotPosition <span class="token operator">&amp;&amp;</span>
               a<span class="token punctuation">.</span>lookahead <span class="token operator">==</span> b<span class="token punctuation">.</span>lookahead<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// Item 的比较器</span>
<span class="token keyword">struct</span> <span class="token class-name">ItemComparator</span> <span class="token punctuation">{</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> Item<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Item<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Item</span><span class="token double-colon punctuation">::</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 状态</span>
<span class="token keyword">struct</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
    set<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span> ItemComparator<span class="token operator">&gt;</span> items<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> transitions<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 状态的等于函数</span>
<span class="token keyword">bool</span> <span class="token function">stateEqual</span><span class="token punctuation">(</span><span class="token keyword">const</span> State<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> State<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> b<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> it1 <span class="token operator">=</span> a<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> it2 <span class="token operator">=</span> b<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>it1 <span class="token operator">!=</span> a<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> it2 <span class="token operator">!=</span> b<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Item</span><span class="token double-colon punctuation">::</span><span class="token function">equal</span><span class="token punctuation">(</span><span class="token operator">*</span>it1<span class="token punctuation">,</span> <span class="token operator">*</span>it2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>it1<span class="token punctuation">;</span>
        <span class="token operator">++</span>it2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 文法</span>
<span class="token keyword">class</span> <span class="token class-name">Grammar</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> terminals<span class="token punctuation">;</span>
    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> nonTerminals<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>Production<span class="token operator">&gt;</span> productions<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> set<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> firstSets<span class="token punctuation">;</span>
    string startSymbol<span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式</span>
    <span class="token keyword">void</span> <span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> left<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        productions<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">,</span> right<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nonTerminals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">:</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNonTerminal</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nonTerminals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>symbol <span class="token operator">!=</span> <span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    terminals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 判断是否为非终结符</span>
    <span class="token keyword">bool</span> <span class="token function">isNonTerminal</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">isupper</span><span class="token punctuation">(</span>symbol<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算 FIRST 集</span>
    <span class="token keyword">void</span> <span class="token function">computeFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> terminal <span class="token operator">:</span> terminals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            firstSets<span class="token punctuation">[</span>terminal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>terminal<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> nonTerminal <span class="token operator">:</span> nonTerminals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            firstSets<span class="token punctuation">[</span>nonTerminal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">bool</span> changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> prod <span class="token operator">:</span> productions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> string<span class="token operator">&amp;</span> A <span class="token operator">=</span> prod<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                size_t before <span class="token operator">=</span> firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">bool</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">:</span> prod<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> firstSet <span class="token operator">=</span> firstSets<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>firstSet<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstSet<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstSet<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> firstSet<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>nullable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> before<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 打印 FIRST 集</span>
    <span class="token keyword">void</span> <span class="token function">printFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> pair <span class="token operator">:</span> firstSets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">=</span> pair<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
            <span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> firstSet <span class="token operator">=</span> pair<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;FIRST(&quot;</span> <span class="token operator">&lt;&lt;</span> symbol <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;) = { &quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> firstSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;}\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2-构建项目集规范族" tabindex="-1"><a class="header-anchor" href="#_10-2-构建项目集规范族" aria-hidden="true">#</a> 10.2 构建项目集规范族</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">LR1Parser</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Grammar grammar<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>State<span class="token operator">&gt;</span> states<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> gotoTable<span class="token punctuation">;</span>

    <span class="token function">LR1Parser</span><span class="token punctuation">(</span><span class="token keyword">const</span> Grammar<span class="token operator">&amp;</span> g<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">grammar</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token comment">// 构建项目集规范族</span>
    <span class="token keyword">void</span> <span class="token function">buildCanonicalCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加拓广文法的开始符号</span>
        string augmentedStart <span class="token operator">=</span> grammar<span class="token punctuation">.</span>startSymbol <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">;</span>
        grammar<span class="token punctuation">.</span>nonTerminals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>augmentedStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
        grammar<span class="token punctuation">.</span>productions<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>grammar<span class="token punctuation">.</span>productions<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>augmentedStart<span class="token punctuation">,</span> <span class="token punctuation">{</span>grammar<span class="token punctuation">.</span>startSymbol<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 初始项</span>
        Item startItem <span class="token operator">=</span> <span class="token punctuation">{</span>augmentedStart<span class="token punctuation">,</span> <span class="token punctuation">{</span>grammar<span class="token punctuation">.</span>startSymbol<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;$&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        State startState <span class="token operator">=</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">{</span>startItem<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        states<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>startState<span class="token punctuation">)</span><span class="token punctuation">;</span>

        queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> que<span class="token punctuation">;</span>
        que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> idx <span class="token operator">=</span> que<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            que<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            State<span class="token operator">&amp;</span> state <span class="token operator">=</span> states<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>

            set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> symbols<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> state<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>dotPosition <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    symbols<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>right<span class="token punctuation">[</span>item<span class="token punctuation">.</span>dotPosition<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">:</span> symbols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                State newState <span class="token operator">=</span> <span class="token function">gotoState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> existingIndex <span class="token operator">=</span> <span class="token function">findState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>existingIndex <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    states<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    existingIndex <span class="token operator">=</span> states<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>existingIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                gotoTable<span class="token punctuation">[</span><span class="token punctuation">{</span>idx<span class="token punctuation">,</span> symbol<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> existingIndex<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 闭包操作</span>
    State <span class="token function">closure</span><span class="token punctuation">(</span><span class="token keyword">const</span> set<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span> ItemComparator<span class="token operator">&gt;</span><span class="token operator">&amp;</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        State state<span class="token punctuation">;</span>
        state<span class="token punctuation">.</span>items <span class="token operator">=</span> items<span class="token punctuation">;</span>

        <span class="token keyword">bool</span> changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            set<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span> ItemComparator<span class="token operator">&gt;</span> newItems <span class="token operator">=</span> state<span class="token punctuation">.</span>items<span class="token punctuation">;</span>

            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> state<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>dotPosition <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> string<span class="token operator">&amp;</span> B <span class="token operator">=</span> item<span class="token punctuation">.</span>right<span class="token punctuation">[</span>item<span class="token punctuation">.</span>dotPosition<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>grammar<span class="token punctuation">.</span><span class="token function">isNonTerminal</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> lookaheads <span class="token operator">=</span> <span class="token function">computeLookaheads</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> prod <span class="token operator">:</span> grammar<span class="token punctuation">.</span>productions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>prod<span class="token punctuation">.</span>left <span class="token operator">==</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> la <span class="token operator">:</span> lookaheads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                    Item newItem <span class="token operator">=</span> <span class="token punctuation">{</span>B<span class="token punctuation">,</span> prod<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> la<span class="token punctuation">}</span><span class="token punctuation">;</span>
                                    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span> <span class="token operator">==</span> state<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                        newItems<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                        changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">}</span>
                                <span class="token punctuation">}</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            state<span class="token punctuation">.</span>items <span class="token operator">=</span> newItems<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// GOTO 操作</span>
    State <span class="token function">gotoState</span><span class="token punctuation">(</span><span class="token keyword">const</span> State<span class="token operator">&amp;</span> state<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        set<span class="token operator">&lt;</span>Item<span class="token punctuation">,</span> ItemComparator<span class="token operator">&gt;</span> items<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> state<span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>dotPosition <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>right<span class="token punctuation">[</span>item<span class="token punctuation">.</span>dotPosition<span class="token punctuation">]</span> <span class="token operator">==</span> symbol<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Item newItem <span class="token operator">=</span> item<span class="token punctuation">;</span>
                newItem<span class="token punctuation">.</span>dotPosition<span class="token operator">++</span><span class="token punctuation">;</span>
                items<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">closure</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 查找状态是否已存在</span>
    <span class="token keyword">int</span> <span class="token function">findState</span><span class="token punctuation">(</span><span class="token keyword">const</span> State<span class="token operator">&amp;</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> states<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stateEqual</span><span class="token punctuation">(</span>states<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算展望符</span>
    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">computeLookaheads</span><span class="token punctuation">(</span><span class="token keyword">const</span> Item<span class="token operator">&amp;</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> result<span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> betaA<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>dotPosition <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            betaA<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>betaA<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> item<span class="token punctuation">.</span>dotPosition <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        betaA<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>lookahead<span class="token punctuation">)</span><span class="token punctuation">;</span>

        set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> first <span class="token operator">=</span> <span class="token function">computeFirst</span><span class="token punctuation">(</span>betaA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>first<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算符号串的 FIRST 集</span>
    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">computeFirst</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> symbols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> result<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> nullable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">:</span> symbols<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> firstSet <span class="token operator">=</span> grammar<span class="token punctuation">.</span>firstSets<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>firstSet<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstSet<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstSet<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> firstSet<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nullable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 打印状态集</span>
    <span class="token keyword">void</span> <span class="token function">printStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> states<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;State &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;:\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> item <span class="token operator">:</span> states<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  [&quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>left <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; → &quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> item<span class="token punctuation">.</span>dotPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;• &quot;</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    cout <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>dotPosition <span class="token operator">==</span> item<span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;• &quot;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>lookahead <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]\\n&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 打印 GOTO 表</span>
    <span class="token keyword">void</span> <span class="token function">printGotoTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;GOTO Table:\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> pair <span class="token operator">:</span> gotoTable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;  From State &quot;</span> <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>first<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; via &#39;&quot;</span> <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>first<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&#39; to State &quot;</span> <span class="token operator">&lt;&lt;</span> pair<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-3-主函数" tabindex="-1"><a class="header-anchor" href="#_10-3-主函数" aria-hidden="true">#</a> 10.3 主函数</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Grammar grammar<span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span>startSymbol <span class="token operator">=</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;T&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 计算 FIRST 集</span>
    grammar<span class="token punctuation">.</span><span class="token function">computeFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">printFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 构建 LR(1) 解析器</span>
    LR1Parser <span class="token function">parser</span><span class="token punctuation">(</span>grammar<span class="token punctuation">)</span><span class="token punctuation">;</span>
    parser<span class="token punctuation">.</span><span class="token function">buildCanonicalCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    parser<span class="token punctuation">.</span><span class="token function">printStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    parser<span class="token punctuation">.</span><span class="token function">printGotoTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-4-运行结果" tabindex="-1"><a class="header-anchor" href="#_10-4-运行结果" aria-hidden="true">#</a> 10.4 运行结果</h3><p><strong>FIRST 集：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FIRST(id) = { id }
FIRST(*) = { * }
FIRST(E) = { ( id }
FIRST(T) = { ( id }
FIRST(F) = { ( id }
FIRST(+) = { + }
FIRST(() = { ( }
FIRST()) = { ) }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>状态集和 GOTO 表：</strong></p><p>由于状态集较多，此处仅展示部分输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>State 0:
  [E&#39; → • E, $]
  [E → • E + T, $]
  [E → • T, $]
  [T → • T * F, $]
  [T → • F, $]
  [F → • ( E ), $]
  [F → • id, $]

...

GOTO Table:
  From State 0 via &#39;E&#39; to State 1
  From State 0 via &#39;T&#39; to State 2
  From State 0 via &#39;F&#39; to State 3
  From State 0 via &#39;(&#39; to State 4
  From State 0 via &#39;id&#39; to State 5
  From State 1 via &#39;+&#39; to State 6
  ...

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ul><li>我们首先定义了文法，并计算了 FIRST 集。</li><li>然后构建了 LR(1) 项目集规范族，生成了状态集和 GOTO 表。</li><li>在代码中，我们避免了使用运算符重载，改为使用静态的比较和等于函数，以及自定义的比较器。</li><li>展望符在项目的闭包计算中得到应用，确保了解析器能够正确预测归约操作。</li><li>打印输出有助于理解 LR(1) 解析器的构建过程，特别是展望符的作用。</li></ul><h2 id="_11-总结" tabindex="-1"><a class="header-anchor" href="#_11-总结" aria-hidden="true">#</a> 11. 总结</h2><p>通过上述 C++11 示例代码，我们展示了如何在不使用运算符重载的情况下，构建 LR(1) 解析器的核心部分。理解文法、终结符、非终结符、产生式、FIRST 集、展望符、闭包、GOTO 表和表达式（项目）之间的协作关系，对于掌握编译原理和语法分析器的实现至关重要。希望通过这份详细的解释和代码示例，您能够更深入地理解 LR(1) 解析器的工作原理。</p>`,74),e=[o];function c(i,l){return s(),a("div",null,e)}const r=n(p,[["render",c],["__file","lr1-detail3.html.vue"]]);export{r as default};
