import{_ as n,Y as s,Z as a,a2 as e}from"./framework-301d0703.js";const t={},o=e(`<h1 id="python中的单例模式" tabindex="-1"><a class="header-anchor" href="#python中的单例模式" aria-hidden="true">#</a> Python中的单例模式</h1><p>在Python中，实现单例模式有多种方法，以下我将介绍几种常见的实现方式，并解释其原理。</p><h2 id="方法一-使用-new-方法" tabindex="-1"><a class="header-anchor" href="#方法一-使用-new-方法" aria-hidden="true">#</a> 方法一：使用<code>__new__</code>方法</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>
    _instance <span class="token operator">=</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理解释" tabindex="-1"><a class="header-anchor" href="#原理解释" aria-hidden="true">#</a> 原理解释：</h3><ul><li><code>__new__</code>是一个特殊的方法，用于创建并返回一个新的实例对象。在实例化对象时，Python会首先调用<code>__new__</code>方法创建对象，然后再调用<code>__init__</code>方法初始化对象。</li><li>在上述代码中，我们在<code>__new__</code>方法中检查<code>_instance</code>类变量是否为<code>None</code>，如果是，则调用<code>super().__new__(cls)</code>创建一个新的实例，并将其赋值给<code>_instance</code>。</li><li>之后，每次创建新的实例时，<code>__new__</code>方法都会返回同一个<code>_instance</code>，从而确保类只有一个实例存在。</li></ul><h2 id="方法二-使用装饰器" tabindex="-1"><a class="header-anchor" href="#方法二-使用装饰器" aria-hidden="true">#</a> 方法二：使用装饰器</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
    instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> instances<span class="token punctuation">:</span>
            instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>
    <span class="token keyword">return</span> wrapper

<span class="token decorator annotation punctuation">@singleton</span>
<span class="token keyword">class</span> <span class="token class-name">SingletonClass</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理解释-1" tabindex="-1"><a class="header-anchor" href="#原理解释-1" aria-hidden="true">#</a> 原理解释：</h3><ul><li>定义一个<code>singleton</code>装饰器，内部维护一个字典<code>instances</code>，用于保存类的实例。</li><li>当被装饰的类被实例化时，<code>wrapper</code>函数会检查该类是否已经存在实例，如果不存在，则创建一个新的实例并保存；如果存在，则直接返回已有的实例。</li><li>通过装饰器的方式，可以方便地将任何类转换为单例类。</li></ul><h2 id="方法三-使用元类-metaclass" tabindex="-1"><a class="header-anchor" href="#方法三-使用元类-metaclass" aria-hidden="true">#</a> 方法三：使用元类（<code>metaclass</code>）</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">SingletonMeta</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    _instances <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> cls <span class="token keyword">not</span> <span class="token keyword">in</span> cls<span class="token punctuation">.</span>_instances<span class="token punctuation">:</span>
            cls<span class="token punctuation">.</span>_instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__call__<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instances<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">SingletonClass</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>SingletonMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理解释-2" tabindex="-1"><a class="header-anchor" href="#原理解释-2" aria-hidden="true">#</a> 原理解释：</h3><ul><li>元类是用于创建类的“类”，即控制类的创建过程。</li><li>定义一个名为<code>SingletonMeta</code>的元类，继承自<code>type</code>，并重写其<code>__call__</code>方法。</li><li>在<code>__call__</code>方法中，检查类是否已经存在实例，如果不存在，则调用<code>super().__call__</code>创建一个新的实例；如果存在，则直接返回已有的实例。</li><li>任何以<code>SingletonMeta</code>作为元类的类，都会自动成为单例类。</li></ul><h2 id="方法四-使用模块属性" tabindex="-1"><a class="header-anchor" href="#方法四-使用模块属性" aria-hidden="true">#</a> 方法四：使用模块属性</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># singleton_module.py</span>
<span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

singleton <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="原理解释-3" tabindex="-1"><a class="header-anchor" href="#原理解释-3" aria-hidden="true">#</a> 原理解释：</h3><ul><li>在Python中，模块在被导入时会被执行一次，其内部的全局变量和类实例在整个程序运行期间都是唯一的。</li><li>通过在模块内创建一个类的实例，然后在需要使用的地方导入该实例，可以实现单例的效果。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>上述方法都利用了Python的特性来实现单例模式：</p><ul><li><strong>方法一</strong>通过重写<code>__new__</code>方法，控制实例的创建过程，确保只创建一个实例。</li><li><strong>方法二</strong>利用装饰器在类的外部控制实例的创建和访问。</li><li><strong>方法三</strong>通过元类修改类的实例化行为，实现单例模式。</li><li><strong>方法四</strong>利用模块的天然单例特性，将实例保存在模块级别。</li></ul><p>选择哪种方法取决于具体的应用场景和个人编码习惯。</p>`,22),c=[o];function p(l,i){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","python-singleton.html.vue"]]);export{u as default};
