import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as e,o as n}from"./app-CpvZAdF4.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h1 id="android-aosp-build-aosp-and-run-image-to-emulator-in-windows11" tabindex="-1"><a class="header-anchor" href="#android-aosp-build-aosp-and-run-image-to-emulator-in-windows11"><span>Android | AOSP | build aosp and run image to emulator in windows11</span></a></h1><h2 id="environment" tabindex="-1"><a class="header-anchor" href="#environment"><span>environment</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>// 宿主系统</span></span>
<span class="line"><span>Windows11</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 编译aosp系统</span></span>
<span class="line"><span>WSL2 - Ubuntu-18.04</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// aosp分支</span></span>
<span class="line"><span>android-13.0.0_r41</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>注意：AOSP代码必须存放在WLS2内部，否则在Windows上会产生很多未保存文件，影响分支切换，代码更新。</p></div><h2 id="wsl2-is-migrated-to-another-hard-disk" tabindex="-1"><a class="header-anchor" href="#wsl2-is-migrated-to-another-hard-disk"><span>wsl2 is migrated to another hard disk</span></a></h2><p>可以通过以下步骤将 WSL2 迁移至其他硬盘：</p><ol><li>关闭 WSL2</li></ol><p>首先需要关闭正在运行的 WSL2，可以在 PowerShell 或 CMD 中输入以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --shutdown</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li>导出 WSL2 镜像</li></ol><p>使用以下命令导出 WSL2 镜像，其中 <code>&lt;distribution&gt;</code> 是要导出的发行版的名称，<code>&lt;file&gt;</code> 是导出的文件名和路径：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --export</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">distributio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">fil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>删除旧的 WSL2 镜像</li></ol><p>在导出镜像之前，需要删除原来的 WSL2 镜像。可以通过以下命令列出已安装的 WSL2 发行版：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --list</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --verbose</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后通过以下命令删除指定的 WSL2 发行版：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --unregister</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">distributio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="4"><li>导入 WSL2 镜像</li></ol><p>使用以下命令导入 WSL2 镜像，其中 <code>&lt;distribution&gt;</code> 是要导入的发行版的名称，<code>&lt;file&gt;</code> 是导出的文件名和路径：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">distributio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">director</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">y&gt; &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">fil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>&lt;directory&gt;</code> 是新的 WSL2 镜像目录的路径。</p><ol start="5"><li>启动新的 WSL2</li></ol><p>通过以下命令启动新的 WSL2：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">distributio</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>&lt;distribution&gt;</code> 是要启动的发行版的名称。</p><p>注意：在进行上述操作时，请确保备份重要数据并了解风险。</p><ul><li><a href="https://blog.csdn.net/zyb418/article/details/124114683" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zyb418/article/details/124114683</a></li></ul><h2 id="wls2-expand-the-capacity-of-ubuntu-18-04" tabindex="-1"><a class="header-anchor" href="#wls2-expand-the-capacity-of-ubuntu-18-04"><span>wls2 expand the capacity of ubuntu-18.04</span></a></h2><ul><li><a href="https://learn.microsoft.com/zh-cn/windows/wsl/disk-space" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/windows/wsl/disk-space</a></li><li><a href="https://www.jianshu.com/p/2348dc7e9aef" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/2348dc7e9aef</a></li><li><a href="https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/expand-vdisk" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/windows-server/administration/windows-commands/expand-vdisk</a></li></ul><h2 id="如何给wls2-ubuntu18-0-4-扩充磁盘容量" tabindex="-1"><a class="header-anchor" href="#如何给wls2-ubuntu18-0-4-扩充磁盘容量"><span>如何给WLS2-Ubuntu18.0.4 扩充磁盘容量</span></a></h2><p>在 WSL2 (Windows Subsystem for Linux 2) 中，Ubuntu 18.04 默认会将磁盘存储为一个 VHDX 文件。要扩展 WSL2 Ubuntu 18.04 的磁盘容量，请按照以下步骤操作：</p><p><strong>步骤 1</strong>：关闭 WSL2 实例。在 Windows PowerShell 或命令提示符中运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --shutdown</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 2</strong>：找到 VHDX 文件。WSL2 实例的 VHDX 文件通常位于 <code>C:\\Users\\&lt;YourUsername&gt;\\AppData\\Local\\Packages\\</code> 目录下。然后进入一个名为 <code>CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc</code>（这个名字可能略有不同）的文件夹。接下来，进入 <code>LocalState</code> 文件夹。在此文件夹中，您应该可以找到名为 <code>ext4.vhdx</code> 的文件。</p><p><strong>步骤 3</strong>：扩展 VHDX 文件。首先，打开 Windows PowerShell 或命令提示符以管理员身份运行。然后，使用 <code>Resize-VHD</code> 命令扩展 VHDX 文件。将 <code>&lt;YourPath&gt;</code> 替换为实际的 VHDX 文件路径，并将 <code>&lt;NewSize&gt;</code> 替换为您要扩展到的新大小（以 GB 为单位）。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Resize-VHD</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">YourPat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">xt4.vhdx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -SizeBytes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">NewSiz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">GB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，如果 VHDX 文件位于 <code>C:\\Users\\example\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\\LocalState\\ext4.vhdx</code>，并且您希望将其扩展到 50GB，则应运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Resize-VHD</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -Path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;C:\\Users\\example\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\\LocalState\\ext4.vhdx&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -SizeBytes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 50GB</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 4</strong>：启动 WSL2 实例。在 Windows PowerShell 或命令提示符中运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wsl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 5</strong>：现在，您需要在 WSL2 Ubuntu 18.04 内部调整文件系统。运行以下命令，将 <code>&lt;NewSize&gt;</code> 替换为实际的新大小（以 GB 为单位）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> resize2fs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/sda</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">NewSiz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例如，如果您将 VHDX 文件扩展到 50GB，则应运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> resize2fs</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /dev/sda</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 50G</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>完成这些步骤后，WSL2 Ubuntu 18.04 的磁盘容量应已成功扩展。您可以使用 <code>df -h</code> 命令检查新的磁盘空间。</p><h2 id="wls2-install-android-studio-clion" tabindex="-1"><a class="header-anchor" href="#wls2-install-android-studio-clion"><span>wls2 install android-studio &amp;&amp; clion</span></a></h2><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps" target="_blank" rel="noopener noreferrer">https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/gui-apps</a></p><h2 id="aosp-install-repo" tabindex="-1"><a class="header-anchor" href="#aosp-install-repo"><span>aosp install repo</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> update</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> repo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> upgrade</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> repo</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> .repo/repo/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pull</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/biezhihua/projects/aosp/.repo/repo/repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/repo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> a+rx</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /usr/bin/repo</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j8</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://source.android.com/docs/setup/download" target="_blank" rel="noopener noreferrer">https://source.android.com/docs/setup/download</a></li><li><a href="https://gerrit.googlesource.com/git-repo/+/refs/heads/master/README.md" target="_blank" rel="noopener noreferrer">https://gerrit.googlesource.com/git-repo/+/refs/heads/master/README.md</a></li></ul><h2 id="aosp-simple-download-and-build" tabindex="-1"><a class="header-anchor" href="#aosp-simple-download-and-build"><span>aosp simple download and build</span></a></h2><p>要下载AOSP（Android Open Source Project），请按照以下步骤操作：</p><ol><li><p>安装Git：要从AOSP代码仓库中下载源代码，您需要先在计算机上安装Git。您可以从Git官网下载安装程序并按照说明进行安装。</p></li><li><p>获取AOSP代码：打开终端或命令行窗口，在命令行中输入以下命令，以下载AOSP代码：</p></li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mkdir</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aosp</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aosp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://android.googlesource.com/platform/manifest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">h&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>&lt;branch&gt;</code> 表示您要下载的AOSP版本的分支名称。例如，要下载Android 12（代码名称为S），请使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://android.googlesource.com/platform/manifest</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> android-12.0.0_r1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令将初始化repo工具，并使用指定的分支从AOSP代码仓库中获取源代码。然后，使用 <code>repo sync</code> 命令将所有源代码下载到本地计算机上。</p><ol start="3"><li>构建AOSP：下载完AOSP源代码后，可以使用以下命令构建AOSP：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build/envsetup.sh</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lunch</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>source build/envsetup.sh</code> 命令将设置必要的环境变量，<code>lunch</code> 命令将提示您选择要构建的目标设备类型和版本，而 <code>make -j4</code> 命令将开始构建过程。请注意，这个过程可能需要一些时间和大量的磁盘空间。</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener noreferrer">https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/</a></li><li><a href="https://juejin.cn/post/7038543675109933070" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7038543675109933070</a></li></ul><h2 id="aosp-checkout-branch" tabindex="-1"><a class="header-anchor" href="#aosp-checkout-branch"><span>aosp checkout branch</span></a></h2><p>切换分支需要先进入到你本地的AOSP代码目录中，然后使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">branch-nam</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>&lt;branch-name&gt;</code>指定你要切换到的分支名，例如切换到Android 13的分支，则可以使用以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> android-13.0.0_r41</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完以上命令后，AOSP代码就会被同步到对应的分支。注意，切换分支可能会导致一些代码库的版本变化，需要谨慎操作。</p><h2 id="repo-clean-all-unsaved-files" tabindex="-1"><a class="header-anchor" href="#repo-clean-all-unsaved-files"><span>repo clean all unsaved files</span></a></h2><p>Repo工具是Git工具的扩展，用于管理多个Git代码仓库。与Git类似，Repo也不会在本地仓库中保存未提交的更改。因此，您需要使用文本编辑器或其他适当的工具来保存您的更改。如果您已经对某些文件进行了更改，但还没有提交它们，您可以使用以下方法来清除这些更改：</p><ol><li>如果您只想清除单个Git仓库中的文件更改，请使用以下命令：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> forall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">projec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">t&gt; </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;git checkout -- file-name&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>&lt;project&gt;</code> 是您要清除更改的Git仓库的名称，<code>file-name</code> 是要清除更改的文件名。该命令将覆盖本地的更改，并还原文件为最后一次提交的状态。</p><ol start="2"><li>如果您想清除所有Git仓库中的未提交更改，请使用以下命令：</li></ol><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">repo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> forall</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;git reset --hard&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令将重置所有Git仓库的本地仓库到最后一次提交的状态，并清除所有未提交的更改。请注意，这将不可逆地删除所有未提交的更改，因此请谨慎使用。</p><p>无论您使用哪种方法，都要确保在清除更改之前，将重要的更改保存到其他文件或备份中。</p><h2 id="replace-source" tabindex="-1"><a class="header-anchor" href="#replace-source"><span>replace source</span></a></h2><p>如果你之前已经通过某种途径获得了 AOSP 的源码(或者你只是 init 这一步完成后)， 你希望以后通过 TUNA 同步 AOSP 部分的代码，只需要修改 .repo/manifests.git/config，将</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>url = https://android.googlesource.com/platform/manifest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更改为</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>url = https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>或者可以不修改文件，而执行</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git config --global url.https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/.insteadof https://android.googlesource.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener noreferrer">https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/</a></li></ul><h2 id="prepare-build-environment-of-wls2-ubuntu-18-04" tabindex="-1"><a class="header-anchor" href="#prepare-build-environment-of-wls2-ubuntu-18-04"><span>prepare build environment of wls2 - Ubuntu-18.04</span></a></h2><p><a href="https://source.android.com/docs/setup/start/initializing#installing-required-packages-ubuntu-1804" target="_blank" rel="noopener noreferrer">https://source.android.com/docs/setup/start/initializing#installing-required-packages-ubuntu-1804</a></p><h2 id="build-aosp" tabindex="-1"><a class="header-anchor" href="#build-aosp"><span>build aosp</span></a></h2><p>查看CPU核心数量：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;core id&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /proc/cpuinfo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -u</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><a href="https://juejin.cn/post/7043063280704684063" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7043063280704684063</a></li><li><a href="https://blog.csdn.net/nei504293736/article/details/109628378" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/nei504293736/article/details/109628378</a></li><li><a href="https://luyaoming.com/2021/06/23/wsl2%E4%B8%8B%E4%B8%8B%E8%BD%BD%E4%B8%8E%E7%BC%96%E8%AF%91AOSP/" target="_blank" rel="noopener noreferrer">https://luyaoming.com/2021/06/23/wsl2下下载与编译AOSP/</a></li></ul><h2 id="wls2-set-the-fixed-ip-address-set-the-read-and-write-capability-of-the-smb-directory" tabindex="-1"><a class="header-anchor" href="#wls2-set-the-fixed-ip-address-set-the-read-and-write-capability-of-the-smb-directory"><span>wls2 set the fixed IP address &amp; set the read and write capability of the SMB directory</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[share]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   comment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> share</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /home/biezhihua/projects/aosp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   force</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   writeable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   browseable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   public</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yes</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   create</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mask</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0644</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   directory</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mask</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0755</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> service</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> smbd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> restart</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><a href="https://zhuanlan.zhihu.com/p/380779630" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/380779630</a></li><li><a href="https://github.com/MicrosoftDocs/WSL/issues/418#issuecomment-648570865" target="_blank" rel="noopener noreferrer">https://github.com/MicrosoftDocs/WSL/issues/418#issuecomment-648570865</a></li><li><a href="https://blog.csdn.net/weixin_41301508/article/details/108939520" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/weixin_41301508/article/details/108939520</a></li><li><a href="https://unix.stackexchange.com/questions/206309/how-to-create-a-samba-share-that-is-writable-from-windows-without-777-permission" target="_blank" rel="noopener noreferrer">https://unix.stackexchange.com/questions/206309/how-to-create-a-samba-share-that-is-writable-from-windows-without-777-permission</a></li><li><a href="https://blog.csdn.net/sinat_21011081/article/details/118404717?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-118404717-blog-108939520.235%5Ev32%5Epc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-118404717-blog-108939520.235%5Ev32%5Epc_relevant_default_base3&amp;utm_relevant_index=1" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/sinat_21011081/article/details/118404717?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-118404717-blog-108939520.235^v32^pc_relevant_default_base3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-118404717-blog-108939520.235^v32^pc_relevant_default_base3&amp;utm_relevant_index=1</a></li></ul><h2 id="run-a-compiled-image-to-emulator-method1" tabindex="-1"><a class="header-anchor" href="#run-a-compiled-image-to-emulator-method1"><span>run a compiled image to emulator | method1</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#擦除已有的avd数据</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">D:\\Android\\sdk\\emulator\\emulator.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biezhihua_aosp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -wipe-data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#模拟器重新加载android image</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">D:\\Android\\sdk\\emulator\\emulator.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biezhihua_aosp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -system</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;your_android_path\\out\\target\\product\\generic_x86_64\\system.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;your_android_path\\out\\target\\product\\generic_x86_64\\userdata.img&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> D:\\Android\\sdk\\emulator\\emulator.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biezhihua_aosp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -system</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\system.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\userdata.img&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://blog.csdn.net/dangelzjj/article/details/109267411" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/dangelzjj/article/details/109267411</a></li><li><a href="https://blog.csdn.net/dangelzjj/article/details/109267411" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/dangelzjj/article/details/109267411</a></li><li><a href="https://blog.csdn.net/yongwn/article/details/121009506" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/yongwn/article/details/121009506</a></li><li><a href="https://groups.google.com/g/android-building/c/O9a6Ohnb5hI?pli=1" target="_blank" rel="noopener noreferrer">https://groups.google.com/g/android-building/c/O9a6Ohnb5hI?pli=1</a></li></ul><h2 id="run-a-compiled-image-to-emulator-method2" tabindex="-1"><a class="header-anchor" href="#run-a-compiled-image-to-emulator-method2"><span>run a compiled image to emulator | method2</span></a></h2><p>拷贝产物到windows镜像目录下；</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/VerifiedBootParams.textproto</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/advancedFeatures.ini</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/encryptionkey.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/kernel-ranchu</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/ramdisk-qemu.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/ramdisk.img</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/system-qemu.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/system.img</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/userdata.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/vendor-qemu.img</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/vendor.img</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cp</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/emulator_x86_64/system/build.prop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/Android/sdk/system-images/android-33/google_apis/x86_64/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Pixel_3_Edited_API_30</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -writable-system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -wipe-data</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -show-kernel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -skip-adb-auth</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -no-cache</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biezhihua_aosp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -system</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\system-qemu.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\userdata.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -writable-system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -wipe-data</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -show-kernel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -skip-adb-auth</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -no-cache</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biezhihua_aosp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -system</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\system-qemu.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\userdata.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -writable-system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -show-kernel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -skip-adb-auth</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://sidneyding.cn/posts/c64b5633/" target="_blank" rel="noopener noreferrer">https://sidneyding.cn/posts/c64b5633/</a></li></ul><h2 id="run-a-compiled-image-to-emulator-method3" tabindex="-1"><a class="header-anchor" href="#run-a-compiled-image-to-emulator-method3"><span>run a compiled image to emulator | method3</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biezhihua_aosp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -system</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/home/biezhihua/projects/aosp/out/target/product/emulator_x86_64/system-qemu.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/home/biezhihua/projects/aosp/out/target/product/emulator_x86_64/userdata.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -writable-system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -show-kernel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -skip-adb-auth</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -wipe-data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="对于aosp-如何打包单个模块并更新system-img文件-请以framework-native为例" tabindex="-1"><a class="header-anchor" href="#对于aosp-如何打包单个模块并更新system-img文件-请以framework-native为例"><span>对于AOSP，如何打包单个模块并更新system.img文件，请以framework/native为例</span></a></h2><p>在 AOSP 源代码中，若要仅构建 framework/native 模块并更新 system.img 文件，可按照以下步骤操作：</p><p><strong>步骤 1</strong>：启动一个终端并进入 AOSP 源代码的根目录。</p><p><strong>步骤 2</strong>：启动构建环境，运行以下命令：</p><p>bash</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build/envsetup.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 3</strong>：选择要构建的目标设备。例如，如果要为 <code>sdk_phone_x86_64-eng</code> 构建模块，请运行：</p><p>bash</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lunch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sdk_phone_x86_64-eng</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 4</strong>：构建 framework/native 模块。<code>framework/native</code> 实际上包含许多模块。假设您要构建 <code>libui</code> 模块，可以执行以下命令：</p><p>bash</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mmm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nproc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks/native/libs/ui</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将仅构建 <code>libui</code> 模块。要构建整个 <code>framework/native</code>，您需要为每个子模块重复此步骤。</p><p><strong>步骤 5</strong>：现在，已经构建了所需的模块，需要将其安装到 system.img 中。为此，请运行以下命令：</p><p>bash</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> snod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令将根据已经生成的各个分区（包括已更新的模块）重新生成 system.img 文件。</p><p>完成上述步骤后，您可以在 <code>out/target/product/&lt;device&gt;/</code> 目录下找到更新后的 system.img 文件。此时，您可以将更新后的 system.img 刷入设备或模拟器以进行测试。</p><p>注意：如果您的目标是将新生成的模块（例如 .so 文件）推送到已运行的设备或模拟器上，那么在步骤 4 之后，您可以直接使用 <code>adb push</code> 命令将新生成的模块推送到相应的目录，而无需重新生成整个 system.img。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remount</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">devic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/system/lib64/libui.so</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /system/lib64/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reboot</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将 <code>&lt;device&gt;</code> 替换为实际的设备名称。这将在重新启动设备后立即应用新的模块。</p><h2 id="对于aosp-如何打包单个模块并更新system-img文件-请以framework-native-surfaceflinger为例" tabindex="-1"><a class="header-anchor" href="#对于aosp-如何打包单个模块并更新system-img文件-请以framework-native-surfaceflinger为例"><span>对于AOSP，如何打包单个模块并更新system.img文件，请以framework/native/surfaceflinger为例</span></a></h2><p>在 AOSP 源代码中，若要仅构建 framework/native/surfaceflinger 模块并更新 system.img 文件，可按照以下步骤操作：</p><p><strong>步骤 1</strong>：启动一个终端并进入 AOSP 源代码的根目录。</p><p><strong>步骤 2</strong>：启动构建环境，运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">source</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> build/envsetup.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 3</strong>：选择要构建的目标设备。例如，如果要为 <code>sdk_phone_x86_64-eng</code> 构建模块，请运行：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lunch</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sdk_phone_x86_64-eng</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>步骤 4</strong>：构建 framework/native/surfaceflinger 模块。要构建 SurfaceFlinger 模块，请执行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mmm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j$(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nproc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks/native/services/surfaceflinger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mmm</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -j32</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks/native/services/surfaceflinger</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这将仅构建 SurfaceFlinger 模块。</p><p><strong>步骤 5</strong>：现在，已经构建了所需的模块，需要将其安装到 system.img 中。为此，请运行以下命令：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> snod</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此命令将根据已经生成的各个分区（包括已更新的模块）重新生成 system.img 文件。</p><p>完成上述步骤后，您可以在 <code>out/target/product/&lt;device&gt;/</code> 目录下找到更新后的 system.img 文件。此时，您可以将更新后的 system.img 刷入设备或模拟器以进行测试。</p><p>注意：如果您的目标是将新生成的模块（例如 .so 文件）推送到已运行的设备或模拟器上，那么在步骤 4 之后，您可以直接使用 <code>adb push</code> 命令将新生成的模块推送到相应的目录，而无需重新生成整个 system.img。例如：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> root</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remount</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> out/target/product/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">devic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">e&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/system/lib64/libsurfaceflinger.so</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /system/lib64/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\U</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">buntu-18.04</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\h</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ome</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">iezhihua</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">rojects</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">osp</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\o</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ut</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\t</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">arget</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">roduct</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\e</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mulator_x86_64</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ystem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\b</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\N</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">ativeSFDemo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /system/bin/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sync</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reboot</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请将 <code>&lt;device&gt;</code> 替换为实际的设备名称。这将在重新启动设备后立即应用新的模块。</p><h2 id="error-createramdiskwithbootconfig-can-t-open-product-emulator-x86-64-initrd-for-writing" tabindex="-1"><a class="header-anchor" href="#error-createramdiskwithbootconfig-can-t-open-product-emulator-x86-64-initrd-for-writing"><span>ERROR | createRamdiskWithBootconfig: Can&#39;t open &#39;product\\emulator_x86_64\\initrd&#39; for writing</span></a></h2><p>这个错误提示的是在创建 ramdisk 时出现问题，无法打开 &quot;product\\emulator_x86_64\\initrd&quot; 文件进行写入。这可能是由于以下原因之一导致的：</p><ol><li><p><strong>文件路径错误</strong>：请确保 &quot;product\\emulator_x86_64\\initrd&quot; 文件的路径正确。注意在 Windows 系统中，文件路径中的分隔符应为反斜杠（<code>\\</code>），而在类 Unix 系统（如 Linux 和 macOS）中，文件路径中的分隔符应为正斜杠（<code>/</code>）。根据您使用的操作系统，检查文件路径是否正确。</p></li><li><p><strong>文件或文件夹权限问题</strong>：确保您具有足够的权限访问 &quot;product\\emulator_x86_64\\initrd&quot; 文件。在 Unix 类系统中，您可以使用 <code>chmod</code> 和 <code>chown</code> 命令来更改文件或文件夹的权限。在 Windows 系统中，可以右键单击文件或文件夹，然后选择 &quot;属性&quot;，在 &quot;安全&quot; 选项卡中更改权限。</p></li><li><p><strong>文件或文件夹不存在</strong>：确保 &quot;product\\emulator_x86_64&quot; 文件夹存在，并且其中包含 &quot;initrd&quot; 文件。如果缺少该文件，请尝试重新构建项目以生成正确的文件。</p></li><li><p><strong>磁盘空间不足</strong>：请确保您的系统上有足够的磁盘空间可供写入 &quot;product\\emulator_x86_64\\initrd&quot; 文件。如果磁盘空间不足，请清理一些不需要的文件，以释放足够的空间。</p></li></ol><p>检查以上各项，并根据需要进行相应的修复操作。这应该有助于解决在运行 AOSP 自己编译的镜像时出现的错误。</p><h2 id="aosp中打印函数调用栈-在surfaceflinger" tabindex="-1"><a class="header-anchor" href="#aosp中打印函数调用栈-在surfaceflinger"><span>AOSP中打印函数调用栈，在surfaceflinger</span></a></h2><p>不可以使用下面的命令构建单个模块，因为无法指定工程构建架构，会产生编译错误：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mmm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks/native/services/surfaceflinger</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ld.lld: error: undefined symbol: android::CallStack::CallStack()</span></span>
<span class="line"><span>ld.lld: error: undefined symbol: android::CallStack::update(int, int)</span></span>
<span class="line"><span>ld.lld: error: undefined symbol: android::CallStack::log(char const*, android_LogPriority, char const*) const</span></span>
<span class="line"><span>ld.lld: error: undefined symbol: android::CallStack::~CallStack()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://www.cnblogs.com/roger-yu/p/15596840.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/roger-yu/p/15596840.html</a></li><li><a href="https://utzcoz.github.io/2020/04/29/Print-call-stack-in-AOSP-native-code.html" target="_blank" rel="noopener noreferrer">https://utzcoz.github.io/2020/04/29/Print-call-stack-in-AOSP-native-code.html</a></li><li><a href="https://blog.csdn.net/zhaojia92/article/details/97827285" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/zhaojia92/article/details/97827285</a></li></ul><h2 id="aosp-过滤调用栈日志" tabindex="-1"><a class="header-anchor" href="#aosp-过滤调用栈日志"><span>AOSP 过滤调用栈日志</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator.exe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -avd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> biezhihua_aosp</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  -system</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\system-qemu.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">wsl.localhost\\Ubuntu-18.04\\home\\biezhihua\\projects\\aosp\\out\\target\\product\\emulator_x86_64\\userdata.img&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -writable-system</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -show-kernel</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -skip-adb-auth</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -wipe-data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>onComposerHalHotplug</code>的调用栈：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> # adb logcat | findstr &quot;bzh&quot;</span></span>
<span class="line"><span>05-03 23:34:47.773   443   443 D bzh     : #00 pc 00000000001ec91c  /system/bin/surfaceflinger (android::SurfaceFlinger::onComposerHalHotplug(unsigned long, android::hardware::graphics::composer::V2_1::IComposerCallback::Connection)+524)</span></span>
<span class="line"><span>05-03 23:34:47.773   443   443 D bzh     : #01 pc 000000000017bd71  /system/bin/surfaceflinger (android::Hwc2::(anonymous namespace)::ComposerCallbackBridge::onHotplug(unsigned long, android::hardware::graphics::composer::V2_1::IComposerCallback::Connection)+17)</span></span>
<span class="line"><span>05-03 23:34:47.773   443   443 D bzh     : #02 pc 00000000000293ef  /system/lib64/android.hardware.graphics.composer@2.1.so (android::hardware::graphics::composer::V2_1::BnHwComposerCallback::_hidl_onHotplug(android::hidl::base::V1_0::BnHwBase*, android::hardware::Parcel const&amp;, android::hardware::Parcel*, std::__1::function&lt;void (android::hardware::Parcel&amp;)&gt;)+239)</span></span>
<span class="line"><span>05-03 23:34:47.773   443   443 D bzh     : #03 pc 000000000003859b  /system/lib64/android.hardware.graphics.composer@2.4.so (android::hardware::graphics::composer::V2_4::BnHwComposerCallback::onTransact(unsigned int, android::hardware::Parcel const&amp;, android::hardware::Parcel*, unsigned int, std::__1::function&lt;void (android::hardware::Parcel&amp;)&gt;)+603)</span></span>
<span class="line"><span>05-03 23:34:47.773   443   443 D bzh     : #04 pc 000000000009ad49  /system/lib64/libhidlbase.so (android::hardware::BHwBinder::transact(unsigned int, android::hardware::Parcel const&amp;, android::hardware::Parcel*, unsigned int, std::__1::function&lt;void (android::hardware::Parcel&amp;)&gt;)+137)</span></span>
<span class="line"><span>05-03 23:34:47.773   443   443 D bzh     : #05 pc 00000000000a035a  /system/lib64/libhidlbase.so (android::hardware::IPCThreadState::executeCommand(int)+3770)</span></span>
<span class="line"><span>05-03 23:34:47.773   443   443 D bzh     : #06 pc 00000000000a11a7  /system/lib64/libhidlbase.so (android::hardware::IPCThreadState::waitForResponse(android::hardware::Parcel*, int*)+103)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #07 pc 00000000000a0ceb  /system/lib64/libhidlbase.so (android::hardware::IPCThreadState::transact(int, unsigned int, android::hardware::Parcel const&amp;, android::hardware::Parcel*, unsigned int)+171)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #08 pc 000000000009bc95  /system/lib64/libhidlbase.so (android::hardware::BpHwBinder::transact(unsigned int, android::hardware::Parcel const&amp;, android::hardware::Parcel*, unsigned int, std::__1::function&lt;void (android::hardware::Parcel&amp;)&gt;)+69)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #09 pc 000000000003eb72  /system/lib64/android.hardware.graphics.composer@2.4.so (android::hardware::graphics::composer::V2_4::BpHwComposerClient::_hidl_registerCallback_2_4(android::hardware::IInterface*, android::hardware::details::HidlInstrumentor*, android::sp&lt;android::hardware::graphics::composer::V2_4::IComposerCallback&gt; const&amp;)+514)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #10 pc 0000000000043298  /system/lib64/android.hardware.graphics.composer@2.4.so (android::hardware::graphics::composer::V2_4::BpHwComposerClient::registerCallback_2_4(android::sp&lt;android::hardware::graphics::composer::V2_4::IComposerCallback&gt; const&amp;)+40)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #11 pc 0000000000175be5  /system/bin/surfaceflinger (android::Hwc2::HidlComposer::registerCallback(android::HWC2::ComposerCallback&amp;)+229)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #12 pc 0000000000183c24  /system/bin/surfaceflinger (android::impl::HWComposer::setCallback(android::HWC2::ComposerCallback&amp;)+4004)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #13 pc 00000000001e4ded  /system/bin/surfaceflinger (android::SurfaceFlinger::init()+877)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #14 pc 0000000000237994  /system/bin/surfaceflinger (main+1220)</span></span>
<span class="line"><span>05-03 23:34:47.774   443   443 D bzh     : #15 pc 0000000000050cc9  /apex/com.android.runtime/lib64/bionic/libc.so (__libc_init+89)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aidegen-ide导入aosp源码" tabindex="-1"><a class="header-anchor" href="#aidegen-ide导入aosp源码"><span>AIDEGen IDE导入AOSP源码</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aidegen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks/native/services/surfaceflinger</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aidegen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks/native/services/surfaceflinger</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://zhuanlan.zhihu.com/p/272522594" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/272522594</a></li><li><a href="https://www.youtube.com/watch?v=XJ0dI2SYHIE" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=XJ0dI2SYHIE</a></li><li><a href="https://juejin.cn/post/7166061140298956836" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/7166061140298956836</a></li><li><a href="https://android.googlesource.com/platform/tools/asuite/+/refs/heads/master/aidegen/README.md" target="_blank" rel="noopener noreferrer">https://android.googlesource.com/platform/tools/asuite/+/refs/heads/master/aidegen/README.md</a></li></ul><h2 id="clion-debug-android-native-code" tabindex="-1"><a class="header-anchor" href="#clion-debug-android-native-code"><span>CLion debug android native code</span></a></h2><h3 id="安装lldb" tabindex="-1"><a class="header-anchor" href="#安装lldb"><span>安装LLDB</span></a></h3><ul><li><a href="https://blog.csdn.net/iamdy/article/details/111272854" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/iamdy/article/details/111272854</a></li><li><a href="https://source.android.google.cn/docs/core/tests/debug/gdb?hl=zh-cn" target="_blank" rel="noopener noreferrer">https://source.android.google.cn/docs/core/tests/debug/gdb?hl=zh-cn</a></li><li><a href="https://lldb.llvm.org/" target="_blank" rel="noopener noreferrer">https://lldb.llvm.org/</a></li><li><a href="https://www.jetbrains.com/help/clion/remote-debug.html" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/help/clion/remote-debug.html</a></li><li><a href="https://www.jianshu.com/p/76ae75688079" target="_blank" rel="noopener noreferrer">https://www.jianshu.com/p/76ae75688079</a></li><li><a href="https://blog.csdn.net/qq_23542165/article/details/121275404" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_23542165/article/details/121275404</a></li></ul><h3 id="lldb-for-android" tabindex="-1"><a class="header-anchor" href="#lldb-for-android"><span>LLDB FOR Android</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">/root/Android/Sdk/ndk/25.2.9519653/toolchains/llvm/prebuilt/linux-x86_64/lib64/clang/14.0.7/lib/linux/x86_64/lldb-server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lldb-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /data/local/tmp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator_x86_64:/data/local/tmp</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # chmod 775 ./lldb-server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">emulator_x86_64:/data/local/tmp</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # ./lldb-server platform --listen &quot;*:1234&quot; --server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> push</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lldb-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /data/local/tmp/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /data/local/tmp</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">chmod</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 755</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> lldb-server</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./lldb-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --listen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unix-abstract:///data/local/tmp/debug.sock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lldb-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;version&gt;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> list</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 查看lldb可以连接的平台</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> select</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> remote-android</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> status</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 查看平台状态</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> unix-abstract-connect:///data/local/tmp/debug.sock</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./lldb-server</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> platform</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --listen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;*:1234&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --server</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">platform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connect</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> connect://emulator-5554:1234</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><a href="https://stackoverflow.com/questions/53733781/how-do-i-use-lldb-to-debug-c-code-on-android-on-command-line" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/53733781/how-do-i-use-lldb-to-debug-c-code-on-android-on-command-line</a></li><li><a href="https://youtrack.jetbrains.com/issue/CPP-26922" target="_blank" rel="noopener noreferrer">https://youtrack.jetbrains.com/issue/CPP-26922</a></li><li><a href="https://www.lili.kim/2019/01/28/android/Debug%20Android%20Native%20with%20LLDB/" target="_blank" rel="noopener noreferrer">https://www.lili.kim/2019/01/28/android/Debug Android Native with LLDB/</a></li></ul><h3 id="lldb-vs-code-debug-android-native-code" tabindex="-1"><a class="header-anchor" href="#lldb-vs-code-debug-android-native-code"><span>LLDB VS Code debug android native code</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aidegen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks/native/services</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> v</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /mnt/d/App/Microsoft</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">VS</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\ </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Code/bin</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><a href="https://github.com/xxr0ss/vscode_lldb_remote_android" target="_blank" rel="noopener noreferrer">https://github.com/xxr0ss/vscode_lldb_remote_android</a></li></ul><h2 id="gdb-clion-debug-android-native-code" tabindex="-1"><a class="header-anchor" href="#gdb-clion-debug-android-native-code"><span>GDB Clion debug android native code</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> pidof</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> surfaceflinger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./gdbserver</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> :12345</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --attach</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 460</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><a href="https://www.jetbrains.com/help/clion/remote-debug.html" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/help/clion/remote-debug.html</a></li></ul><h3 id="android-emulator-怎么开启-gdbserver" tabindex="-1"><a class="header-anchor" href="#android-emulator-怎么开启-gdbserver"><span>android emulator 怎么开启 gdbserver</span></a></h3><p>您可以通过以下步骤在 Android 模拟器上启动 gdbserver：</p><ol><li>在模拟器中安装 gdbserver</li></ol><p>首先，您需要在模拟器中安装 gdbserver。您可以使用以下 adb 命令安装：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>adb push gdbserver /data/local/tmp/</span></span>
<span class="line"><span>adb shell chmod 755 /data/local/tmp/gdbserver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>在模拟器中启动 gdbserver</li></ol><p>接下来，您需要在模拟器中启动 gdbserver，以便可以通过 GDB 连接到它。您可以使用以下 adb 命令启动 gdbserver：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>adb shell /data/local/tmp/gdbserver :&lt;port&gt; &lt;process-id&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>&lt;port&gt;</code> 是您要使用的调试端口号，<code>&lt;process-id&gt;</code> 是您要调试的进程 ID。例如，以下命令将启动 gdbserver 并将其绑定到端口号 1234，以调试进程 ID 12345：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>adb shell /data/local/tmp/gdbserver :1234 12345</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li>在主机上连接到 gdbserver</li></ol><p>最后，您需要在主机上运行 GDB，并使用以下命令连接到模拟器中的 gdbserver：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gdb &lt;executable&gt; -ex &#39;target remote &lt;ip-address&gt;:&lt;port&gt;&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中 <code>&lt;executable&gt;</code> 是您要调试的可执行文件，<code>&lt;ip-address&gt;</code> 是您的模拟器 IP 地址，<code>&lt;port&gt;</code> 是您在第 2 步中指定的端口号。例如，以下命令将使用 GDB 连接到 IP 地址为 192.168.0.2，端口号为 1234 的模拟器：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gdb my_app -ex &#39;target remote 192.168.0.2:1234&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>请注意，在连接到模拟器之前，您需要确保模拟器和主机在同一网络中，并且可以相互通信。</p><p>希望这可以帮助您启动 gdbserver 并连接到 Android 模拟器进行调试。</p><h3 id="android可用的gdbserver在哪里可以找到" tabindex="-1"><a class="header-anchor" href="#android可用的gdbserver在哪里可以找到"><span>android可用的gdbserver在哪里可以找到</span></a></h3><p>可以在 Android NDK 中找到可用的 gdbserver。可以从以下位置下载 Android NDK：<a href="https://developer.android.com/ndk/downloads%E3%80%82" target="_blank" rel="noopener noreferrer">https://developer.android.com/ndk/downloads。</a></p><p>在下载并解压缩 Android NDK 后，您可以在 <code>&lt;ndk_root&gt;/prebuilt/android-x86/gdbserver</code>（或其他 CPU 架构的相应目录）找到 gdbserver 可执行文件。</p><p>将此可执行文件复制到 Android 设备上，并在设备上运行它以启动 gdbserver。例如，如果您的 Android 设备的 IP 地址为 <code>192.168.1.100</code>，则可以使用以下命令启动 gdbserver：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>adb shell /data/local/tmp/gdbserver :9999 --attach &lt;pid&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这将在 Android 设备上的 <code>9999</code> 端口上启动 gdbserver，并将其附加到 <code>&lt;pid&gt;</code> 指定的进程。然后，您可以在本地主机上使用 gdb 来连接 gdbserver 并进行调试：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gdb</span></span>
<span class="line"><span>(gdb) target remote 192.168.1.100:9999</span></span>
<span class="line"><span>(gdb) ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果您的 Android 设备已经 root，并且已经安装了 SuperSU 或 Magisk 等 root 管理应用程序，则可以直接将 gdbserver 安装到设备上，而不需要每次都复制它。</p><h2 id="clion预览代码-lldb调试代码" tabindex="-1"><a class="header-anchor" href="#clion预览代码-lldb调试代码"><span>CLion预览代码，LLDB调试代码</span></a></h2><p>预览代码</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">aidegen</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> frameworks</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> c</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动模拟器</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>emulator -avd biezhihua_aosp  -system &quot;/home/biezhihua/projects/aosp/out/target/product/emulator_x86_64/system-qemu.img&quot; -data &quot;/home/biezhihua/projects/aosp/out/target/product/emulator_x86_64/userdata.img&quot; -writable-system -show-kernel -skip-adb-auth -wipe-data</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>获取目标进程PID</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>adb shell pidof surfaceflinger</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>调试代码</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 进入调试模式</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">lldbclient.py</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -p</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 446</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">//</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 首次进入后，所有线程会因为stop</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reason</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> signal</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SIGSTOP挂起</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">continue</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 让进程继续执行</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加断点：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">breakpoint</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> set</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -M</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> SurfaceFlinger::onComposerHalVsync</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>打印调用栈</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">bt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><a href="https://source.android.com/docs/core/tests/debug/gdb?hl=zh-cn" target="_blank" rel="noopener noreferrer">https://source.android.com/docs/core/tests/debug/gdb?hl=zh-cn</a></li><li><a href="https://lldb.llvm.org/" target="_blank" rel="noopener noreferrer">https://lldb.llvm.org/</a></li></ul><h2 id="init-got-an-unexpected-keyword-argument-text" tabindex="-1"><a class="header-anchor" href="#init-got-an-unexpected-keyword-argument-text"><span><strong>init</strong>() got an unexpected keyword argument &#39;text&#39;</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>➜  aosp lldbclient.py -p 3696  --setup-forwarding vscode-lldb</span></span>
<span class="line"><span>Traceback (most recent call last):</span></span>
<span class="line"><span>  File &quot;/home/biezhihua/projects/aosp/development/scripts/lldbclient.py&quot;, line 426, in &lt;module&gt;</span></span>
<span class="line"><span>    main()</span></span>
<span class="line"><span>  File &quot;/home/biezhihua/projects/aosp/development/scripts/lldbclient.py&quot;, line 418, in main</span></span>
<span class="line"><span>    do_main()</span></span>
<span class="line"><span>  File &quot;/home/biezhihua/projects/aosp/development/scripts/lldbclient.py&quot;, line 352, in do_main</span></span>
<span class="line"><span>    clang_version = read_toolchain_config(root)</span></span>
<span class="line"><span>  File &quot;/home/biezhihua/projects/aosp/development/scripts/lldbclient.py&quot;, line 41, in read_toolchain_config</span></span>
<span class="line"><span>    text=True)</span></span>
<span class="line"><span>  File &quot;/usr/lib/python3.6/subprocess.py&quot;, line 356, in check_output</span></span>
<span class="line"><span>    **kwargs).stdout</span></span>
<span class="line"><span>  File &quot;/usr/lib/python3.6/subprocess.py&quot;, line 423, in run</span></span>
<span class="line"><span>    with Popen(*popenargs, **kwargs) as process:</span></span>
<span class="line"><span>TypeError: **init**() got an unexpected keyword argument &#39;text&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个错误发生在运行 <code>lldbclient.py</code> 脚本时。原因是在您使用的 Python 版本（3.6）中，<code>subprocess</code> 模块的 <code>Popen</code> 类的 <code>__init__()</code> 方法不支持 <code>text</code> 关键字参数。<code>text</code> 参数在 Python 3.7 及更高版本的 <code>subprocess</code> 模块中引入，用于替代过时的 <code>universal_newlines</code> 参数。</p><p>为了解决这个问题，您可以执行以下操作：</p><ol><li><p>更新 Python 版本。建议安装 Python 3.7 或更高版本。这可以通过使用您的包管理器或从 <a href="https://www.python.org/downloads/" target="_blank" rel="noopener noreferrer">Python 官方网站</a> 下载并安装新版本来完成。</p></li><li><p>如果您不希望或不能更新 Python，可以尝试修改 <code>lldbclient.py</code> 脚本。在脚本的第 41 行，将以下代码：</p></li></ol><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>替换为：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">universal_newlines</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会在旧版本的 <code>subprocess</code> 模块中使用 <code>universal_newlines</code> 参数，实现与 <code>text</code> 参数相同的功能。</p><p>保存更改后，再次运行 <code>lldbclient.py</code> 脚本，问题应该得到解决。</p><h2 id="other" tabindex="-1"><a class="header-anchor" href="#other"><span>other</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">adb</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> shell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ps</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grep</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> surfaceflinger</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,226)]))}const p=s(l,[["render",t],["__file","build-aosp-in-wls.html.vue"]]),k=JSON.parse('{"path":"/learn-android/aosp/build-aosp-in-wls.html","title":"Android | AOSP | build aosp and run image to emulator in windows11","lang":"zh-CN","frontmatter":{"tag":["android","aosp"],"description":"Android | AOSP | build aosp and run image to emulator in windows11 environment 警告 注意：AOSP代码必须存放在WLS2内部，否则在Windows上会产生很多未保存文件，影响分支切换，代码更新。 wsl2 is migrated to another hard disk 可...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/learn-android/aosp/build-aosp-in-wls.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"Android | AOSP | build aosp and run image to emulator in windows11"}],["meta",{"property":"og:description","content":"Android | AOSP | build aosp and run image to emulator in windows11 environment 警告 注意：AOSP代码必须存放在WLS2内部，否则在Windows上会产生很多未保存文件，影响分支切换，代码更新。 wsl2 is migrated to another hard disk 可..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:tag","content":"android"}],["meta",{"property":"article:tag","content":"aosp"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Android | AOSP | build aosp and run image to emulator in windows11\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1678770176000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":19,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":17.62,"words":5287},"filePathRelative":"learn-android/aosp/build-aosp-in-wls.md","localizedDate":"2023年3月14日","excerpt":"","autoDesc":true}');export{p as comp,k as data};
