import{_ as n,Y as s,Z as a,a2 as e}from"./framework-301d0703.js";const t={},o=e(`<h1 id="在-quickjs-中-js-eval-函数用于在给定的-javascript-上下文-jscontext-中评估和执行一段-javascript-代码。这个函数是嵌入式-javascript-引擎的重要接口-允许您在-c-代码中动态执行-javascript-脚本。" tabindex="-1"><a class="header-anchor" href="#在-quickjs-中-js-eval-函数用于在给定的-javascript-上下文-jscontext-中评估和执行一段-javascript-代码。这个函数是嵌入式-javascript-引擎的重要接口-允许您在-c-代码中动态执行-javascript-脚本。" aria-hidden="true">#</a> 在 QuickJS 中，<code>JS_Eval()</code> 函数用于在给定的 JavaScript 上下文（<code>JSContext</code>）中评估和执行一段 JavaScript 代码。这个函数是嵌入式 JavaScript 引擎的重要接口，允许您在 C 代码中动态执行 JavaScript 脚本。</h1><h2 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义" aria-hidden="true">#</a> 函数定义</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>JSValue <span class="token function">JS_Eval</span><span class="token punctuation">(</span>JSContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span>
                <span class="token class-name">size_t</span> input_len<span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span>
                <span class="token keyword">int</span> eval_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h2><ul><li><p><strong><code>JSContext *ctx</code></strong>：JavaScript 上下文，表示当前的执行环境。所有的 JavaScript 操作都在这个上下文中进行。</p></li><li><p><strong><code>const char *input</code></strong>：要评估和执行的 JavaScript 代码字符串。</p></li><li><p><strong><code>size_t input_len</code></strong>：<code>input</code> 字符串的长度（以字节为单位）。如果 <code>input</code> 是以 <code>&#39;\\0&#39;</code> 结尾的字符串，可以使用 <code>strlen(input)</code> 获取长度。</p></li><li><p><strong><code>const char *filename</code></strong>：源代码的文件名，用于错误报告和调试信息。如果没有实际的文件名，可以传入 <code>&quot;eval&quot;</code> 或其他描述性的字符串。</p></li><li><p><strong><code>int eval_flags</code></strong>：评估标志，控制代码的解析和执行方式。常用的标志包括：</p><ul><li><p><strong>代码类型标志</strong>：</p><ul><li><code>JS_EVAL_TYPE_GLOBAL</code>：将代码作为全局代码执行（默认）。</li><li><code>JS_EVAL_TYPE_MODULE</code>：将代码作为模块代码执行，允许使用 <code>import</code> 和 <code>export</code>。</li></ul></li><li><p><strong>执行模式标志</strong>：</p><ul><li><code>JS_EVAL_FLAG_STRICT</code>：强制以严格模式执行代码。</li><li><code>JS_EVAL_FLAG_STRIP</code>：移除调试信息，优化内存使用和安全性。</li></ul></li></ul></li></ul><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h2><ul><li><strong><code>JSValue</code></strong>：表示评估结果的 JavaScript 值。如果执行成功，返回值可能是任意 JavaScript 类型（如数字、字符串、对象等）。如果发生错误，返回一个异常值，需要使用 <code>JS_IsException()</code> 进行检查。</li></ul><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><p>以下是如何使用 <code>JS_Eval()</code> 函数的基本步骤：</p><ol><li><p><strong>准备 JavaScript 代码</strong>：定义要执行的 JavaScript 脚本。</p></li><li><p><strong>调用 <code>JS_Eval()</code></strong>：将代码和相关参数传递给函数。</p></li><li><p><strong>处理返回值</strong>：检查是否有异常发生，处理结果。</p></li><li><p><strong>释放资源</strong>：释放返回的 <code>JSValue</code>，防止内存泄漏。</p></li></ol><h3 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h3><h4 id="示例-1-执行全局代码" tabindex="-1"><a class="header-anchor" href="#示例-1-执行全局代码" aria-hidden="true">#</a> 示例 1：执行全局代码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>code <span class="token operator">=</span> <span class="token string">&quot;console.log(&#39;Hello, QuickJS!&#39;);&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">size_t</span> code_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
JSValue result <span class="token operator">=</span> <span class="token function">JS_Eval</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> code<span class="token punctuation">,</span> code_len<span class="token punctuation">,</span> <span class="token string">&quot;mycode.js&quot;</span><span class="token punctuation">,</span> JS_EVAL_TYPE_GLOBAL<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JS_IsException</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理异常</span>
    JSValue exception <span class="token operator">=</span> <span class="token function">JS_GetException</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>error_str <span class="token operator">=</span> <span class="token function">JS_ToCString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;执行出错：%s\\n&quot;</span><span class="token punctuation">,</span> error_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JS_FreeCString</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> error_str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">JS_FreeValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 正常执行</span>
    <span class="token comment">// 处理结果（如果有必要）</span>
<span class="token punctuation">}</span>

<span class="token function">JS_FreeValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-2-在严格模式下执行代码" tabindex="-1"><a class="header-anchor" href="#示例-2-在严格模式下执行代码" aria-hidden="true">#</a> 示例 2：在严格模式下执行代码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>code <span class="token operator">=</span> <span class="token string">&quot;&#39;use strict&#39;; var a = 10;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 设置标志为全局代码和严格模式</span>
<span class="token keyword">int</span> eval_flags <span class="token operator">=</span> JS_EVAL_TYPE_GLOBAL <span class="token operator">|</span> JS_EVAL_FLAG_STRICT<span class="token punctuation">;</span>

JSValue result <span class="token operator">=</span> <span class="token function">JS_Eval</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;strict_code.js&quot;</span><span class="token punctuation">,</span> eval_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JS_IsException</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理异常</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">JS_FreeValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="示例-3-执行模块代码" tabindex="-1"><a class="header-anchor" href="#示例-3-执行模块代码" aria-hidden="true">#</a> 示例 3：执行模块代码</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>module_code <span class="token operator">=</span> <span class="token string">&quot;export function add(a, b) { return a + b; }&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> eval_flags <span class="token operator">=</span> JS_EVAL_TYPE_MODULE<span class="token punctuation">;</span>

JSValue result <span class="token operator">=</span> <span class="token function">JS_Eval</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> module_code<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>module_code<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;module_code.js&quot;</span><span class="token punctuation">,</span> eval_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JS_IsException</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理异常</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 模块已成功加载，可以使用 import 语句或其他方式访问导出的内容</span>
<span class="token punctuation">}</span>

<span class="token function">JS_FreeValue</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="详细说明" tabindex="-1"><a class="header-anchor" href="#详细说明" aria-hidden="true">#</a> 详细说明</h2><h3 id="_1-jscontext-ctx" tabindex="-1"><a class="header-anchor" href="#_1-jscontext-ctx" aria-hidden="true">#</a> 1. <code>JSContext *ctx</code></h3><ul><li><strong>作用</strong>：指定 JavaScript 代码执行的上下文环境。</li><li><strong>注意事项</strong>：确保在创建的上下文中执行，并在使用完毕后正确释放上下文。</li></ul><h3 id="_2-const-char-input-和-size-t-input-len" tabindex="-1"><a class="header-anchor" href="#_2-const-char-input-和-size-t-input-len" aria-hidden="true">#</a> 2. <code>const char *input</code> 和 <code>size_t input_len</code></h3><ul><li><strong>作用</strong>：提供要执行的 JavaScript 代码及其长度。</li><li><strong>注意事项</strong>：代码可以是任何有效的 JavaScript 脚本，长度必须准确。</li></ul><h3 id="_3-const-char-filename" tabindex="-1"><a class="header-anchor" href="#_3-const-char-filename" aria-hidden="true">#</a> 3. <code>const char *filename</code></h3><ul><li><strong>作用</strong>：用于错误报告和调试信息，指示代码的来源。</li><li><strong>建议</strong>：即使代码不是来自文件，也应提供一个描述性的名称，便于调试。</li></ul><h3 id="_4-int-eval-flags" tabindex="-1"><a class="header-anchor" href="#_4-int-eval-flags" aria-hidden="true">#</a> 4. <code>int eval_flags</code></h3><ul><li><p><strong>作用</strong>：控制代码的解析和执行方式。</p></li><li><p><strong>常用标志</strong>：</p><ul><li><strong><code>JS_EVAL_TYPE_GLOBAL</code></strong>：默认值，将代码作为全局脚本执行。</li><li><strong><code>JS_EVAL_TYPE_MODULE</code></strong>：将代码作为模块执行，支持模块语法。</li><li><strong><code>JS_EVAL_FLAG_STRICT</code></strong>：强制代码以严格模式执行，捕获潜在的错误。</li><li><strong><code>JS_EVAL_FLAG_STRIP</code></strong>：移除调试信息，减少内存占用，增强代码安全性。</li></ul></li><li><p><strong>标志组合</strong>：使用按位或操作符 <code>|</code> 组合多个标志。</p></li></ul><h3 id="_5-返回值处理" tabindex="-1"><a class="header-anchor" href="#_5-返回值处理" aria-hidden="true">#</a> 5. 返回值处理</h3><ul><li><strong>成功</strong>：返回 JavaScript 值，需要根据具体情况处理。</li><li><strong>失败</strong>：返回异常，需要使用 <code>JS_IsException()</code> 检查，并使用 <code>JS_GetException()</code> 获取异常信息。</li></ul><h3 id="_6-内存管理" tabindex="-1"><a class="header-anchor" href="#_6-内存管理" aria-hidden="true">#</a> 6. 内存管理</h3><ul><li><strong>释放值</strong>：所有通过 <code>JS_Eval()</code> 返回的 <code>JSValue</code>，在使用完毕后都应调用 <code>JS_FreeValue(ctx, val)</code> 进行释放。</li><li><strong>防止泄漏</strong>：及时释放异常信息和字符串，以防止内存泄漏。</li></ul><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ul><li><strong>线程安全</strong>：QuickJS 的上下文不是线程安全的。在多线程环境中，需要确保线程同步。</li><li><strong>错误处理</strong>：始终检查返回值是否为异常，避免程序崩溃。</li><li><strong>安全性</strong>：执行动态代码可能带来安全风险，应确保代码来源可靠。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p><code>JS_Eval()</code> 函数是 QuickJS 中执行动态 JavaScript 代码的核心接口。通过理解其参数和使用方法，您可以在 C 应用程序中集成 JavaScript 解释器，实现灵活的脚本执行和扩展功能。</p><ul><li><strong>功能</strong>：在指定的上下文中评估并执行 JavaScript 代码。</li><li><strong>用途</strong>：动态执行脚本、加载和运行模块、实现脚本化的逻辑控制。</li><li><strong>使用方法</strong>：提供代码字符串、设置合适的标志、处理返回值和异常。</li></ul><p>通过合理使用 <code>JS_Eval()</code>，您可以大大增强应用程序的可扩展性和动态性。</p>`,37),c=[o];function p(i,l){return s(),a("div",null,c)}const u=n(t,[["render",p],["__file","quickjs-eval.html.vue"]]);export{u as default};
