import{_ as n,Y as s,Z as a,a2 as e}from"./framework-301d0703.js";const t={},p=e(`<h1 id="systemfirmwaretable" tabindex="-1"><a class="header-anchor" href="#systemfirmwaretable" aria-hidden="true">#</a> SystemFirmwareTable</h1><h3 id="什么是-systemfirmwaretable" tabindex="-1"><a class="header-anchor" href="#什么是-systemfirmwaretable" aria-hidden="true">#</a> <strong>什么是 <code>SystemFirmwareTable</code>？</strong></h3><p><code>SystemFirmwareTable</code> 是一个与系统固件（BIOS 或 UEFI）相关的 Windows API 函数，用于访问系统固件提供的数据。它位于 Windows 的 <strong>Kernel32.dll</strong> 中，通常用于检索存储在固件中的特定信息，例如 ACPI 表、SMBIOS 数据、FIRMWARE TABLE 信息等。</p><p>在编程时，通过 <code>SystemFirmwareTable</code> 函数可以读取系统固件提供的特定表数据，开发者可以用它来获取硬件相关的信息。</p><hr><h3 id="函数原型" tabindex="-1"><a class="header-anchor" href="#函数原型" aria-hidden="true">#</a> <strong>函数原型</strong></h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>UINT <span class="token function">GetSystemFirmwareTable</span><span class="token punctuation">(</span>
  DWORD FirmwareTableProviderSignature<span class="token punctuation">,</span>
  DWORD FirmwareTableID<span class="token punctuation">,</span>
  PVOID pFirmwareTableBuffer<span class="token punctuation">,</span>
  DWORD BufferSize
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明：</h4><ol><li><p><strong><code>FirmwareTableProviderSignature</code></strong>:</p><ul><li>表示固件表提供者的签名，例如： <ul><li><strong>&#39;ACPI&#39;</strong>：高级配置和电源接口（ACPI）表。</li><li><strong>&#39;RSMB&#39;</strong>：系统管理 BIOS（SMBIOS）表。</li></ul></li><li>这些签名是 4 字节的字符串，通常写为字符常量（如 <code>&#39;ACPI&#39;</code>）。</li></ul></li><li><p><strong><code>FirmwareTableID</code></strong>:</p><ul><li>表示要检索的特定固件表的 ID。例如，ACPI 表中的 &quot;DSDT&quot; 或 &quot;FACP&quot;。</li></ul></li><li><p><strong><code>pFirmwareTableBuffer</code></strong>:</p><ul><li>指向接收表数据的缓冲区。如果设置为 <code>NULL</code>，则函数会返回所需缓冲区的大小。</li></ul></li><li><p><strong><code>BufferSize</code></strong>:</p><ul><li>表示 <code>pFirmwareTableBuffer</code> 缓冲区的大小。如果缓冲区太小，函数会返回所需的大小。</li></ul></li></ol><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值：</h4><ul><li>如果 <code>pFirmwareTableBuffer</code> 为 <code>NULL</code>，返回表数据所需的缓冲区大小。</li><li>如果调用成功，返回的是实际写入缓冲区的字节数。</li><li>如果调用失败，返回值为 0。</li></ul><hr><h3 id="作用和用途" tabindex="-1"><a class="header-anchor" href="#作用和用途" aria-hidden="true">#</a> <strong>作用和用途</strong></h3><ol><li><p><strong>获取硬件信息</strong>：</p><ul><li>可以获取固件中存储的详细硬件信息，例如 CPU 支持的功能、内存布局等。</li></ul></li><li><p><strong>系统管理</strong>：</p><ul><li>系统管理员可以使用该 API 检查 BIOS/UEFI 中是否包含特定的表，从而获取硬件配置或调试信息。</li></ul></li><li><p><strong>ACPI 表访问</strong>：</p><ul><li>ACPI 表中包含许多关于电源管理和硬件接口的信息，例如： <ul><li><code>DSDT</code>：差异化系统描述表。</li><li><code>FACP</code>：固定 ACPI 描述表。</li></ul></li><li>通过访问 ACPI 表，可以实现更深层次的硬件控制。</li></ul></li><li><p><strong>BIOS/UEFI 调试</strong>：</p><ul><li>调试工具可以通过该函数检查固件数据是否符合预期，例如验证 SMBIOS 是否正确存储了系统序列号。</li></ul></li><li><p><strong>固件更新支持</strong>：</p><ul><li>固件提供的数据可以用来辅助设计安全的固件更新流程。</li></ul></li></ol><hr><h3 id="常见使用场景" tabindex="-1"><a class="header-anchor" href="#常见使用场景" aria-hidden="true">#</a> <strong>常见使用场景</strong></h3><h4 id="获取所有可用的固件表签名" tabindex="-1"><a class="header-anchor" href="#获取所有可用的固件表签名" aria-hidden="true">#</a> <strong>获取所有可用的固件表签名</strong></h4><p>可以使用 <code>EnumSystemFirmwareTables</code> 函数列出所有支持的固件表签名，然后通过 <code>SystemFirmwareTable</code> 获取具体内容。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">ListFirmwareTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DWORD bufferSize <span class="token operator">=</span> <span class="token function">EnumSystemFirmwareTables</span><span class="token punctuation">(</span><span class="token char">&#39;ACPI&#39;</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to enumerate firmware tables.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">char</span><span class="token operator">*</span> tableSignatures <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EnumSystemFirmwareTables</span><span class="token punctuation">(</span><span class="token char">&#39;ACPI&#39;</span><span class="token punctuation">,</span> tableSignatures<span class="token punctuation">,</span> bufferSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>DWORD i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bufferSize<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ACPI Table: %.4s\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tableSignatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>tableSignatures<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">ListFirmwareTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="读取特定的-acpi-表" tabindex="-1"><a class="header-anchor" href="#读取特定的-acpi-表" aria-hidden="true">#</a> <strong>读取特定的 ACPI 表</strong></h4><p>以下代码示例读取指定的 ACPI 表：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">GetAcpiTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    DWORD tableID <span class="token operator">=</span> <span class="token char">&#39;DSDT&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// 读取 DSDT 表</span>
    DWORD bufferSize <span class="token operator">=</span> <span class="token function">GetSystemFirmwareTable</span><span class="token punctuation">(</span><span class="token char">&#39;ACPI&#39;</span><span class="token punctuation">,</span> tableID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferSize <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to get ACPI table size.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span><span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>bufferSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetSystemFirmwareTable</span><span class="token punctuation">(</span><span class="token char">&#39;ACPI&#39;</span><span class="token punctuation">,</span> tableID<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> bufferSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;ACPI Table Data Retrieved Successfully.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里可以解析表数据</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to retrieve ACPI table data.\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">GetAcpiTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> <strong>注意事项</strong></h3><ol><li><p><strong>权限</strong>：</p><ul><li>读取固件数据可能需要管理员权限。</li></ul></li><li><p><strong>兼容性</strong>：</p><ul><li><code>SystemFirmwareTable</code> 和 <code>EnumSystemFirmwareTables</code> 从 Windows Vista 开始支持。</li></ul></li><li><p><strong>缓冲区大小</strong>：</p><ul><li>如果提供的缓冲区大小不足，函数会返回所需的大小，调用者需要动态分配。</li></ul></li><li><p><strong>数据解析</strong>：</p><ul><li>返回的数据通常是二进制格式，开发者需要根据表的格式（如 ACPI 表）自行解析。</li></ul></li></ol><hr><h3 id="相关-api" tabindex="-1"><a class="header-anchor" href="#相关-api" aria-hidden="true">#</a> <strong>相关 API</strong></h3><ol><li><p><strong><code>EnumSystemFirmwareTables</code></strong>：</p><ul><li>用于列出系统中所有的固件表签名。</li></ul></li><li><p><strong><code>GetFirmwareEnvironmentVariable</code></strong>：</p><ul><li>获取固件环境变量（常用于 UEFI 系统）。</li></ul></li><li><p><strong><code>SetFirmwareEnvironmentVariable</code></strong>：</p><ul><li>设置固件环境变量。</li></ul></li></ol><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h3><p><code>SystemFirmwareTable</code> 是一个强大的工具，用于在 Windows 中访问系统固件（BIOS/UEFI）中存储的重要数据。它在硬件调试、驱动程序开发和系统管理中都有广泛的应用。通过结合 <code>EnumSystemFirmwareTables</code>，开发者可以灵活地列出和读取特定的固件表数据。</p>`,31),i=[p];function o(l,c){return s(),a("div",null,i)}const r=n(t,[["render",o],["__file","windows-SystemFirmwareTable.html.vue"]]);export{r as default};
