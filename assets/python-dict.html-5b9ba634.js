import{_ as n,Y as s,Z as a,a2 as e}from"./framework-301d0703.js";const t={},p=e(`<h1 id="python中如何组合-kwargs传参" tabindex="-1"><a class="header-anchor" href="#python中如何组合-kwargs传参" aria-hidden="true">#</a> python中如何组合**kwargs传参</h1><p>在 Python 中，使用 <code>**kwargs</code> 传递关键字参数时，可以通过多种方式组合 <code>**kwargs</code> 来传递参数。以下是几种常见的方式：</p><h3 id="_1-直接解包多个-kwargs" tabindex="-1"><a class="header-anchor" href="#_1-直接解包多个-kwargs" aria-hidden="true">#</a> 1. <strong>直接解包多个 <code>**kwargs</code></strong></h3><p>你可以将多个字典解包并组合成一个新的关键字参数字典。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>

dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>

<span class="token comment"># 组合 dict1 和 dict2 的参数</span>
my_function<span class="token punctuation">(</span><span class="token operator">**</span>dict1<span class="token punctuation">,</span> <span class="token operator">**</span>dict2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果存在重复的键，后面的会覆盖前面的值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>

my_function<span class="token punctuation">(</span><span class="token operator">**</span>dict1<span class="token punctuation">,</span> <span class="token operator">**</span>dict2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;a&#39;: 1, &#39;b&#39;: 3, &#39;c&#39;: 4}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="_2-在函数中动态添加关键字参数" tabindex="-1"><a class="header-anchor" href="#_2-在函数中动态添加关键字参数" aria-hidden="true">#</a> 2. <strong>在函数中动态添加关键字参数</strong></h3><p>你可以在函数中动态地合并其他字典到 <code>kwargs</code> 中。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    extra_params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">&#39;y&#39;</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">}</span>
    kwargs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>extra_params<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>

my_function<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;x&#39;: 5, &#39;y&#39;: 6}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="_3-通过字典合并操作" tabindex="-1"><a class="header-anchor" href="#_3-通过字典合并操作" aria-hidden="true">#</a> 3. <strong>通过字典合并操作</strong></h3><p>从 Python 3.9 开始，可以使用字典合并操作符 <code>|</code> 或 <code>|=</code> 来合并字典。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>

combined_kwargs <span class="token operator">=</span> dict1 <span class="token operator">|</span> dict2
<span class="token keyword">print</span><span class="token punctuation">(</span>combined_kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你需要直接传给函数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">my_function</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>

my_function<span class="token punctuation">(</span><span class="token operator">**</span><span class="token punctuation">(</span>dict1 <span class="token operator">|</span> dict2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-通过-dict-构造器动态合并" tabindex="-1"><a class="header-anchor" href="#_4-通过-dict-构造器动态合并" aria-hidden="true">#</a> 4. <strong>通过 <code>dict</code> 构造器动态合并</strong></h3><p>在低版本的 Python 中，可以用 <code>dict</code> 构造器和 <code>**</code> 解包的方式组合：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
dict2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span>

combined_kwargs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">**</span>dict1<span class="token punctuation">,</span> <span class="token operator">**</span>dict2<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>combined_kwargs<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>输出：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>无论你使用 <code>update()</code>、字典解包、<code>|</code> 合并，还是动态更新参数，都可以灵活地组合 <code>**kwargs</code>。推荐根据你的 Python 版本和具体场景选择合适的方式。</p>`,34),c=[p];function o(i,l){return s(),a("div",null,c)}const d=n(t,[["render",o],["__file","python-dict.html.vue"]]);export{d as default};
