import{_ as n,Y as s,Z as a,a2 as t}from"./framework-301d0703.js";const e={},o=t(`<h1 id="python-async-await-与多线程如何结合使用" tabindex="-1"><a class="header-anchor" href="#python-async-await-与多线程如何结合使用" aria-hidden="true">#</a> python async await 与多线程如何结合使用</h1><p>在 Python 中，<code>async</code>/<code>await</code>（基于 <code>asyncio</code>）和多线程（<code>threading</code> 模块）是两种不同的并发模型。<code>asyncio</code> 提供了协程式的并发，适用于 I/O 密集型任务，而多线程则适用于需要真正并行处理的场景，如处理 CPU 密集型任务或调用阻塞的 I/O 操作。</p><p>有时，我们可能需要将 <code>asyncio</code> 与多线程结合使用，以充分利用两者的优势。下面将详细介绍如何在 Python 中将 <code>async</code>/<code>await</code> 与多线程结合使用，并提供相应的代码示例。</p><hr><h2 id="一、为什么要将-asyncio-与多线程结合" tabindex="-1"><a class="header-anchor" href="#一、为什么要将-asyncio-与多线程结合" aria-hidden="true">#</a> <strong>一、为什么要将 <code>asyncio</code> 与多线程结合</strong></h2><ul><li><strong>处理阻塞的 I/O 操作</strong>：在异步代码中，如果需要调用阻塞的 I/O 操作（如文件读写、网络请求等），可以使用多线程将其封装，避免阻塞事件循环。</li><li><strong>利用多核 CPU</strong>：由于全局解释器锁（GIL）的存在，Python 的多线程不能并行执行 CPU 密集型任务。但在 I/O 密集型任务中，多线程仍然有用。</li><li><strong>与现有代码库集成</strong>：在已有的多线程代码中引入异步操作，或者在异步代码中使用需要多线程的库。</li></ul><hr><h2 id="二、主要的结合方式" tabindex="-1"><a class="header-anchor" href="#二、主要的结合方式" aria-hidden="true">#</a> <strong>二、主要的结合方式</strong></h2><ol><li><strong>在异步代码中使用线程池</strong>：使用 <code>asyncio</code> 提供的 <code>run_in_executor()</code> 方法，在异步协程中运行阻塞的函数，将其放入线程池执行。</li><li><strong>在多线程中运行事件循环</strong>：在单独的线程中运行 <code>asyncio</code> 的事件循环，以便同时运行异步任务和其他线程任务。</li><li><strong>跨线程通信</strong>：使用线程安全的队列（如 <code>queue.Queue</code> 或 <code>asyncio.Queue</code>）在协程和线程之间传递数据。</li></ol><hr><h2 id="三、在异步代码中使用线程池" tabindex="-1"><a class="header-anchor" href="#三、在异步代码中使用线程池" aria-hidden="true">#</a> <strong>三、在异步代码中使用线程池</strong></h2><h3 id="_3-1-使用-run-in-executor" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-run-in-executor" aria-hidden="true">#</a> <strong>3.1 使用 <code>run_in_executor</code></strong></h3><p><code>asyncio</code> 提供了 <code>run_in_executor()</code> 方法，可以在协程中运行阻塞的函数，将其委派给线程池或进程池，以避免阻塞事件循环。</p><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> <strong>示例</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor

<span class="token keyword">def</span> <span class="token function">blocking_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;开始阻塞的 I/O 操作，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;阻塞的 I/O 操作完成，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;主协程运行在线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment"># 使用默认的线程池执行器</span>
    <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> blocking_io<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;任务完成&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出" tabindex="-1"><a class="header-anchor" href="#输出" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>主协程运行在线程：MainThread
开始阻塞的 I/O 操作，线程：ThreadPoolExecutor-0_0
阻塞的 I/O 操作完成，线程：ThreadPoolExecutor-0_0
任务完成
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解释" tabindex="-1"><a class="header-anchor" href="#解释" aria-hidden="true">#</a> <strong>解释</strong></h4><ul><li><strong><code>blocking_io</code></strong>：一个阻塞的函数，模拟耗时的 I/O 操作。</li><li><strong><code>loop.run_in_executor()</code></strong>： <ul><li>第一个参数为 <code>None</code>，表示使用默认的线程池执行器。</li><li>第二个参数是需要执行的阻塞函数。</li></ul></li><li><strong>在协程中等待阻塞函数完成</strong>：使用 <code>await</code>，但不会阻塞事件循环。</li></ul><h3 id="_3-2-使用自定义线程池" tabindex="-1"><a class="header-anchor" href="#_3-2-使用自定义线程池" aria-hidden="true">#</a> <strong>3.2 使用自定义线程池</strong></h3><p>您也可以创建自定义的线程池执行器，以控制线程的数量。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>executor<span class="token punctuation">,</span> blocking_io<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、在多线程中运行事件循环" tabindex="-1"><a class="header-anchor" href="#四、在多线程中运行事件循环" aria-hidden="true">#</a> <strong>四、在多线程中运行事件循环</strong></h2><p>在某些情况下，您可能需要在一个单独的线程中运行 <code>asyncio</code> 事件循环，以便在主线程中执行其他操作。</p><h3 id="_4-1-示例" tabindex="-1"><a class="header-anchor" href="#_4-1-示例" aria-hidden="true">#</a> <strong>4.1 示例</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;异步任务开始，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;异步任务完成，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">start_event_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 设置事件循环为当前线程的事件循环</span>
    asyncio<span class="token punctuation">.</span>set_event_loop<span class="token punctuation">(</span>loop<span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建新的事件循环</span>
    new_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>new_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 在新的线程中启动事件循环</span>
    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>start_event_loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>new_loop<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 在事件循环中添加任务</span>
    asyncio<span class="token punctuation">.</span>run_coroutine_threadsafe<span class="token punctuation">(</span>async_task<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_loop<span class="token punctuation">)</span>

    <span class="token comment"># 主线程继续执行其他操作</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;主线程继续运行，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment"># 等待一段时间后关闭事件循环</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    new_loop<span class="token punctuation">.</span>call_soon_threadsafe<span class="token punctuation">(</span>new_loop<span class="token punctuation">.</span>stop<span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出-1" tabindex="-1"><a class="header-anchor" href="#输出-1" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>主线程继续运行，线程：MainThread
异步任务开始，线程：Thread-1
异步任务完成，线程：Thread-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解释-1" tabindex="-1"><a class="header-anchor" href="#解释-1" aria-hidden="true">#</a> <strong>解释</strong></h4><ul><li><strong><code>async_task</code></strong>：一个简单的异步任务。</li><li><strong><code>start_event_loop</code></strong>：在新的线程中运行事件循环。</li><li><strong><code>asyncio.run_coroutine_threadsafe()</code></strong>：在线程安全的情况下，将协程提交到事件循环中。</li><li><strong><code>new_loop.call_soon_threadsafe(new_loop.stop)</code></strong>：线程安全地停止事件循环。</li></ul><h3 id="_4-2-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-2-注意事项" aria-hidden="true">#</a> <strong>4.2 注意事项</strong></h3><ul><li><strong>事件循环与线程绑定</strong>：每个线程只能有一个事件循环，事件循环也只能在创建它的线程中运行。</li><li><strong>线程安全</strong>：使用 <code>asyncio.run_coroutine_threadsafe()</code> 和 <code>call_soon_threadsafe()</code> 来在线程间通信。</li></ul><hr><h2 id="五、跨线程通信" tabindex="-1"><a class="header-anchor" href="#五、跨线程通信" aria-hidden="true">#</a> <strong>五、跨线程通信</strong></h2><p>在协程和线程之间传递数据，可以使用线程安全的队列。</p><h3 id="_5-1-使用-queue-queue" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-queue-queue" aria-hidden="true">#</a> <strong>5.1 使用 <code>queue.Queue</code></strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> queue

<span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;生产者：放入数据 </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span>get<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;消费者：获取数据 </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>consumer<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出-2" tabindex="-1"><a class="header-anchor" href="#输出-2" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>生产者：放入数据 0
消费者：获取数据 0
生产者：放入数据 1
消费者：获取数据 1
生产者：放入数据 2
消费者：获取数据 2
生产者：放入数据 3
消费者：获取数据 3
生产者：放入数据 4
消费者：获取数据 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-使用-asyncio-queue" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-asyncio-queue" aria-hidden="true">#</a> <strong>5.2 使用 <code>asyncio.Queue</code></strong></h3><p>如果所有代码都是异步的，或者可以在线程中使用异步队列，也可以使用 <code>asyncio.Queue</code>。</p><hr><h2 id="六、在协程中运行线程代码" tabindex="-1"><a class="header-anchor" href="#六、在协程中运行线程代码" aria-hidden="true">#</a> <strong>六、在协程中运行线程代码</strong></h2><p>有时，您可能需要在协程中启动新的线程来处理某些任务。</p><h3 id="_6-1-示例" tabindex="-1"><a class="header-anchor" href="#_6-1-示例" aria-hidden="true">#</a> <strong>6.1 示例</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading

<span class="token keyword">def</span> <span class="token function">blocking_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;阻塞任务开始，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;阻塞任务完成，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 在协程中启动新的线程</span>
    <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> blocking_task<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;协程中的线程任务已完成&quot;</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解释-2" tabindex="-1"><a class="header-anchor" href="#解释-2" aria-hidden="true">#</a> <strong>解释</strong></h4><ul><li><strong><code>loop.run_in_executor()</code></strong>：在协程中运行线程任务，避免阻塞事件循环。</li><li><strong>协程等待线程任务完成</strong>：使用 <code>await</code> 等待线程中的任务完成。</li></ul><hr><h2 id="七、综合示例" tabindex="-1"><a class="header-anchor" href="#七、综合示例" aria-hidden="true">#</a> <strong>七、综合示例</strong></h2><p>下面是一个综合示例，演示如何在异步代码中使用线程池，以及在线程中运行事件循环，并进行跨线程通信。</p><h3 id="_7-1-示例代码" tabindex="-1"><a class="header-anchor" href="#_7-1-示例代码" aria-hidden="true">#</a> <strong>7.1 示例代码</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">import</span> queue

<span class="token comment"># 线程安全的队列</span>
q <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 阻塞的 I/O 操作</span>
<span class="token keyword">def</span> <span class="token function">blocking_io_task</span><span class="token punctuation">(</span>task_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;线程 </span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">：开始阻塞 I/O 任务 </span><span class="token interpolation"><span class="token punctuation">{</span>task_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;结果 </span><span class="token interpolation"><span class="token punctuation">{</span>task_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;线程 </span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">：完成阻塞 I/O 任务 </span><span class="token interpolation"><span class="token punctuation">{</span>task_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 异步任务，从队列中获取结果</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span>get<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;协程接收到：</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token string">&quot;结果 2&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>

<span class="token comment"># 在单独的线程中运行事件循环</span>
<span class="token keyword">def</span> <span class="token function">start_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>set_event_loop<span class="token punctuation">(</span>loop<span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建新的事件循环</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>new_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>start_loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 启动异步任务</span>
    asyncio<span class="token punctuation">.</span>run_coroutine_threadsafe<span class="token punctuation">(</span>async_task<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>

    <span class="token comment"># 在主线程中使用线程池执行阻塞任务</span>
    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>blocking_io_task<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

    <span class="token comment"># 等待所有任务完成</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token comment"># 停止事件循环</span>
    loop<span class="token punctuation">.</span>call_soon_threadsafe<span class="token punctuation">(</span>loop<span class="token punctuation">.</span>stop<span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出-3" tabindex="-1"><a class="header-anchor" href="#输出-3" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>线程 ThreadPoolExecutor-0_0：开始阻塞 I/O 任务 0
线程 ThreadPoolExecutor-0_1：开始阻塞 I/O 任务 1
线程 ThreadPoolExecutor-0_2：开始阻塞 I/O 任务 2
协程接收到：结果 0
线程 ThreadPoolExecutor-0_0：完成阻塞 I/O 任务 0
协程接收到：结果 1
线程 ThreadPoolExecutor-0_1：完成阻塞 I/O 任务 1
协程接收到：结果 2
线程 ThreadPoolExecutor-0_2：完成阻塞 I/O 任务 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="八、注意事项" tabindex="-1"><a class="header-anchor" href="#八、注意事项" aria-hidden="true">#</a> <strong>八、注意事项</strong></h2><ol><li><strong>GIL（全局解释器锁）</strong>：在 Python 中，多线程不能真正并行执行 CPU 密集型任务，因为 GIL 的存在。但对于 I/O 密集型任务，多线程仍然有效。</li><li><strong>事件循环线程安全</strong>：<code>asyncio</code> 的事件循环和协程不是线程安全的，除非使用线程安全的方法（如 <code>run_coroutine_threadsafe</code>、<code>call_soon_threadsafe</code>）。</li><li><strong>避免死锁</strong>：在跨线程通信时，需要注意线程间的同步，避免死锁和竞争条件。</li><li><strong>资源管理</strong>：确保在线程和事件循环结束时，正确地关闭和清理资源。</li></ol><hr><h2 id="九、总结" tabindex="-1"><a class="header-anchor" href="#九、总结" aria-hidden="true">#</a> <strong>九、总结</strong></h2><ul><li><strong><code>asyncio</code> 与多线程结合使用</strong>：可以在异步代码中利用线程来处理阻塞的任务，或在多线程环境中运行异步事件循环。</li><li><strong>线程池执行器</strong>：使用 <code>run_in_executor()</code> 方法，在协程中运行阻塞的函数，避免阻塞事件循环。</li><li><strong>在线程中运行事件循环</strong>：当需要并行运行多个事件循环或与现有的线程代码集成时，可以在新的线程中运行事件循环。</li><li><strong>跨线程通信</strong>：使用线程安全的队列或其他同步原语，在线程和协程之间传递数据。</li></ul><p>通过合理地将 <code>asyncio</code> 与多线程结合使用，您可以充分利用两种并发模型的优势，提高程序的性能和响应能力。</p><hr><p>如果您还有其他问题或需要进一步的帮助，请随时提问！在 Python 中，<code>async</code>/<code>await</code>（基于 <code>asyncio</code>）和多线程（<code>threading</code> 模块）是两种不同的并发模型。<code>asyncio</code> 提供了协程式的并发，适用于 I/O 密集型任务，而多线程则适用于需要真正并行处理的场景，如处理 CPU 密集型任务或调用阻塞的 I/O 操作。</p><p>有时，我们可能需要将 <code>asyncio</code> 与多线程结合使用，以充分利用两者的优势。下面将详细介绍如何在 Python 中将 <code>async</code>/<code>await</code> 与多线程结合使用，并提供相应的代码示例。</p><hr><h2 id="一、为什么要将-asyncio-与多线程结合-1" tabindex="-1"><a class="header-anchor" href="#一、为什么要将-asyncio-与多线程结合-1" aria-hidden="true">#</a> <strong>一、为什么要将 <code>asyncio</code> 与多线程结合</strong></h2><ul><li><strong>处理阻塞的 I/O 操作</strong>：在异步代码中，如果需要调用阻塞的 I/O 操作（如文件读写、网络请求等），可以使用多线程将其封装，避免阻塞事件循环。</li><li><strong>利用多核 CPU</strong>：由于全局解释器锁（GIL）的存在，Python 的多线程不能并行执行 CPU 密集型任务。但在 I/O 密集型任务中，多线程仍然有用。</li><li><strong>与现有代码库集成</strong>：在已有的多线程代码中引入异步操作，或者在异步代码中使用需要多线程的库。</li></ul><hr><h2 id="二、主要的结合方式-1" tabindex="-1"><a class="header-anchor" href="#二、主要的结合方式-1" aria-hidden="true">#</a> <strong>二、主要的结合方式</strong></h2><ol><li><strong>在异步代码中使用线程池</strong>：使用 <code>asyncio</code> 提供的 <code>run_in_executor()</code> 方法，在异步协程中运行阻塞的函数，将其放入线程池执行。</li><li><strong>在多线程中运行事件循环</strong>：在单独的线程中运行 <code>asyncio</code> 的事件循环，以便同时运行异步任务和其他线程任务。</li><li><strong>跨线程通信</strong>：使用线程安全的队列（如 <code>queue.Queue</code> 或 <code>asyncio.Queue</code>）在协程和线程之间传递数据。</li></ol><hr><h2 id="三、在异步代码中使用线程池-1" tabindex="-1"><a class="header-anchor" href="#三、在异步代码中使用线程池-1" aria-hidden="true">#</a> <strong>三、在异步代码中使用线程池</strong></h2><h3 id="_3-1-使用-run-in-executor-1" tabindex="-1"><a class="header-anchor" href="#_3-1-使用-run-in-executor-1" aria-hidden="true">#</a> <strong>3.1 使用 <code>run_in_executor</code></strong></h3><p><code>asyncio</code> 提供了 <code>run_in_executor()</code> 方法，可以在协程中运行阻塞的函数，将其委派给线程池或进程池，以避免阻塞事件循环。</p><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> <strong>示例</strong></h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> time
<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor

<span class="token keyword">def</span> <span class="token function">blocking_io</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;开始阻塞的 I/O 操作，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;阻塞的 I/O 操作完成，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;主协程运行在线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment"># 使用默认的线程池执行器</span>
    <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> blocking_io<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;任务完成&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出-4" tabindex="-1"><a class="header-anchor" href="#输出-4" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>主协程运行在线程：MainThread
开始阻塞的 I/O 操作，线程：ThreadPoolExecutor-0_0
阻塞的 I/O 操作完成，线程：ThreadPoolExecutor-0_0
任务完成
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解释-3" tabindex="-1"><a class="header-anchor" href="#解释-3" aria-hidden="true">#</a> <strong>解释</strong></h4><ul><li><strong><code>blocking_io</code></strong>：一个阻塞的函数，模拟耗时的 I/O 操作。</li><li><strong><code>loop.run_in_executor()</code></strong>： <ul><li>第一个参数为 <code>None</code>，表示使用默认的线程池执行器。</li><li>第二个参数是需要执行的阻塞函数。</li></ul></li><li><strong>在协程中等待阻塞函数完成</strong>：使用 <code>await</code>，但不会阻塞事件循环。</li></ul><h3 id="_3-2-使用自定义线程池-1" tabindex="-1"><a class="header-anchor" href="#_3-2-使用自定义线程池-1" aria-hidden="true">#</a> <strong>3.2 使用自定义线程池</strong></h3><p>您也可以创建自定义的线程池执行器，以控制线程的数量。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>executor <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>executor<span class="token punctuation">,</span> blocking_io<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="四、在多线程中运行事件循环-1" tabindex="-1"><a class="header-anchor" href="#四、在多线程中运行事件循环-1" aria-hidden="true">#</a> <strong>四、在多线程中运行事件循环</strong></h2><p>在某些情况下，您可能需要在一个单独的线程中运行 <code>asyncio</code> 事件循环，以便在主线程中执行其他操作。</p><h3 id="_4-1-示例-1" tabindex="-1"><a class="header-anchor" href="#_4-1-示例-1" aria-hidden="true">#</a> <strong>4.1 示例</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;异步任务开始，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;异步任务完成，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">start_event_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 设置事件循环为当前线程的事件循环</span>
    asyncio<span class="token punctuation">.</span>set_event_loop<span class="token punctuation">(</span>loop<span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建新的事件循环</span>
    new_loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>new_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 在新的线程中启动事件循环</span>
    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>start_event_loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>new_loop<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 在事件循环中添加任务</span>
    asyncio<span class="token punctuation">.</span>run_coroutine_threadsafe<span class="token punctuation">(</span>async_task<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new_loop<span class="token punctuation">)</span>

    <span class="token comment"># 主线程继续执行其他操作</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;主线程继续运行，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment"># 等待一段时间后关闭事件循环</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    new_loop<span class="token punctuation">.</span>call_soon_threadsafe<span class="token punctuation">(</span>new_loop<span class="token punctuation">.</span>stop<span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出-5" tabindex="-1"><a class="header-anchor" href="#输出-5" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>主线程继续运行，线程：MainThread
异步任务开始，线程：Thread-1
异步任务完成，线程：Thread-1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解释-4" tabindex="-1"><a class="header-anchor" href="#解释-4" aria-hidden="true">#</a> <strong>解释</strong></h4><ul><li><strong><code>async_task</code></strong>：一个简单的异步任务。</li><li><strong><code>start_event_loop</code></strong>：在新的线程中运行事件循环。</li><li><strong><code>asyncio.run_coroutine_threadsafe()</code></strong>：在线程安全的情况下，将协程提交到事件循环中。</li><li><strong><code>new_loop.call_soon_threadsafe(new_loop.stop)</code></strong>：线程安全地停止事件循环。</li></ul><h3 id="_4-2-注意事项-1" tabindex="-1"><a class="header-anchor" href="#_4-2-注意事项-1" aria-hidden="true">#</a> <strong>4.2 注意事项</strong></h3><ul><li><strong>事件循环与线程绑定</strong>：每个线程只能有一个事件循环，事件循环也只能在创建它的线程中运行。</li><li><strong>线程安全</strong>：使用 <code>asyncio.run_coroutine_threadsafe()</code> 和 <code>call_soon_threadsafe()</code> 来在线程间通信。</li></ul><hr><h2 id="五、跨线程通信-1" tabindex="-1"><a class="header-anchor" href="#五、跨线程通信-1" aria-hidden="true">#</a> <strong>五、跨线程通信</strong></h2><p>在协程和线程之间传递数据，可以使用线程安全的队列。</p><h3 id="_5-1-使用-queue-queue-1" tabindex="-1"><a class="header-anchor" href="#_5-1-使用-queue-queue-1" aria-hidden="true">#</a> <strong>5.1 使用 <code>queue.Queue</code></strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> queue

<span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;生产者：放入数据 </span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span>get<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;消费者：获取数据 </span><span class="token interpolation"><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>consumer<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出-6" tabindex="-1"><a class="header-anchor" href="#输出-6" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>生产者：放入数据 0
消费者：获取数据 0
生产者：放入数据 1
消费者：获取数据 1
生产者：放入数据 2
消费者：获取数据 2
生产者：放入数据 3
消费者：获取数据 3
生产者：放入数据 4
消费者：获取数据 4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-使用-asyncio-queue-1" tabindex="-1"><a class="header-anchor" href="#_5-2-使用-asyncio-queue-1" aria-hidden="true">#</a> <strong>5.2 使用 <code>asyncio.Queue</code></strong></h3><p>如果所有代码都是异步的，或者可以在线程中使用异步队列，也可以使用 <code>asyncio.Queue</code>。</p><hr><h2 id="六、在协程中运行线程代码-1" tabindex="-1"><a class="header-anchor" href="#六、在协程中运行线程代码-1" aria-hidden="true">#</a> <strong>六、在协程中运行线程代码</strong></h2><p>有时，您可能需要在协程中启动新的线程来处理某些任务。</p><h3 id="_6-1-示例-1" tabindex="-1"><a class="header-anchor" href="#_6-1-示例-1" aria-hidden="true">#</a> <strong>6.1 示例</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading

<span class="token keyword">def</span> <span class="token function">blocking_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;阻塞任务开始，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;阻塞任务完成，线程：</span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_running_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 在协程中启动新的线程</span>
    <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> blocking_task<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;协程中的线程任务已完成&quot;</span><span class="token punctuation">)</span>

asyncio<span class="token punctuation">.</span>run<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解释-5" tabindex="-1"><a class="header-anchor" href="#解释-5" aria-hidden="true">#</a> <strong>解释</strong></h4><ul><li><strong><code>loop.run_in_executor()</code></strong>：在协程中运行线程任务，避免阻塞事件循环。</li><li><strong>协程等待线程任务完成</strong>：使用 <code>await</code> 等待线程中的任务完成。</li></ul><hr><h2 id="七、综合示例-1" tabindex="-1"><a class="header-anchor" href="#七、综合示例-1" aria-hidden="true">#</a> <strong>七、综合示例</strong></h2><p>下面是一个综合示例，演示如何在异步代码中使用线程池，以及在线程中运行事件循环，并进行跨线程通信。</p><h3 id="_7-1-示例代码-1" tabindex="-1"><a class="header-anchor" href="#_7-1-示例代码-1" aria-hidden="true">#</a> <strong>7.1 示例代码</strong></h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">import</span> queue

<span class="token comment"># 线程安全的队列</span>
q <span class="token operator">=</span> queue<span class="token punctuation">.</span>Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 阻塞的 I/O 操作</span>
<span class="token keyword">def</span> <span class="token function">blocking_io_task</span><span class="token punctuation">(</span>task_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;线程 </span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">：开始阻塞 I/O 任务 </span><span class="token interpolation"><span class="token punctuation">{</span>task_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&quot;结果 </span><span class="token interpolation"><span class="token punctuation">{</span>task_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;线程 </span><span class="token interpolation"><span class="token punctuation">{</span>threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">：完成阻塞 I/O 任务 </span><span class="token interpolation"><span class="token punctuation">{</span>task_id<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token comment"># 异步任务，从队列中获取结果</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span>get<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;协程接收到：</span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> result <span class="token operator">==</span> <span class="token string">&quot;结果 2&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">break</span>

<span class="token comment"># 在单独的线程中运行事件循环</span>
<span class="token keyword">def</span> <span class="token function">start_loop</span><span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">:</span>
    asyncio<span class="token punctuation">.</span>set_event_loop<span class="token punctuation">(</span>loop<span class="token punctuation">)</span>
    loop<span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    <span class="token comment"># 创建新的事件循环</span>
    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>new_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
    t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>start_loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># 启动异步任务</span>
    asyncio<span class="token punctuation">.</span>run_coroutine_threadsafe<span class="token punctuation">(</span>async_task<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loop<span class="token punctuation">)</span>

    <span class="token comment"># 在主线程中使用线程池执行阻塞任务</span>
    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>blocking_io_task<span class="token punctuation">,</span> i<span class="token punctuation">)</span>

    <span class="token comment"># 等待所有任务完成</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    <span class="token comment"># 停止事件循环</span>
    loop<span class="token punctuation">.</span>call_soon_threadsafe<span class="token punctuation">(</span>loop<span class="token punctuation">.</span>stop<span class="token punctuation">)</span>
    t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输出-7" tabindex="-1"><a class="header-anchor" href="#输出-7" aria-hidden="true">#</a> <strong>输出</strong></h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>线程 ThreadPoolExecutor-0_0：开始阻塞 I/O 任务 0
线程 ThreadPoolExecutor-0_1：开始阻塞 I/O 任务 1
线程 ThreadPoolExecutor-0_2：开始阻塞 I/O 任务 2
协程接收到：结果 0
线程 ThreadPoolExecutor-0_0：完成阻塞 I/O 任务 0
协程接收到：结果 1
线程 ThreadPoolExecutor-0_1：完成阻塞 I/O 任务 1
协程接收到：结果 2
线程 ThreadPoolExecutor-0_2：完成阻塞 I/O 任务 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="八、注意事项-1" tabindex="-1"><a class="header-anchor" href="#八、注意事项-1" aria-hidden="true">#</a> <strong>八、注意事项</strong></h2><ol><li><strong>GIL（全局解释器锁）</strong>：在 Python 中，多线程不能真正并行执行 CPU 密集型任务，因为 GIL 的存在。但对于 I/O 密集型任务，多线程仍然有效。</li><li><strong>事件循环线程安全</strong>：<code>asyncio</code> 的事件循环和协程不是线程安全的，除非使用线程安全的方法（如 <code>run_coroutine_threadsafe</code>、<code>call_soon_threadsafe</code>）。</li><li><strong>避免死锁</strong>：在跨线程通信时，需要注意线程间的同步，避免死锁和竞争条件。</li><li><strong>资源管理</strong>：确保在线程和事件循环结束时，正确地关闭和清理资源。</li></ol><hr><h2 id="九、总结-1" tabindex="-1"><a class="header-anchor" href="#九、总结-1" aria-hidden="true">#</a> <strong>九、总结</strong></h2><ul><li><strong><code>asyncio</code> 与多线程结合使用</strong>：可以在异步代码中利用线程来处理阻塞的任务，或在多线程环境中运行异步事件循环。</li><li><strong>线程池执行器</strong>：使用 <code>run_in_executor()</code> 方法，在协程中运行阻塞的函数，避免阻塞事件循环。</li><li><strong>在线程中运行事件循环</strong>：当需要并行运行多个事件循环或与现有的线程代码集成时，可以在新的线程中运行事件循环。</li><li><strong>跨线程通信</strong>：使用线程安全的队列或其他同步原语，在线程和协程之间传递数据。</li></ul><p>通过合理地将 <code>asyncio</code> 与多线程结合使用，您可以充分利用两种并发模型的优势，提高程序的性能和响应能力。</p><hr><p>如果您还有其他问题或需要进一步的帮助，请随时提问！</p>`,128),p=[o];function i(c,l){return s(),a("div",null,p)}const r=n(e,[["render",i],["__file","python-async-await-threading.html.vue"]]);export{r as default};
