import{_ as e,Y as n,Z as t,a2 as s}from"./framework-301d0703.js";const a={},o=s(`<h1 id="what-the-different-self-and-self-in-rust" tabindex="-1"><a class="header-anchor" href="#what-the-different-self-and-self-in-rust" aria-hidden="true">#</a> What the different self and Self in Rust</h1><p>In Rust, <code>self</code> and <code>Self</code> have distinct meanings and are used in different contexts:</p><ol><li><p><strong><code>self</code></strong>:</p><ul><li><strong>Usage</strong>: <code>self</code> is used as the first parameter of an instance method of a struct or enum. It represents the instance of the struct or enum on which the method is called.</li><li><strong>Variants</strong>: It has three forms: <ul><li><code>self</code> - Used when the method consumes the struct (takes ownership).</li><li><code>&amp;self</code> - Used when the method only needs a reference to the struct, without taking ownership.</li><li><code>&amp;mut self</code> - Used when the method needs a mutable reference to the struct.</li></ul></li><li><strong>Example</strong>: In a method definition like <code>fn do_something(&amp;self)</code>, <code>self</code> refers to the instance of the struct.</li></ul></li><li><p><strong><code>Self</code></strong>:</p><ul><li><strong>Usage</strong>: <code>Self</code> (note the capital &#39;S&#39;) is an alias for the type of the current trait or impl block.</li><li><strong>Context</strong>: It&#39;s typically used in trait definitions and their impl blocks. In a trait, <code>Self</code> refers to the type that implements the trait. In an impl block, <code>Self</code> refers to the type that the block is implementing traits for or adding methods to.</li><li><strong>Example</strong>: In a trait definition like <code>trait Example { fn clone(&amp;self) -&gt; Self; }</code>, <code>Self</code> refers to the type that implements the <code>Example</code> trait.</li></ul></li></ol><h3 id="example-to-illustrate-the-difference" tabindex="-1"><a class="header-anchor" href="#example-to-illustrate-the-difference" aria-hidden="true">#</a> Example to Illustrate the Difference:</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">struct</span> <span class="token type-definition class-name">MyStruct</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">MyStruct</span> <span class="token punctuation">{</span>
    <span class="token comment">// Here, self refers to the instance of MyStruct</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">instance_method</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Called on an instance of MyStruct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Here, Self refers to the MyStruct type itself</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyStruct</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example:</p><ul><li><code>&amp;self</code> in <code>instance_method</code> refers to the instance of <code>MyStruct</code>.</li><li><code>Self</code> in <code>new</code> is used as a type name, referring to <code>MyStruct</code>. It&#39;s a way to avoid repeating the type name <code>MyStruct</code>.</li></ul>`,7),i=[o];function l(c,r){return n(),t("div",null,i)}const p=e(a,[["render",l],["__file","what-the-different-self-and-Self-in-Rust.html.vue"]]);export{p as default};
