import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as r,f as e,o as i}from"./app-r7nLzS4z.js";const o={};function a(n,t){return i(),r("div",null,t[0]||(t[0]=[e('<h1 id="graph" tabindex="-1"><a class="header-anchor" href="#graph"><span>Graph</span></a></h1><p>在计算机科学中，图（Graph）是一种非常重要的数据结构，用于表示对象（称为<strong>节点</strong>或<strong>顶点</strong>）之间的关系。这些对象通过边（Edges）连接。图被广泛应用于各种领域，如社交网络、地理信息系统、网络路由、数据库优化等。</p><h3 id="图的基本概念" tabindex="-1"><a class="header-anchor" href="#图的基本概念"><span>图的基本概念</span></a></h3><ol><li><p><strong>顶点（Vertex）</strong>：</p><ul><li>图中的一个节点或点。</li></ul></li><li><p><strong>边（Edge）</strong>：</p><ul><li>连接两个顶点的线，可以是有向的（显示从一个顶点到另一个顶点的方向）或无向的（没有方向性）。</li></ul></li><li><p><strong>权重（Weight）</strong>：</p><ul><li>边上的权重表示两个顶点之间连接的“成本”。不是所有的图都有权重。</li></ul></li><li><p><strong>路径</strong>：</p><ul><li>顶点序列，其中每对相邻的顶点都由图中的边连接。</li></ul></li><li><p><strong>环（Cycle）</strong>：</p><ul><li>如果图中的路径起点和终点相同，则该路径称为环。</li></ul></li></ol><h3 id="图的类型" tabindex="-1"><a class="header-anchor" href="#图的类型"><span>图的类型</span></a></h3><ol><li><p><strong>无向图（Undirected Graph）</strong>：</p><ul><li>边没有方向。如果顶点 A 与顶点 B 相连，则顶点 B 也与顶点 A 相连。</li></ul></li><li><p><strong>有向图（Directed Graph or Digraph）</strong>：</p><ul><li>边有明确的方向。如果顶点 A 指向顶点 B，则顶点 B 不一定指向顶点 A。</li></ul></li><li><p><strong>加权图（Weighted Graph）</strong>：</p><ul><li>图中的边赋有权重或成本。</li></ul></li><li><p><strong>无权图（Unweighted Graph）</strong>：</p><ul><li>图中的边没有权重。</li></ul></li><li><p><strong>连通图和非连通图</strong>：</p><ul><li>在无向图中，如果从任意一个顶点都可以访问到任何其他顶点，则图是连通的。在有向图中，如果对每个顶点都是如此，则称为强连通图。</li></ul></li></ol><h3 id="图的表示" tabindex="-1"><a class="header-anchor" href="#图的表示"><span>图的表示</span></a></h3><ol><li><p><strong>邻接矩阵（Adjacency Matrix）</strong>：</p><ul><li>使用二维数组来表示图。矩阵的行表示起始顶点，列表示终点顶点。值表示是否存在从行顶点到列顶点的边。</li></ul></li><li><p><strong>邻接表（Adjacency List）</strong>：</p><ul><li>使用数组或列表的列表来表示图。每个顶点都有一个列表，包含它可以直接到达的其他顶点。</li></ul></li></ol><h3 id="图的算法" tabindex="-1"><a class="header-anchor" href="#图的算法"><span>图的算法</span></a></h3><ol><li><p><strong>搜索算法</strong>：</p><ul><li><strong>深度优先搜索（DFS）</strong>：通过尽可能深地搜索图的分支，探索每一个分支的可能性。</li><li><strong>广度优先搜索（BFS）</strong>：按层次顺序从起点开始探索图，先访问所有邻近的顶点。</li></ul></li><li><p><strong>最短路径算法</strong>：</p><ul><li><strong>Dijkstra算法</strong>：找到图中一个顶点到其他所有顶点的最短路径。</li><li><strong>Bellman-Ford算法</strong>：在带有负权边的图中找到最短路径。</li><li><strong>Floyd-Warshall算法</strong>：计算所有顶点对的最短路径。</li></ul></li><li><p><strong>最小生成树（MST）</strong>：</p><ul><li><strong>Kruskal算法</strong>：通过找到权重最小的边来构建最小生成树。</li><li><strong>Prim算法</strong>：从一个顶点开始构建最小生成树，逐步增加最小权重的边。</li></ul></li></ol><p>图是一种非常强大的数据结构，能够模拟复杂的关系网和网络结构。掌握图的基本理论和算法对于解决许多实际问题都至关重要。</p>',11)]))}const h=l(o,[["render",a],["__file","algorithms-graph.html.vue"]]),g=JSON.parse('{"path":"/learn-leetcode/algorithms-graph.html","title":"Graph","lang":"zh-CN","frontmatter":{"description":"Graph 在计算机科学中，图（Graph）是一种非常重要的数据结构，用于表示对象（称为节点或顶点）之间的关系。这些对象通过边（Edges）连接。图被广泛应用于各种领域，如社交网络、地理信息系统、网络路由、数据库优化等。 图的基本概念 顶点（Vertex）： 图中的一个节点或点。 边（Edge）： 连接两个顶点的线，可以是有向的（显示从一个顶点到另一个...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/learn-leetcode/algorithms-graph.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"Graph"}],["meta",{"property":"og:description","content":"Graph 在计算机科学中，图（Graph）是一种非常重要的数据结构，用于表示对象（称为节点或顶点）之间的关系。这些对象通过边（Edges）连接。图被广泛应用于各种领域，如社交网络、地理信息系统、网络路由、数据库优化等。 图的基本概念 顶点（Vertex）： 图中的一个节点或点。 边（Edge）： 连接两个顶点的线，可以是有向的（显示从一个顶点到另一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Graph\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1724494195000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":2,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":2.45,"words":735},"filePathRelative":"learn-leetcode/algorithms-graph.md","localizedDate":"2024年8月24日","excerpt":"","autoDesc":true}');export{h as comp,g as data};
