import{_ as n,Y as s,Z as a,a2 as t}from"./framework-301d0703.js";const o={},p=t(`<h1 id="产生式的定义" tabindex="-1"><a class="header-anchor" href="#产生式的定义" aria-hidden="true">#</a> 产生式的定义</h1><p>在形式语言和编译原理中，**产生式（Production）**是文法的基本组成部分，用于描述非终结符如何展开为终结符和非终结符的序列。一个产生式通常表示为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A → α
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>A</code> 是一个非终结符（Non-terminal symbol）。</li><li><code>α</code> 是终结符和非终结符的序列（可以是空串 ε）。</li></ul><p>产生式集合 <code>P</code> 包含了所有的产生式，定义了文法的所有规则。</p><h2 id="具体解释你的产生式集合-p" tabindex="-1"><a class="header-anchor" href="#具体解释你的产生式集合-p" aria-hidden="true">#</a> 具体解释你的产生式集合 P</h2><p>你给出的产生式集合 P 如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>P = {
    E  → E + T,
    E  → T,
    T  → T * F,
    T  → F,
    F  → ( E ),
    F  → id
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文法定义了一种简单的算术表达式，包括加法、乘法、括号和标识符。下面逐一解释这些产生式：</p><ol><li><p><strong><code>E → E + T</code></strong></p><ul><li><strong>说明</strong>：表达式 <code>E</code> 可以由一个表达式 <code>E</code>、加号 <code>+</code>、和一个项 <code>T</code> 组成。</li><li><strong>含义</strong>：这是定义加法的递归规则，表示一个表达式可以是两个子表达式的和。</li></ul></li><li><p><strong><code>E → T</code></strong></p><ul><li><strong>说明</strong>：表达式 <code>E</code> 可以简化为一个项 <code>T</code>。</li><li><strong>含义</strong>：这是递归的终止条件，表示一个表达式也可以是一个项。</li></ul></li><li><p><strong><code>T → T * F</code></strong></p><ul><li><strong>说明</strong>：项 <code>T</code> 可以由一个项 <code>T</code>、乘号 <code>*</code>、和一个因子 <code>F</code> 组成。</li><li><strong>含义</strong>：这是定义乘法的递归规则，表示一个项可以是两个子项的积。</li></ul></li><li><p><strong><code>T → F</code></strong></p><ul><li><strong>说明</strong>：项 <code>T</code> 可以简化为一个因子 <code>F</code>。</li><li><strong>含义</strong>：这是递归的终止条件，表示一个项也可以是一个因子。</li></ul></li><li><p><strong><code>F → ( E )</code></strong></p><ul><li><strong>说明</strong>：因子 <code>F</code> 可以是一个被括号包围的表达式 <code>E</code>。</li><li><strong>含义</strong>：允许在表达式中使用括号来改变运算的优先级。</li></ul></li><li><p><strong><code>F → id</code></strong></p><ul><li><strong>说明</strong>：因子 <code>F</code> 可以是一个标识符 <code>id</code>。</li><li><strong>含义</strong>：表示最基本的元素，例如变量或常量。</li></ul></li></ol><h2 id="产生式的形式定义" tabindex="-1"><a class="header-anchor" href="#产生式的形式定义" aria-hidden="true">#</a> 产生式的形式定义</h2><p>一般来说，产生式可以由以下部分组成：</p><ul><li><strong>左部（Left-hand side，LHS）</strong>：一个单一的非终结符。</li><li><strong>右部（Right-hand side，RHS）</strong>：一个符号串，可以包含终结符和非终结符，也可以是空串（ε）。</li></ul><p>产生式的形式化定义：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>对于文法 G = (N, Σ, P, S)，P 是产生式的集合，其中每个产生式是一个形如 A → α 的规则，A ∈ N，α ∈ (N ∪ Σ)*。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>N</code>：非终结符的集合。</li><li><code>Σ</code>：终结符的集合。</li><li><code>P</code>：产生式的集合。</li><li><code>S</code>：开始符号。</li></ul><h2 id="在代码中如何定义产生式" tabindex="-1"><a class="header-anchor" href="#在代码中如何定义产生式" aria-hidden="true">#</a> 在代码中如何定义产生式</h2><p>在编写解析器或编译器时，需要在代码中表示产生式，以便程序能够处理和分析文法规则。在前面的 C++ 示例中，使用了一个结构体来表示产生式。</p><h3 id="c-中的产生式定义" tabindex="-1"><a class="header-anchor" href="#c-中的产生式定义" aria-hidden="true">#</a> C++ 中的产生式定义</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 产生式结构体</span>
<span class="token keyword">struct</span> <span class="token class-name">Production</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string left<span class="token punctuation">;</span>                <span class="token comment">// 左部（非终结符）</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> right<span class="token punctuation">;</span>  <span class="token comment">// 右部（符号串，可以包含终结符和非终结符）</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>left</code>：表示产生式的左部，即非终结符。</li><li><code>right</code>：表示产生式的右部，是一个字符串向量，包含了右部的符号序列。</li></ul><h3 id="添加产生式的方法" tabindex="-1"><a class="header-anchor" href="#添加产生式的方法" aria-hidden="true">#</a> 添加产生式的方法</h3><p>在文法类中，可以定义一个方法来添加产生式。例如：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Grammar</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token comment">// 产生式集合</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Production<span class="token operator">&gt;</span> productions<span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式的方法</span>
    <span class="token keyword">void</span> <span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> left<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个新的产生式</span>
        Production prod <span class="token operator">=</span> <span class="token punctuation">{</span>left<span class="token punctuation">,</span> right<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 将产生式添加到集合中</span>
        productions<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>prod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例-将你的产生式集合-p-加入代码" tabindex="-1"><a class="header-anchor" href="#示例-将你的产生式集合-p-加入代码" aria-hidden="true">#</a> 示例：将你的产生式集合 P 加入代码</h3><p>以下是如何在代码中添加你给出的产生式集合 P：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Grammar grammar<span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式 E → E + T</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;T&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式 E → T</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式 T → T * F</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式 T → F</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式 F → ( E )</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式 F → id</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 其他代码...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释添加过程" tabindex="-1"><a class="header-anchor" href="#解释添加过程" aria-hidden="true">#</a> 解释添加过程</h3><ul><li>对于每个产生式，调用 <code>addProduction</code> 方法，传入左部和右部。</li><li>右部是一个字符串向量，按照产生式右部的符号顺序添加。</li></ul><h2 id="完整的代码示例" tabindex="-1"><a class="header-anchor" href="#完整的代码示例" aria-hidden="true">#</a> 完整的代码示例</h2><p>下面是一个完整的代码片段，展示如何定义产生式并将它们添加到文法中。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">struct</span> <span class="token class-name">Production</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>string left<span class="token punctuation">;</span>                <span class="token comment">// 左部</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span> right<span class="token punctuation">;</span>  <span class="token comment">// 右部</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Grammar</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Production<span class="token operator">&gt;</span> productions<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> left<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Production prod <span class="token operator">=</span> <span class="token punctuation">{</span>left<span class="token punctuation">,</span> right<span class="token punctuation">}</span><span class="token punctuation">;</span>
        productions<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>prod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">printProductions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> prod <span class="token operator">:</span> productions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> prod<span class="token punctuation">.</span>left <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; → &quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">:</span> prod<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> symbol <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Grammar grammar<span class="token punctuation">;</span>

    <span class="token comment">// 添加产生式集合 P</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;T&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 打印产生式集合</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;产生式集合 P：&quot;</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">printProductions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行结果" tabindex="-1"><a class="header-anchor" href="#运行结果" aria-hidden="true">#</a> 运行结果</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>产生式集合 P：
E → E + T
E → T
T → T * F
T → F
F → ( E )
F → id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><strong>产生式</strong>是文法的基本组成部分，定义了非终结符如何展开为符号串。</li><li>在代码中，可以使用结构体或类来表示产生式，包括左部和右部。</li><li>通过遍历产生式集合，可以对文法进行分析，例如构建 FIRST 集、项目集等。</li><li>理解产生式的定义和表示方式，对于实现解析器和编译器至关重要。</li></ul><p>如果你对产生式的定义或如何在代码中表示产生式还有疑问，欢迎继续提问！</p>`,38),e=[p];function c(i,l){return s(),a("div",null,e)}const d=n(o,[["render",c],["__file","lr1-产生式是如何定义的.html.vue"]]);export{d as default};
