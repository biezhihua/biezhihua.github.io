import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as n,f as a,o as l}from"./app-D8AnVMyo.js";const e={};function p(t,s){return l(),n("div",null,s[0]||(s[0]=[a(`<h1 id="汇编语言" tabindex="-1"><a class="header-anchor" href="#汇编语言"><span>汇编语言</span></a></h1><h2 id="_0-8086cpu常用debug命令" tabindex="-1"><a class="header-anchor" href="#_0-8086cpu常用debug命令"><span>0. 8086CPU常用debug命令</span></a></h2><p>在学习和调试 <strong>8086CPU</strong> 程序时，通常使用 <strong>DEBUG 工具</strong>（DOS 自带调试程序），可以通过命令直接与程序进行交互。以下是 DEBUG 中常用的一些命令及其解释：</p><hr><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span><strong>常用命令</strong></span></a></h3><h4 id="_1-r-register-显示-修改寄存器" tabindex="-1"><a class="header-anchor" href="#_1-r-register-显示-修改寄存器"><span>1. <strong>R（Register 显示/修改寄存器）</strong></span></a></h4><ul><li><strong>功能</strong>：显示或修改 CPU 寄存器的内容。</li><li><strong>用法</strong>： <ul><li>输入 <code>R</code>：显示所有寄存器的当前内容及标志位。</li><li>输入 <code>R 寄存器名</code>：修改指定寄存器的值。例如，<code>R AX</code> 修改 AX 寄存器。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- R</span></span>
<span class="line"><span>AX=0000  BX=0000  CX=0000  DX=0000  SP=0000  BP=0000  SI=0000  DI=0000</span></span>
<span class="line"><span>DS=1234  ES=1234  SS=1234  CS=1234  IP=0100  NV UP EI PL NZ NA PO NC</span></span>
<span class="line"><span>- R AX</span></span>
<span class="line"><span>AX 0000</span></span>
<span class="line"><span>:1234 （输入新的值）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="_2-d-dump-显示内存内容" tabindex="-1"><a class="header-anchor" href="#_2-d-dump-显示内存内容"><span>2. <strong>D（Dump 显示内存内容）</strong></span></a></h4><ul><li><strong>功能</strong>：以十六进制形式查看内存内容。</li><li><strong>用法</strong>： <ul><li>输入 <code>D</code>：显示当前段的内存内容。</li><li>输入 <code>D 地址</code>：显示指定地址开始的内容。</li><li>输入 <code>D 地址范围</code>：显示特定内存范围内容（例如 <code>D 1000:0000 1000:0010</code>）。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- D 1000:0000</span></span>
<span class="line"><span>1000:0000  4D 5A 90 00 03 00 00 00-04 00 00 00 FF FF 00 00  MZ..............</span></span>
<span class="line"><span>1000:0010  B8 00 00 8E D8 8E C0 BF-00 00 B9 00 01 F3 A5 E9  ................</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="_3-e-enter-修改内存内容" tabindex="-1"><a class="header-anchor" href="#_3-e-enter-修改内存内容"><span>3. <strong>E（Enter 修改内存内容）</strong></span></a></h4><ul><li><strong>功能</strong>：修改指定内存地址的内容。</li><li><strong>用法</strong>： <ul><li>输入 <code>E 地址</code>：从指定地址开始修改内容。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- E 1000:0000</span></span>
<span class="line"><span>1000:0000  4D. 41 （输入新的值，按回车确认）</span></span>
<span class="line"><span>1000:0001  5A. 53</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="_4-u-unassemble-反汇编指令" tabindex="-1"><a class="header-anchor" href="#_4-u-unassemble-反汇编指令"><span>4. <strong>U（Unassemble 反汇编指令）</strong></span></a></h4><ul><li><strong>功能</strong>：将内存中的机器码转换为对应的汇编指令。</li><li><strong>用法</strong>： <ul><li>输入 <code>U</code>：从当前 CS:IP 开始反汇编。</li><li>输入 <code>U 地址</code>：从指定地址开始反汇编。</li><li>输入 <code>U 地址范围</code>：反汇编特定范围的内容。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- U 1000:0000</span></span>
<span class="line"><span>1000:0000 B80000      MOV AX,0000</span></span>
<span class="line"><span>1000:0003 8ED8        MOV DS,AX</span></span>
<span class="line"><span>1000:0005 8EC0        MOV ES,AX</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="_5-t-trace-单步执行指令" tabindex="-1"><a class="header-anchor" href="#_5-t-trace-单步执行指令"><span>5. <strong>T（Trace 单步执行指令）</strong></span></a></h4><ul><li><strong>功能</strong>：单步执行一条指令，并显示当前 CPU 状态。</li><li><strong>用法</strong>： <ul><li>输入 <code>T</code>：执行当前指令（CS:IP 指向的指令），并显示寄存器和下一条指令。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- T</span></span>
<span class="line"><span>AX=0000  BX=0000  CX=0000  DX=0000  SP=0000  BP=0000  SI=0000  DI=0000</span></span>
<span class="line"><span>DS=1000  ES=1000  SS=1000  CS=1000  IP=0003  NV UP EI PL NZ NA PO NC</span></span>
<span class="line"><span>1000:0003 8ED8        MOV DS,AX</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="_6-g-go-连续运行程序" tabindex="-1"><a class="header-anchor" href="#_6-g-go-连续运行程序"><span>6. <strong>G（Go 连续运行程序）</strong></span></a></h4><ul><li><strong>功能</strong>：让程序从某个地址连续运行，直到遇到断点或程序结束。</li><li><strong>用法</strong>： <ul><li>输入 <code>G</code>：从当前 CS:IP 开始运行。</li><li>输入 <code>G 地址</code>：从指定地址开始运行。</li><li>输入 <code>G 地址范围</code>：运行到指定地址范围的断点。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- G 1000:0100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="_7-a-assemble-汇编指令" tabindex="-1"><a class="header-anchor" href="#_7-a-assemble-汇编指令"><span>7. <strong>A（Assemble 汇编指令）</strong></span></a></h4><ul><li><strong>功能</strong>：直接在内存中输入汇编指令。</li><li><strong>用法</strong>： <ul><li>输入 <code>A 地址</code>：从指定地址开始写入汇编代码。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- A 1000:0000</span></span>
<span class="line"><span>1000:0000 MOV AX,1234</span></span>
<span class="line"><span>1000:0003 MOV DS,AX</span></span>
<span class="line"><span>1000:0005 INT 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h4 id="_8-f-fill-填充内存" tabindex="-1"><a class="header-anchor" href="#_8-f-fill-填充内存"><span>8. <strong>F（Fill 填充内存）</strong></span></a></h4><ul><li><strong>功能</strong>：在指定的内存范围内填充某个字节值。</li><li><strong>用法</strong>： <ul><li>输入 <code>F 地址范围 值</code>：将范围内的每个字节填充为指定值。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- F 1000:0000 1000:00FF 90</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="_9-p-proceed-执行过程" tabindex="-1"><a class="header-anchor" href="#_9-p-proceed-执行过程"><span>9. <strong>P（Proceed 执行过程）</strong></span></a></h4><ul><li><strong>功能</strong>：类似 <code>T</code>（单步执行），但跳过 CALL 指令，不进入子程序。</li><li><strong>用法</strong>： <ul><li>输入 <code>P</code>：从当前 CS:IP 开始执行一步。</li></ul></li></ul><hr><h4 id="_10-q-quit-退出-debug" tabindex="-1"><a class="header-anchor" href="#_10-q-quit-退出-debug"><span>10. <strong>Q（Quit 退出 DEBUG）</strong></span></a></h4><ul><li><strong>功能</strong>：退出 DEBUG 工具。</li></ul><hr><h4 id="_11-n-name-加载文件名" tabindex="-1"><a class="header-anchor" href="#_11-n-name-加载文件名"><span>11. <strong>N（Name 加载文件名）</strong></span></a></h4><ul><li><strong>功能</strong>：指定加载的文件名。</li><li><strong>用法</strong>： <ul><li>输入 <code>N 文件名</code>：将文件名载入 DEBUG。</li></ul></li><li><strong>示例</strong>：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>- N TEST.COM</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><hr><h4 id="_12-l-load-加载文件" tabindex="-1"><a class="header-anchor" href="#_12-l-load-加载文件"><span>12. <strong>L（Load 加载文件）</strong></span></a></h4><ul><li><strong>功能</strong>：将文件加载到内存。</li><li><strong>用法</strong>： <ul><li>输入 <code>L</code>：加载当前文件到内存。</li><li>输入 <code>L 地址</code>：将文件加载到指定地址。</li></ul></li></ul><hr><h4 id="_13-w-write-写回文件" tabindex="-1"><a class="header-anchor" href="#_13-w-write-写回文件"><span>13. <strong>W（Write 写回文件）</strong></span></a></h4><ul><li><strong>功能</strong>：将修改后的内存数据写回文件。</li><li><strong>用法</strong>： <ul><li>输入 <code>W</code>：将修改的内容保存到文件中。</li></ul></li></ul><hr><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h3><p>8086 调试中最常用的 DEBUG 命令包括：</p><ol><li><code>R</code>：查看/修改寄存器。</li><li><code>D</code>：查看内存。</li><li><code>E</code>：修改内存。</li><li><code>U</code>：反汇编。</li><li><code>T</code>：单步执行。</li><li><code>G</code>：连续运行。</li><li><code>A</code>：手动汇编代码。</li></ol><p>通过这些命令，可以方便地分析、调试和运行 8086 汇编程序。</p><h2 id="_0-8086cpu常用寄存器" tabindex="-1"><a class="header-anchor" href="#_0-8086cpu常用寄存器"><span>0. 8086CPU常用寄存器</span></a></h2><p>8086 CPU 中的常用寄存器主要分为以下几类，每类寄存器都有其特定的用途：</p><h3 id="_1-数据寄存器" tabindex="-1"><a class="header-anchor" href="#_1-数据寄存器"><span><strong>1. 数据寄存器</strong></span></a></h3><p>用于存储和操作数据。它们可以作为 16 位寄存器使用，也可以拆分为两个 8 位寄存器（高位和低位）。</p><ul><li><p><strong>AX（累加器寄存器）</strong></p><ul><li>高位：AH</li><li>低位：AL</li><li>用于算术运算、逻辑运算以及 I/O 操作，很多指令默认使用 AX。</li></ul></li><li><p><strong>BX（基址寄存器）</strong></p><ul><li>高位：BH</li><li>低位：BL</li><li>常用于存储数据地址。</li></ul></li><li><p><strong>CX（计数器寄存器）</strong></p><ul><li>高位：CH</li><li>低位：CL</li><li>用于循环和移位操作的计数。</li></ul></li><li><p><strong>DX（数据寄存器）</strong></p><ul><li>高位：DH</li><li>低位：DL</li><li>用于存储数据，有时用于 I/O 操作中的端口地址。</li></ul></li></ul><hr><h3 id="_2-指针和索引寄存器" tabindex="-1"><a class="header-anchor" href="#_2-指针和索引寄存器"><span><strong>2. 指针和索引寄存器</strong></span></a></h3><p>这些寄存器用于地址计算和数据操作。</p><ul><li><p><strong>SP（堆栈指针寄存器）</strong><br> 指向当前栈顶。—</p></li><li><p><strong>BP（基址指针寄存器）</strong><br> 通常用于访问堆栈中的参数或局部变量。</p></li><li><p><strong>SI（源变址寄存器）</strong><br> 常用于字符串操作，指向源地址。</p></li><li><p><strong>DI（目的变址寄存器）</strong><br> 常用于字符串操作，指向目标地址。</p></li></ul><hr><h3 id="_3-段寄存器" tabindex="-1"><a class="header-anchor" href="#_3-段寄存器"><span><strong>3. 段寄存器</strong></span></a></h3><p>8086 CPU 采用段式内存管理，每个段寄存器存储一个段的起始地址。</p><ul><li><p><strong>CS（代码段寄存器）</strong><br> 指向当前正在执行代码的段。</p></li><li><p><strong>DS（数据段寄存器）</strong><br> 指向当前使用的数据段。</p></li><li><p><strong>SS（堆栈段寄存器）</strong><br> 指向当前堆栈的段。</p></li><li><p><strong>ES（附加段寄存器）</strong><br> 在字符串操作中用作目标段。</p></li></ul><hr><h3 id="_4-标志寄存器-flags" tabindex="-1"><a class="header-anchor" href="#_4-标志寄存器-flags"><span><strong>4. 标志寄存器（FLAGS）</strong></span></a></h3><p>用于存储运算结果的状态信息，以及控制 CPU 的某些操作。</p><ul><li>常用标志位： <ul><li><strong>ZF（零标志）</strong>：结果是否为零。</li><li><strong>SF（符号标志）</strong>：结果是否为负。</li><li><strong>CF（进位标志）</strong>：是否产生进位或借位。</li><li><strong>OF（溢出标志）</strong>：是否产生算术溢出。</li><li><strong>PF（奇偶标志）</strong>：结果中1的个数是否为偶数。</li><li><strong>AF（辅助进位标志）</strong>：用于 BCD（十进制）运算。</li></ul></li></ul><hr><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1"><span><strong>总结</strong></span></a></h3><ul><li>数据寄存器：AX、BX、CX、DX</li><li>指针和索引寄存器：SP、BP、SI、DI</li><li>段寄存器：CS、DS、SS、ES</li><li>标志寄存器：FLAGS</li></ul><p>这些寄存器的灵活组合使 8086 CPU 能够高效地完成复杂的运算和内存操作。</p><h2 id="_1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-基础知识"><span>1. 基础知识</span></a></h2><h3 id="_1-1-机器语言" tabindex="-1"><a class="header-anchor" href="#_1-1-机器语言"><span>1.1 机器语言</span></a></h3><p>机器语言是机器指令的集合。</p><p>机器指令是一列二进制数字。</p><p>计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，进行运算。</p><p>CPU Central Procesing Unit</p><p>每种CPU硬件设计和内部结构不同，需要不同的电平脉冲来控制。</p><p>每一种CPU都有自己的机器指令集，也就是机器语言。</p><h3 id="_1-2-汇编语言的产生" tabindex="-1"><a class="header-anchor" href="#_1-2-汇编语言的产生"><span>1.2 汇编语言的产生</span></a></h3><p>汇编语言的主体是汇编指令。</p><p>汇编指令是机器指令便于记忆的书写格式。</p><p>寄存器，CPU中可以存储数据的器件。 AX/BX等是寄存器代号。</p><p>将汇编指令转换成机器指令的翻译程序，称为编译器。</p><h3 id="_1-3-汇编语言的组成" tabindex="-1"><a class="header-anchor" href="#_1-3-汇编语言的组成"><span>1.3 汇编语言的组成</span></a></h3><h3 id="_1-4-存储器" tabindex="-1"><a class="header-anchor" href="#_1-4-存储器"><span>1.4 存储器</span></a></h3><p>CPU和内存搭配使用。</p><p>想让一个CPU工作，必须向他提供指令和数据。指令和数据在存储器中存放，也就是内存。</p><h3 id="_1-5-指令和数据" tabindex="-1"><a class="header-anchor" href="#_1-5-指令和数据"><span>1.5 指令和数据</span></a></h3><p>指令和数据在内存中无区别，都是二进制数据，仅仅是应用上的概念。</p><h3 id="_1-6-存储单元" tabindex="-1"><a class="header-anchor" href="#_1-6-存储单元"><span>1.6 存储单元</span></a></h3><p>[0|1]=1b(bit) 8bit=1B(Byte) 1024B=1KB 1024KB=1MB 1024MB=1GB</p><blockquote><p>Your conversions are mostly correct, except that the first one, <code>[0|1] = 1b(bit)</code>, might need clarification. Let’s rewrite it step by step:</p><ol><li><strong>A bit (<code>b</code>)</strong> is the smallest unit of data in computing, and it can be either <code>0</code> or <code>1</code>.</li><li><strong>8 bits = 1 Byte (<code>B</code>)</strong></li><li><strong>1024 Bytes = 1 Kilobyte (<code>KB</code>)</strong></li><li><strong>1024 Kilobytes = 1 Megabyte (<code>MB</code>)</strong></li><li><strong>1024 Megabytes = 1 Gigabyte (<code>GB</code>)</strong></li></ol><p>This hierarchy is based on binary prefixes, which are commonly used in computer science for data storage and memory. Let me know if you want further &gt; explanation or examples!</p></blockquote><h3 id="_1-7-cpu对存储器的读写" tabindex="-1"><a class="header-anchor" href="#_1-7-cpu对存储器的读写"><span>1.7 CPU对存储器的读写</span></a></h3><p>CPU读写数据需要进行信息交互：</p><ul><li>地址信息，存储单元的地址</li><li>控制信息，器件的选择，读或写的命令</li><li>数据信息，读或写的数据</li></ul><p>计算机使用导线传输电信号。</p><p>CPU连接其他芯片的导线，称为总线，物理上，总线是一根根导线的集合。</p><p>总线从逻辑上分为三类：地址总线、控制总线、数据总线。</p><p>使用汇编指令来命令CPU进行数据读写，例如：move ax,[3]</p><h3 id="_1-8-地址总线" tabindex="-1"><a class="header-anchor" href="#_1-8-地址总线"><span>1.8 地址总线</span></a></h3><p>一根导线可传送的稳定状态只有两种，高电平和低电平，用二进制表示就是1或者0。10根导线可以表示2的10次方个数，0~1023。</p><p>寻址范围和导线数量有关系。</p><blockquote><p><code>00 0000 0000</code></p></blockquote><h3 id="_1-9-数据总线" tabindex="-1"><a class="header-anchor" href="#_1-9-数据总线"><span>1.9 数据总线</span></a></h3><p>数据总线的宽度界定了CPU和外界的数据传输速度。 8根总线一次可以传送一个8位二进制数据。</p><h3 id="_1-10-控制总线" tabindex="-1"><a class="header-anchor" href="#_1-10-控制总线"><span>1.10 控制总线</span></a></h3><p>CPU对外部器件的控制是通过控制总线进行的。总线的宽度决定了CPU对外部器件的控制能力。</p><h3 id="_1-1-1-10-小结" tabindex="-1"><a class="header-anchor" href="#_1-1-1-10-小结"><span>1.1~1.10 小结</span></a></h3><p>CPU芯片有很多管脚，管脚与总线相连。3种总线的宽度标志了CPU不同方面的性能。</p><ul><li>地址总线的宽度决定了CPU的寻址能力。</li><li>数据总线的宽度决定了CPU与其他器件进行数据传输时的一次数据传送量。</li><li>控制总线的宽度决定了CPU对系统中其他器件的控制能力。</li></ul><h3 id="_1-11-内存地址空间" tabindex="-1"><a class="header-anchor" href="#_1-11-内存地址空间"><span>1.11 内存地址空间</span></a></h3><h3 id="_1-12-主板" tabindex="-1"><a class="header-anchor" href="#_1-12-主板"><span>1.12 主板</span></a></h3><p>主板上有核心器件和一些主要器件，通过总线相连。</p><p>CPU、存储器、外围芯片组、扩展插槽。扩展插槽上一般有RAM内存条和各类接口卡。</p><h3 id="_1-13-接口卡" tabindex="-1"><a class="header-anchor" href="#_1-13-接口卡"><span>1.13 接口卡</span></a></h3><p>CPU通过控制接口卡，实现CPU对外设设备得间接控制。</p><h3 id="_1-14-各类存储芯片" tabindex="-1"><a class="header-anchor" href="#_1-14-各类存储芯片"><span>1.14 各类存储芯片</span></a></h3><p>读写属性上分为：随机存储器RAM和只读存储器ROM。</p><ul><li>随机存储器RAM，存储程序和数据。主存储器由主板RAM和扩展插槽RAM组成。</li><li>装有BIOS（Basic Input/Output System）的ROM。 <ul><li>BIOS是主板和各类接口卡（显卡、网卡）厂商提供的软件系统，通过他利用该设备进行输入输出。</li><li>主板上的ROM中存储着主板的BIOS（系统BIOS）</li><li>显卡上的ROM存储着显卡的BIOS。</li></ul></li><li>接口卡上的RAM。 <ul><li>显卡RAM，显存。</li></ul></li></ul><p>RAM主存储器和扩展插槽的RAM主存储器，有什么区别?</p><blockquote><p><strong>RAM 主存储器</strong> 和 <strong>扩展插槽的 RAM 主存储器</strong> 都是计算机的随机存取存储器，但它们在物理位置、容量扩展能力以及应用场景上有所区别。以下是详细对比：</p><hr><h3 id="_1-主存储器的定义" tabindex="-1"><a class="header-anchor" href="#_1-主存储器的定义"><span><strong>1. 主存储器的定义：</strong></span></a></h3><ul><li><p><strong>RAM 主存储器（内置主存储器）：</strong></p><ul><li>是计算机主板上预装或焊接的 RAM。</li><li>通常是系统默认配置，容量和性能可能固定。</li><li>直接作为系统内存使用，存储操作系统和程序运行时所需的临时数据。</li></ul></li><li><p><strong>扩展插槽的 RAM 主存储器：</strong></p><ul><li>是通过主板上的 <strong>内存插槽（DIMM 或 SO-DIMM 插槽）</strong> 插入的模块化 RAM。</li><li>用户可以根据需要购买和安装更多的 RAM 模块来扩展容量。</li><li>常用于增加系统性能或满足运行更大程序的需求。</li></ul></li></ul><hr><h3 id="_2-主要区别" tabindex="-1"><a class="header-anchor" href="#_2-主要区别"><span><strong>2. 主要区别：</strong></span></a></h3><table><thead><tr><th>特性</th><th>主存储器（内置）</th><th>扩展插槽的 RAM 主存储器</th></tr></thead><tbody><tr><td><strong>物理位置</strong></td><td>焊接在主板上，无法更换或移除</td><td>插入主板内存插槽，可插拔更换</td></tr><tr><td><strong>容量</strong></td><td>通常较小，固定不变</td><td>可根据主板支持的插槽和容量上限扩展</td></tr><tr><td><strong>性能</strong></td><td>性能固定，取决于制造时的规格</td><td>性能由用户选择的内存条决定</td></tr><tr><td><strong>可扩展性</strong></td><td>无法扩展，取决于出厂配置</td><td>灵活扩展，可添加或升级更多内存</td></tr><tr><td><strong>维护成本</strong></td><td>出现问题需要更换主板</td><td>单独更换受损的 RAM 模块即可</td></tr></tbody></table><hr><h3 id="_3-实际应用场景" tabindex="-1"><a class="header-anchor" href="#_3-实际应用场景"><span><strong>3. 实际应用场景：</strong></span></a></h3><ul><li><p><strong>主存储器（内置）</strong>：</p><ul><li>典型于轻薄笔记本电脑（如 MacBook Air），内部内存直接焊接在主板上。</li><li>优点是节省空间，提高稳定性；缺点是用户无法自行升级或更换。</li></ul></li><li><p><strong>扩展插槽的 RAM 主存储器</strong>：</p><ul><li>常见于台式机和高性能笔记本（如游戏本），支持用户根据需求升级内存。</li><li>适用于需要更高性能或更大容量的场景。</li></ul></li></ul><hr><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span><strong>4. 总结：</strong></span></a></h3><ul><li><strong>主存储器（内置）</strong> 更加集成化，适合追求轻便设计的设备，但限制了用户的扩展能力。</li><li><strong>扩展插槽的 RAM 主存储器</strong> 提供灵活性，适合台式机和高性能设备，能随需求增长而升级。</li></ul><p>两者的选择通常取决于设备的设计目标以及用户的使用需求。</p></blockquote><p>RAM和ROM?</p><blockquote><p><strong>ROM</strong> 是 <strong>Read-Only Memory</strong> 的缩写，中文称为“只读存储器”。在计算机中，ROM 是一种不可随意修改的数据存储设备，主要用于存储不会频繁更改的数据，通常是一些固件&gt; （firmware）或程序代码。以下是详细解释：</p><hr><h3 id="rom的特点" tabindex="-1"><a class="header-anchor" href="#rom的特点"><span><strong>ROM的特点：</strong></span></a></h3><ol><li><strong>只读</strong>：ROM 中存储的数据只能读取，通常不能被用户或程序写入或修改（某些类型的 ROM 如 EEPROM 支持有限的重写）。</li><li><strong>非易失性</strong>：即使断电，存储在 ROM 中的数据也不会丢失。</li><li><strong>高速存取</strong>：ROM 的读取速度通常比硬盘快，适合存放启动程序和系统级数据。</li></ol><hr><h3 id="在计算机中-rom-的作用" tabindex="-1"><a class="header-anchor" href="#在计算机中-rom-的作用"><span><strong>在计算机中，ROM 的作用：</strong></span></a></h3><ol><li><strong>固件存储</strong>：存储不可修改或极少更改的固件，例如 BIOS 或 UEFI 程序，用于引导计算机启动。</li><li><strong>嵌入式设备</strong>：存储嵌入式系统中的程序代码（例如微控制器、路由器、电视等设备）。</li><li><strong>永久数据</strong>：存放在设备出厂时就写入的、用户不能直接更改的数据，比如游戏机的内置游戏。</li></ol><hr><h3 id="rom-的类型" tabindex="-1"><a class="header-anchor" href="#rom-的类型"><span><strong>ROM 的类型：</strong></span></a></h3><ol><li><strong>Mask ROM</strong>：在制造过程中永久写入数据，无法更改。</li><li><strong>PROM</strong>（Programmable ROM）：一次性可编程存储器，用户可用专门设备写入数据，但只能写一次。</li><li><strong>EPROM</strong>（Erasable Programmable ROM）：可擦除和重新编程，需要紫外线擦除。</li><li><strong>EEPROM</strong>（Electrically Erasable Programmable ROM）：可用电信号擦除并重新编程，广泛应用于现代设备。</li><li><strong>Flash ROM</strong>：一种特殊的 EEPROM，可快速擦写，广泛用于 U 盘、固态硬盘等。</li></ol><hr><p>ROM 在现代计算机中仍然是不可或缺的一部分，尤其是在存储启动数据和不可更改的程序中起着重要作用。</p></blockquote><h3 id="_1-15-内存地址空间" tabindex="-1"><a class="header-anchor" href="#_1-15-内存地址空间"><span>1.15 内存地址空间</span></a></h3><p>所有物理存储器（RAM和ROM）被看做一个由若干存储单元组成的逻辑存储器，每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间。</p><p>内存地址空间的大小受CPU地址总线宽度的限制。</p><p>现在主流PC和Phone的地址总线宽度为多少，内存地址空间是多少？</p><blockquote><p>现代主流 PC 和手机的地址总线宽度和内存地址空间如下：</p><hr><h3 id="_1-主流-pc-的地址总线宽度和内存地址空间" tabindex="-1"><a class="header-anchor" href="#_1-主流-pc-的地址总线宽度和内存地址空间"><span><strong>1. 主流 PC 的地址总线宽度和内存地址空间</strong></span></a></h3><ul><li><p><strong>地址总线宽度：</strong></p><ul><li>大多数主流 PC 使用 64 位处理器，因此地址总线宽度为 <strong>64 位</strong>。</li><li>但由于实际硬件限制，目前消费级处理器通常支持 <strong>48 位物理地址总线</strong>，虚拟地址可以达到 64 位（理论值）。</li></ul></li><li><p><strong>内存地址空间：</strong></p><ul><li>理论上，64 位地址总线的内存地址空间为 ( 2^{64} ) 字节，即 <strong>16 EB（ExaBytes）</strong>。</li><li>但现代消费级处理器实际支持的物理地址范围通常是 ( 2^{48} ) 字节，即 <strong>256 TB（TeraBytes）</strong>。</li><li>实际支持的内存容量受主板和芯片组限制，通常为几百 GB（例如 128 GB 或 512 GB）。</li></ul></li></ul><hr><h3 id="_2-主流手机的地址总线宽度和内存地址空间" tabindex="-1"><a class="header-anchor" href="#_2-主流手机的地址总线宽度和内存地址空间"><span><strong>2. 主流手机的地址总线宽度和内存地址空间</strong></span></a></h3><ul><li><p><strong>地址总线宽度：</strong></p><ul><li>手机处理器（例如 ARM 架构处理器）也采用 64 位架构，地址总线理论上支持 <strong>64 位</strong>。</li><li>实际的物理地址宽度通常为 <strong>32 位或 36 位</strong>，高端设备可能达到 <strong>40 位</strong>。</li></ul></li><li><p><strong>内存地址空间：</strong></p><ul><li>理论上，64 位地址总线支持的地址空间为 <strong>16 EB</strong>，但实际硬件实现的物理地址范围小得多。</li><li>32 位地址总线的地址空间为 ( 2^{32} ) 字节，即 <strong>4 GB</strong>。</li><li>36 位地址总线支持 <strong>64 GB</strong>，40 位支持 <strong>1 TB</strong>。</li></ul><p>当前主流高端手机的内存容量一般在 <strong>8 GB 到 16 GB</strong> 范围内，部分旗舰机型支持更高。</p></li></ul><hr><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2"><span><strong>总结：</strong></span></a></h3><table><thead><tr><th><strong>设备</strong></th><th><strong>地址总线宽度</strong></th><th><strong>理论内存地址空间</strong></th><th><strong>实际支持范围</strong></th></tr></thead><tbody><tr><td>主流 PC</td><td>64 位（48 位物理）</td><td>16 EB（256 TB 物理）</td><td>通常为 128 GB 至 1 TB</td></tr><tr><td>主流手机</td><td>64 位（32-40 位物理）</td><td>16 EB（1 TB 物理）</td><td>通常为 8 GB 至 16 GB</td></tr></tbody></table><p>实际内存地址空间受限于硬件实现和操作系统支持，例如操作系统的内存管理能力及芯片组的设计规格。</p></blockquote><h2 id="_2-寄存器" tabindex="-1"><a class="header-anchor" href="#_2-寄存器"><span>2. 寄存器</span></a></h2><p>内部总线实现CPU内部各个器件之间的联系，外部总线实现CPU和主板上其他器件的联系。</p><ul><li>运算器，信息处理</li><li>寄存器，信息存储</li><li>控制器，控制各个器件工作</li><li>内部总线，数据传送</li></ul><p>CPU内部由哪些器件组成？</p><blockquote><p>CPU（中央处理单元）的内部由多种器件组成，它们共同负责执行计算机的基本运算和控制功能。以下是 CPU 的主要组成部分及其功能：</p><hr><h3 id="_1-核心部分" tabindex="-1"><a class="header-anchor" href="#_1-核心部分"><span><strong>1. 核心部分</strong></span></a></h3><ol><li><p><strong>算术逻辑单元（ALU, Arithmetic Logic Unit）</strong>：</p><ul><li>用于执行基本的算术运算（如加减乘除）和逻辑运算（如与、或、非、异或）。</li><li>是 CPU 的运算核心，处理大部分指令中的数学和逻辑任务。</li></ul></li><li><p><strong>控制单元（CU, Control Unit）</strong>：</p><ul><li>负责指挥 CPU 的各个部分如何协同工作。</li><li>解释并执行指令，从内存中获取指令，解码，并控制数据流的方向。</li></ul></li><li><p><strong>寄存器（Registers）</strong>：</p><ul><li>高速的存储单元，用于暂存数据和指令。</li><li>包括： <ul><li><strong>通用寄存器</strong>：存储临时数据或操作数。</li><li><strong>专用寄存器</strong>：如程序计数器（PC）、指令寄存器（IR）、状态寄存器（SR）等。</li></ul></li></ul></li></ol><hr><h3 id="_2-缓存-cache" tabindex="-1"><a class="header-anchor" href="#_2-缓存-cache"><span><strong>2. 缓存（Cache）</strong></span></a></h3><ul><li>位于 CPU 内部或极其接近，用于存储常用的数据和指令，减少对主存的访问。</li><li>分为多级： <ul><li><strong>L1 缓存</strong>（一级缓存）：速度最快，容量最小。</li><li><strong>L2 缓存</strong>（二级缓存）：容量更大，速度略慢。</li><li><strong>L3 缓存</strong>（三级缓存）：仅存在于高端 CPU，容量更大，用于共享多个核心的数据。</li></ul></li></ul><hr><h3 id="_3-时钟与控制逻辑" tabindex="-1"><a class="header-anchor" href="#_3-时钟与控制逻辑"><span><strong>3. 时钟与控制逻辑</strong></span></a></h3><ol><li><p><strong>时钟生成器（Clock Generator）</strong>：</p><ul><li>提供统一的时钟信号，确保 CPU 各部分同步工作。</li><li>CPU 的性能（主频）由时钟信号的频率决定。</li></ul></li><li><p><strong>指令解码器（Instruction Decoder）</strong>：</p><ul><li>将从内存中取出的机器指令翻译为 CPU 能够执行的微操作。</li></ul></li></ol><hr><h3 id="_4-总线接口-bus-interface-unit-biu" tabindex="-1"><a class="header-anchor" href="#_4-总线接口-bus-interface-unit-biu"><span><strong>4. 总线接口（Bus Interface Unit, BIU）</strong></span></a></h3><ul><li>负责 CPU 与外部设备（如内存和输入输出设备）之间的数据传输。</li><li>包括数据总线、地址总线和控制总线接口。</li></ul><hr><h3 id="_5-流水线-pipeline" tabindex="-1"><a class="header-anchor" href="#_5-流水线-pipeline"><span><strong>5. 流水线（Pipeline）</strong></span></a></h3><ul><li>用于并行处理多个指令，提高执行效率。</li><li>将指令分解为多个阶段（如取指、解码、执行等），每个阶段由专门的硬件完成。</li></ul><hr><h3 id="_6-分支预测单元-branch-prediction-unit" tabindex="-1"><a class="header-anchor" href="#_6-分支预测单元-branch-prediction-unit"><span><strong>6. 分支预测单元（Branch Prediction Unit）</strong></span></a></h3><ul><li>预测程序中分支指令的执行路径，减少流水线停顿，提高指令执行效率。</li></ul><hr><h3 id="_7-内存管理单元-mmu-memory-management-unit" tabindex="-1"><a class="header-anchor" href="#_7-内存管理单元-mmu-memory-management-unit"><span><strong>7. 内存管理单元（MMU, Memory Management Unit）</strong></span></a></h3><ul><li>负责虚拟地址到物理地址的映射。</li><li>提供内存保护和分页机制，支持现代操作系统的虚拟内存功能。</li></ul><hr><h3 id="_8-浮点运算单元-fpu-floating-point-unit" tabindex="-1"><a class="header-anchor" href="#_8-浮点运算单元-fpu-floating-point-unit"><span><strong>8. 浮点运算单元（FPU, Floating Point Unit）</strong></span></a></h3><ul><li>专门处理浮点数的计算。</li><li>对于科学计算和图形处理非常重要。</li></ul><hr><h3 id="_9-多核心单元" tabindex="-1"><a class="header-anchor" href="#_9-多核心单元"><span><strong>9. 多核心单元</strong></span></a></h3><ul><li>现代 CPU 通常包含多个核心（Core），每个核心相当于一个独立的处理单元。</li><li>支持并行处理，显著提高计算能力。</li></ul><hr><h3 id="_10-图形处理单元-gpu-integrated-gpu" tabindex="-1"><a class="header-anchor" href="#_10-图形处理单元-gpu-integrated-gpu"><span><strong>10. 图形处理单元（GPU, Integrated GPU）</strong></span></a></h3><ul><li>部分现代 CPU 集成了 GPU，用于处理图形任务，减轻独立显卡的负担。</li></ul><hr><h3 id="_11-专用单元" tabindex="-1"><a class="header-anchor" href="#_11-专用单元"><span><strong>11. 专用单元</strong></span></a></h3><ol><li><strong>向量处理单元（SIMD, Single Instruction Multiple Data）</strong>： <ul><li>用于加速多媒体和大数据计算。</li></ul></li><li><strong>加密单元（Crypto Unit）</strong>： <ul><li>加速数据加密和解密。</li></ul></li><li><strong>神经网络处理单元（NPU, Neural Processing Unit）</strong>： <ul><li>专门用于 AI 运算的硬件单元。</li></ul></li></ol><hr><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3"><span><strong>总结</strong></span></a></h3><p>一个现代 CPU 的内部通常由以下部分组成：</p><ul><li>运算单元：ALU、FPU、SIMD 等。</li><li>控制单元：CU、寄存器、指令解码器。</li><li>存储单元：寄存器、缓存。</li><li>数据交互单元：总线接口、内存管理单元。</li><li>专用单元：分支预测、加密单元、NPU 等。</li></ul><p>随着技术的发展，CPU 的集成度越来越高，同时也变得更加复杂和高效。</p></blockquote><h3 id="_2-1-通用寄存器" tabindex="-1"><a class="header-anchor" href="#_2-1-通用寄存器"><span>2.1 通用寄存器</span></a></h3><h3 id="_2-2-字在寄存器中的存储" tabindex="-1"><a class="header-anchor" href="#_2-2-字在寄存器中的存储"><span>2.2 字在寄存器中的存储</span></a></h3><p>为什么计算机中常用十六进制表示二进制？</p><blockquote><p>计算机中常用十六进制表示二进制，主要是因为十六进制能够高效地表示二进制数，并且容易转换和阅读。以下是详细原因：</p><hr><h3 id="_1-简化表示" tabindex="-1"><a class="header-anchor" href="#_1-简化表示"><span><strong>1. 简化表示</strong></span></a></h3><ul><li>二进制数通常由大量的 <code>0</code> 和 <code>1</code> 组成，对于人类来说，直接阅读和操作大段二进制数非常困难。 <ul><li>例如，二进制数 <code>101110100101</code> 很难快速理解。</li></ul></li><li>十六进制将每 4 位二进制数映射为一个十六进制字符，显著缩短了长度。 <ul><li><strong>示例</strong>： <ul><li>二进制：<code>1011 1010 0101</code></li><li>十六进制：<code>BA5</code></li></ul></li></ul></li></ul><hr><h3 id="_2-易于转换" tabindex="-1"><a class="header-anchor" href="#_2-易于转换"><span><strong>2. 易于转换</strong></span></a></h3><ul><li><p>十六进制与二进制之间的转换非常直观：</p><ul><li>每个十六进制数字对应 4 位二进制数（因为 ( 2^4 = 16 )）。</li><li>不需要复杂的计算，只需将二进制分组即可。</li><li><strong>示例</strong>： <ul><li>二进制：<code>1110 1101</code></li><li>十六进制：<code>ED</code></li></ul></li></ul></li><li><p>与十进制相比，十六进制更适合表示二进制数：</p><ul><li>十进制与二进制之间的转换需要反复除以 2 或乘以 2，较为复杂。</li><li><strong>示例</strong>： <ul><li>二进制：<code>1010 1100</code></li><li>十进制：<code>172</code>（需要计算）。</li></ul></li></ul></li></ul><hr><h3 id="_3-节省空间" tabindex="-1"><a class="header-anchor" href="#_3-节省空间"><span><strong>3. 节省空间</strong></span></a></h3><ul><li>十六进制表示法比二进制更紧凑，占用的空间更小，尤其在存储数据、编写代码或显示调试信息时。 <ul><li><strong>示例</strong>： <ul><li>二进制：<code>1101011110111101</code>（16 位）</li><li>十六进制：<code>D7BD</code>（4 位）</li></ul></li></ul></li></ul><hr><h3 id="_4-方便识别和调试" tabindex="-1"><a class="header-anchor" href="#_4-方便识别和调试"><span><strong>4. 方便识别和调试</strong></span></a></h3><ul><li>现代计算机处理器和系统中的地址、数据、指令等多以二进制存储，而十六进制更容易表达这些内容。</li><li>在调试工具（如汇编语言和内存转储工具）中，使用十六进制可以更清晰地查看和分析数据。 <ul><li><strong>示例</strong>： <ul><li>内存地址 <code>0x1A3F</code> 是十六进制表示，便于识别，比对应的二进制 <code>1101000111111</code> 直观得多。</li></ul></li></ul></li></ul><hr><h3 id="_5-与字节对齐" tabindex="-1"><a class="header-anchor" href="#_5-与字节对齐"><span><strong>5. 与字节对齐</strong></span></a></h3><ul><li>计算机中，数据通常以字节为单位存储（1 字节 = 8 位二进制）。</li><li>一个字节可以用 2 个十六进制字符表示（因为 ( 16^2 = 256 )），这与存储结构高度匹配。 <ul><li><strong>示例</strong>： <ul><li>字节内容：<code>1111 0001</code>（二进制）</li><li>十六进制：<code>F1</code></li></ul></li></ul></li></ul><hr><h3 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4"><span><strong>总结</strong></span></a></h3><p>十六进制被常用来表示二进制数，主要是因为它具有以下优点：</p><ul><li>简化二进制数的表示，缩短长度。</li><li>转换简单直观。</li><li>节省空间，方便阅读。</li><li>与计算机存储结构（字节和地址）高度匹配。</li></ul><p>因此，十六进制是二进制数在人类交互中最常用的表示方式之一。</p></blockquote><h3 id="_2-3-几条汇编指令" tabindex="-1"><a class="header-anchor" href="#_2-3-几条汇编指令"><span>2.3 几条汇编指令</span></a></h3><p>十六进制加法、减法如何计算?</p><blockquote><p><strong>十六进制加法和减法</strong>的计算遵循与十进制类似的规则，但因为基数是 16，需要特别注意进位和借位。以下是具体的计算方法和步骤：</p><hr><h3 id="_1-十六进制加法" tabindex="-1"><a class="header-anchor" href="#_1-十六进制加法"><span><strong>1. 十六进制加法</strong></span></a></h3><h4 id="规则" tabindex="-1"><a class="header-anchor" href="#规则"><span><strong>规则：</strong></span></a></h4><ul><li>每一位按 16 进制进行相加。</li><li>若和大于或等于 16，则需要进位到下一位。</li><li>十六进制字符对照表：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0, 1, 2, ..., 9, A(10), B(11), C(12), D(13), E(14), F(15)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤"><span><strong>步骤：</strong></span></a></h4><ol><li>从最低位开始对齐两数，逐位相加。</li><li>如果和 ≥ 16，则取余数作为当前位，进位 1 到下一位。</li><li>重复直到最高位，若最高位有进位，则补上一位。</li></ol><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span><strong>示例：</strong></span></a></h4><p><strong>计算：<code>1A7</code> + <code>B9</code></strong></p><ul><li>按位对齐：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  1A7</span></span>
<span class="line"><span>+  0B9</span></span>
<span class="line"><span>------</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>从最低位开始： <ul><li>7 + 9 = 16（取余数 0，进位 1）</li><li>A(10) + B(11) + 1 = 22（取余数 6，进位 1）</li><li>1 + 0 + 1 = 2（无进位）</li></ul></li></ul><p><strong>结果：<code>206</code></strong></p><hr><h3 id="_2-十六进制减法" tabindex="-1"><a class="header-anchor" href="#_2-十六进制减法"><span><strong>2. 十六进制减法</strong></span></a></h3><h4 id="规则-1" tabindex="-1"><a class="header-anchor" href="#规则-1"><span><strong>规则：</strong></span></a></h4><ul><li>每一位按 16 进制进行相减。</li><li>若被减数小于减数，则需要向更高位借 1，借位值为 16。</li></ul><h4 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1"><span><strong>步骤：</strong></span></a></h4><ol><li>从最低位开始对齐两数，逐位相减。</li><li>如果被减数小于减数，则向更高位借 1。</li><li>借位时，当前位的值加上 16，再进行减法。</li><li>重复直到最高位，若无借位则直接相减。</li></ol><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1"><span><strong>示例：</strong></span></a></h4><p><strong>计算：<code>1A7</code> - <code>B9</code></strong></p><ul><li>按位对齐：<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  1A7</span></span>
<span class="line"><span>-  0B9</span></span>
<span class="line"><span>------</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>从最低位开始： <ul><li>7 - 9（不够减，向上一位借 1，当前位值为 7 + 16 = 23，23 - 9 = 14，记作 <code>E</code>）</li><li>A(10) - B(11) - 1（借位）= 10 - 11 - 1 = 14（记作 <code>F</code>，向再上一位借 1）</li><li>1 - 0 - 1（借位）= 0（无借位）</li></ul></li></ul><p><strong>结果：<code>0FE</code></strong></p><hr><h3 id="总结-5" tabindex="-1"><a class="header-anchor" href="#总结-5"><span><strong>总结</strong></span></a></h3><h4 id="十六进制加法" tabindex="-1"><a class="header-anchor" href="#十六进制加法"><span>十六进制加法：</span></a></h4><ul><li>和 ≥ 16 时取余数，向高位进 1。</li></ul><h4 id="十六进制减法" tabindex="-1"><a class="header-anchor" href="#十六进制减法"><span>十六进制减法：</span></a></h4><ul><li>被减数不足时向高位借 1，加 16 后再减。</li></ul><p>熟练使用十六进制字符表（0-F）和基本加减法规则，可以快速完成十六进制计算！</p></blockquote><h3 id="_2-4-物理地址" tabindex="-1"><a class="header-anchor" href="#_2-4-物理地址"><span>2.4 物理地址</span></a></h3><p>所有内存单元构成的存储空间是一个一维的线性空间。</p><p>CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。</p><h3 id="_2-6-16位结构的cpu" tabindex="-1"><a class="header-anchor" href="#_2-6-16位结构的cpu"><span>2.6 16位结构的CPU</span></a></h3><p>地址加法器采用</p><ul><li>物理地址=段地址x16+偏移地址</li><li>一个数据的二进制形式左移N位，相当于该数据乘以2的N次方。</li></ul><p>分段机制与分页结合</p><ul><li>现代 CPU 大多使用分页机制，但早期 CPU（如 x86 16 位）采用分段机制。 <ul><li>分段机制：物理地址 = 段基址 + 偏移量。</li><li>现代 CPU 中分段机制通常简化（如 x86-64 将段基址固定为 0）。</li></ul></li></ul><p>CPU计算物理地址的方法？ 以市面上最主流的CPU为例。？ 概括的将，16位结构，描述了一个CPU具有以下几个方面的结构特征：</p><ul><li>运算器一次最多可以处理16位的数据</li><li>寄存器的最大宽度是16位</li><li>寄存器和运算器之间的通路位16位</li></ul><p>16位结构的CPU与32位和64之间的区别？</p><blockquote><p><strong>16位、32位和64位结构的CPU</strong>主要区别在于它们的<strong>数据处理能力</strong>、<strong>地址空间</strong>、<strong>寄存器宽度</strong>和<strong>计算能力</strong>。以下是详细比较：</p><hr><h3 id="_1-数据处理能力" tabindex="-1"><a class="header-anchor" href="#_1-数据处理能力"><span><strong>1. 数据处理能力</strong></span></a></h3><ul><li><p><strong>16位 CPU</strong>：</p><ul><li>每次处理的数据宽度为 <strong>16 位</strong>（2 字节）。</li><li>运算能力有限，适合处理较小的数据范围。</li><li>每条指令可操作的数据范围是 ( 2^{16} ) 即 65536（约 64 KB）。</li></ul></li><li><p><strong>32位 CPU</strong>：</p><ul><li>每次处理的数据宽度为 <strong>32 位</strong>（4 字节）。</li><li>单条指令能处理的数据范围扩大到 ( 2^{32} ) 即 4,294,967,296（约 4 GB）。</li><li>比 16 位 CPU 更适合计算密集型任务。</li></ul></li><li><p><strong>64位 CPU</strong>：</p><ul><li>每次处理的数据宽度为 <strong>64 位</strong>（8 字节）。</li><li>能处理的单条指令范围是 ( 2^{64} ) 即 18,446,744,073,709,551,616（约 18 EB）。</li><li>提供更强的计算能力，适合大数据、AI 和科学计算等高性能需求。</li></ul></li></ul><hr><h3 id="_2-内存地址空间" tabindex="-1"><a class="header-anchor" href="#_2-内存地址空间"><span><strong>2. 内存地址空间</strong></span></a></h3><ul><li><p><strong>16位 CPU</strong>：</p><ul><li>能访问的内存地址空间为 ( 2^{16} ) 字节（64 KB）。</li><li>通常需要通过分段机制扩展地址空间，但仍然非常有限。</li></ul></li><li><p><strong>32位 CPU</strong>：</p><ul><li>内存地址空间为 ( 2^{32} ) 字节（4 GB）。</li><li>是现代操作系统的主流标准，适用于大多数应用场景。</li></ul></li><li><p><strong>64位 CPU</strong>：</p><ul><li>理论内存地址空间为 ( 2^{64} ) 字节（16 EB）。</li><li>实际受限于硬件实现，通常消费级设备支持的内存上限为几 TB 到几十 TB。</li><li>更适合运行需要大量内存的应用，如虚拟化、大型数据库、视频处理等。</li></ul></li></ul><hr><h3 id="_3-寄存器宽度" tabindex="-1"><a class="header-anchor" href="#_3-寄存器宽度"><span><strong>3. 寄存器宽度</strong></span></a></h3><ul><li><p><strong>16位 CPU</strong>：</p><ul><li>寄存器宽度为 16 位，数据传输和指令执行一次最多操作 16 位数据。</li><li>典型代表是早期的 Intel 8086、80286 等。</li></ul></li><li><p><strong>32位 CPU</strong>：</p><ul><li>寄存器宽度为 32 位，指令执行和数据传输更高效。</li><li>常见于 Intel Pentium 系列和早期 ARM 架构。</li></ul></li><li><p><strong>64位 CPU</strong>：</p><ul><li>寄存器宽度为 64 位，能执行更复杂的指令，支持更大范围的数据操作。</li><li>常见于 AMD64、Intel x86-64 和现代 ARM64 架构。</li></ul></li></ul><hr><h3 id="_4-指令集和兼容性" tabindex="-1"><a class="header-anchor" href="#_4-指令集和兼容性"><span><strong>4. 指令集和兼容性</strong></span></a></h3><ul><li><p><strong>16位 CPU</strong>：</p><ul><li>使用 16 位指令集（如 x86-16）。</li><li>与现代应用不兼容，仅能运行非常老旧的软件。</li></ul></li><li><p><strong>32位 CPU</strong>：</p><ul><li>使用 32 位指令集（如 x86）。</li><li>可以兼容 16 位程序，但无法运行 64 位程序。</li></ul></li><li><p><strong>64位 CPU</strong>：</p><ul><li>使用 64 位指令集（如 x86-64 和 ARM64）。</li><li>向下兼容 32 位程序（需操作系统支持），但不能直接运行 16 位程序（一般需要虚拟化或模拟器）。</li></ul></li></ul><hr><h3 id="_5-性能和应用场景" tabindex="-1"><a class="header-anchor" href="#_5-性能和应用场景"><span><strong>5. 性能和应用场景</strong></span></a></h3><ul><li><p><strong>16位 CPU</strong>：</p><ul><li>性能较低，仅适用于嵌入式系统或历史遗留的简单任务。</li><li>典型应用：老式计算机、嵌入式设备（如微控制器）。</li></ul></li><li><p><strong>32位 CPU</strong>：</p><ul><li>性能较好，支持大多数日常任务和中等规模的计算。</li><li>典型应用：旧式台式机、笔记本电脑、部分嵌入式设备（如路由器）。</li></ul></li><li><p><strong>64位 CPU</strong>：</p><ul><li>性能最高，支持高性能计算、虚拟化、大型数据处理。</li><li>典型应用：现代 PC、服务器、智能手机、高性能计算设备。</li></ul></li></ul><hr><h3 id="_6-操作系统支持" tabindex="-1"><a class="header-anchor" href="#_6-操作系统支持"><span><strong>6. 操作系统支持</strong></span></a></h3><ul><li><p><strong>16位 CPU</strong>：</p><ul><li>支持早期操作系统（如 MS-DOS、早期 Windows）。</li><li>不兼容现代操作系统。</li></ul></li><li><p><strong>32位 CPU</strong>：</p><ul><li>支持 32 位操作系统（如 Windows XP/7/10 32 位、Linux 32 位）。</li><li>不支持运行 64 位操作系统。</li></ul></li><li><p><strong>64位 CPU</strong>：</p><ul><li>支持 64 位操作系统（如 Windows 10/11 64 位、macOS、Linux 64 位）。</li><li>一些支持运行 32 位应用的兼容模式。</li></ul></li></ul><hr><h3 id="总结-6" tabindex="-1"><a class="header-anchor" href="#总结-6"><span><strong>总结：</strong></span></a></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>16 位 CPU</strong></th><th><strong>32 位 CPU</strong></th><th><strong>64 位 CPU</strong></th></tr></thead><tbody><tr><td><strong>数据宽度</strong></td><td>16 位</td><td>32 位</td><td>64 位</td></tr><tr><td><strong>内存地址空间</strong></td><td>64 KB</td><td>4 GB</td><td>16 EB（理论值）</td></tr><tr><td><strong>寄存器宽度</strong></td><td>16 位</td><td>32 位</td><td>64 位</td></tr><tr><td><strong>指令集</strong></td><td>x86-16</td><td>x86</td><td>x86-64 / ARM64</td></tr><tr><td><strong>应用场景</strong></td><td>嵌入式、历史系统</td><td>日常应用、中等性能</td><td>高性能计算、大数据</td></tr><tr><td><strong>兼容性</strong></td><td>仅支持 16 位程序</td><td>支持 16 和 32 位程序</td><td>支持 32 和 64 位程序</td></tr></tbody></table><p>64 位 CPU 是现代计算的主流，支持更大的内存、更高的性能和更复杂的任务。</p></blockquote><h3 id="_2-6-8086cpu-给出物理地址的方法" tabindex="-1"><a class="header-anchor" href="#_2-6-8086cpu-给出物理地址的方法"><span>2.6 8086CPU 给出物理地址的方法</span></a></h3><blockquote><p>下面以当前市面上最主流的 <strong>x86-64（AMD64 / Intel 64）</strong> 架构为例，介绍 CPU（准确来说，是其 <strong>内存管理单元 MMU</strong>）将虚拟地址转换为物理地址的过程。</p><h2 id="一、基础概念" tabindex="-1"><a class="header-anchor" href="#一、基础概念"><span>一、基础概念</span></a></h2><ol><li><p><strong>虚拟地址（Virtual Address）</strong></p><ul><li>程序看到并使用的地址，由操作系统为每个进程分配独立的地址空间。</li><li>在 x86-64 下，当前常见实现通常使用 <strong>48 位</strong>的虚拟地址（高位扩展规则下，理论最大可达 57 位甚至更多，但实际并未完全实现）。</li></ul></li><li><p><strong>物理地址（Physical Address）</strong></p><ul><li>内存硬件（RAM）实际使用的地址。</li><li>由 CPU 的 <strong>物理地址总线</strong> 提供，实际可访问范围比理论值往往要小，受限于芯片组、主板设计等。</li></ul></li><li><p><strong>页（Page）</strong></p><ul><li>内存管理最常用的基本单位。</li><li>在 x86-64 下，最常见的页大小为 <strong>4 KB</strong>。同时也支持大页（2 MB 或 1 GB），但原理相似。</li></ul></li><li><p><strong>多级页表（Multi-level Page Table）</strong></p><ul><li>为了管理和映射庞大的虚拟地址空间到物理地址空间，x86-64 采用 <strong>四级页表</strong>（某些场景可扩展到五级，但主流还是四级）。</li><li>每一级页表都存储下一级页表的物理基地址或直接存储目标页所在的物理基地址。</li></ul></li><li><p><strong>内存管理单元（MMU, Memory Management Unit）</strong></p><ul><li>负责将虚拟地址翻译成物理地址。</li><li>将多级页表的索引和页面内偏移综合起来，得出最后的物理地址。</li></ul></li></ol><hr><h2 id="二、x86-64-四级分页机制" tabindex="-1"><a class="header-anchor" href="#二、x86-64-四级分页机制"><span>二、x86-64 四级分页机制</span></a></h2><p>在常见的 <strong>4 KB 页</strong>模式下，x86-64 的虚拟地址格式可简化表示如下（48 位虚拟地址）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span> [  9 bits  |  9 bits  |  9 bits  |  9 bits  |  12 bits  ]</span></span>
<span class="line"><span>    PML4       PDPT       PDT        PT        Offset</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>PML4（Page Map Level 4）</strong>：第一级页表索引，占 9 位。</li><li><strong>PDPT（Page Directory Pointer Table）</strong>：第二级页表索引，占 9 位。</li><li><strong>PDT（Page Directory Table）</strong>：第三级页表索引，占 9 位。</li><li><strong>PT（Page Table）</strong>：第四级页表索引，占 9 位。</li><li><strong>Offset</strong>：页内偏移，占 12 位（因为 4 KB = 2^12）。</li></ul><blockquote><p>也就是说，每一层页表用 9 位索引来选出一个 <strong>页表项（Page Table Entry，PTE）</strong>，而页表项中存储下一层页表的基地址或实际物&gt; 理页框地址。最后的 12 位用来定位该页内部的具体字节。</p></blockquote><hr><h2 id="三、虚拟地址到物理地址的转换过程" tabindex="-1"><a class="header-anchor" href="#三、虚拟地址到物理地址的转换过程"><span>三、虚拟地址到物理地址的转换过程</span></a></h2><p>假设我们有一个 48 位的虚拟地址（实际 CPU 可能只实现 48 位或 52 位等，更高位通过符号扩展），MMU 的转换步骤如下：</p><ol><li><p><strong>从 CR3 寄存器（页表基址）获取顶级 PML4 表地址</strong></p><ul><li>操作系统会在 <code>CR3</code>（Control Register 3）中保存 <strong>PML4 表</strong> 在物理内存中的基地址（通常是 52 位或更宽的物理地址）。</li><li>MMU 根据这个基地址去内存中找到 PML4 表。</li></ul></li><li><p><strong>PML4 索引：读取虚拟地址的最高 9 位（PML4 字段）</strong></p><ul><li>在 PML4 表中，用这 9 位作为索引（即第几个表项）。</li><li>从对应的表项中读取到 <strong>PDPT 表</strong> 的基地址（在物理内存中的地址），同时还可读取权限信息（可读/可写/可执行等）。</li></ul></li><li><p><strong>PDPT 索引：读取虚拟地址接下来的 9 位</strong></p><ul><li>在找到的 PDPT 表中，用这 9 位作为索引。</li><li>从对应的表项中读取到 <strong>PDT 表</strong> 的基地址（物理地址）及权限信息。</li></ul></li><li><p><strong>PDT 索引：读取虚拟地址再往下的 9 位</strong></p><ul><li>在 PDT 表中，用这 9 位作为索引。</li><li>表项指向 <strong>PT 表</strong> 的基地址（物理地址），并包含相应权限信息。</li></ul></li><li><p><strong>PT 索引：读取虚拟地址最后的 9 位索引部分</strong></p><ul><li>在 PT 表中，用这 9 位作为索引。</li><li>如果这个表项有效，通常就能得到 <strong>实际物理页框基地址</strong>（page frame address）。同时还会含有权限位、是否在缓存中、是否在磁盘等信息。</li></ul></li><li><p><strong>页内偏移（Offset：12 位）</strong></p><ul><li>最后再将上述物理页框基地址 + <code>Offset</code>（12 位）</li><li>得到 <strong>完整的物理地址</strong>。</li></ul></li></ol><blockquote><p>若任何一级索引对应的表项无效（比如权限不够或表项为 0），就会触发 <strong>缺页异常（Page Fault）</strong> 或访问错误，由操作系统来处理。</p></blockquote><hr><h2 id="四、示例" tabindex="-1"><a class="header-anchor" href="#四、示例"><span>四、示例</span></a></h2><h3 id="虚拟地址示例" tabindex="-1"><a class="header-anchor" href="#虚拟地址示例"><span>虚拟地址示例</span></a></h3><p>假设一个虚拟地址为（用 48 位示意）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>虚拟地址（16 进制）：0x00007FFF_FF12_3450</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>为了便于说明，先将其二进制划分为 5 个部分（PML4、PDPT、PDT、PT、Offset）。</li><li>计算得出（以下仅为举例，非真实索引值）： <ul><li>PML4 索引（9 bits）：<code>0x1FF</code></li><li>PDPT 索引（9 bits）：<code>0x1FD</code></li><li>PDT 索引（9 bits）：<code>0x1FE</code></li><li>PT 索引（9 bits）： <code>0x050</code></li><li>Offset（12 bits）： <code>0x450</code></li></ul></li></ul><h3 id="多级查表" tabindex="-1"><a class="header-anchor" href="#多级查表"><span>多级查表</span></a></h3><ol><li><p><strong>PML4 表</strong></p><ul><li><code>CR3</code> 中记录的物理地址：<code>0x00000010_0000_0000</code>（示例）</li><li>在该物理地址上存放 PML4 表。</li><li>利用 PML4 索引 <code>0x1FF</code> 找到对应的表项，读到 PDPT 的基址：<code>0x00000020_0000_0000</code>。</li></ul></li><li><p><strong>PDPT 表</strong></p><ul><li>在物理地址 <code>0x00000020_0000_0000</code> 存放 PDPT。</li><li>利用索引 <code>0x1FD</code> 找到 PDT 的基址：<code>0x00000020_0010_0000</code>。</li></ul></li><li><p><strong>PDT 表</strong></p><ul><li>在物理地址 <code>0x00000020_0010_0000</code> 存放 PDT。</li><li>利用索引 <code>0x1FE</code> 找到 PT 的基址：<code>0x00000020_0020_0000</code>。</li></ul></li><li><p><strong>PT 表</strong></p><ul><li>在物理地址 <code>0x00000020_0020_0000</code> 存放 PT。</li><li>利用索引 <code>0x050</code> 找到实际页框的基址：<code>0x00000030_1000_0000</code>。</li></ul></li><li><p><strong>计算最终物理地址</strong></p><ul><li>物理页框基址：<code>0x00000030_1000_0000</code></li><li>页内偏移：<code>0x450</code></li><li>最终物理地址：<br> [ 0x00000030_1000_0000 + 0x450 = 0x00000030_1000_0450 ]</li></ul></li></ol><hr><h2 id="五、arm64-等其他主流架构" tabindex="-1"><a class="header-anchor" href="#五、arm64-等其他主流架构"><span>五、ARM64 等其他主流架构</span></a></h2><p>与 x86-64 类似，<strong>ARM64</strong> 等现代 64 位架构也普遍采用多级页表（通常 4 或 5 级），每级索引位数根据具体实现而定，也会有 4 KB、16 KB、64 KB 等不同页面大小的模式。核心逻辑都类似：</p><ol><li>从顶级页表基址（TTBR0/TTBR1 等寄存器）开始。</li><li>逐级索引到下一级页表。</li><li>最终获得物理页框地址。</li><li>加上页内偏移得到物理地址。</li></ol><hr><h2 id="六、总结" tabindex="-1"><a class="header-anchor" href="#六、总结"><span>六、总结</span></a></h2><ol><li><strong>MMU 负责地址翻译</strong>：CPU 并不会“手动”去做每次多级查表，而是将虚拟地址送给 MMU，由 MMU 自动完成分页查表过程。</li><li><strong>四级分页（x86-64）</strong>：主流的 64 位桌面/服务器 CPU 通常采用 4 级页表结构（PML4 → PDPT → PDT → PT），也可能根据需求扩&gt; 展到 5 级。</li><li><strong>页大小及多级深度可变</strong>：4 KB、2 MB、1 GB 大页，以及 ARM64 的 16 KB、64 KB 页，都会相应调整多级页表索引位数。</li><li><strong>软件与硬件配合</strong>：操作系统内核负责分配和维护页表，CR3（或 TTBR）寄存器指向顶级页表；硬件（MMU）自动进行翻译，并在缺页&gt; 或权限错误时发起异常。</li></ol><p><strong>简而言之</strong>：</p><ul><li>现代主流 CPU 使用分页机制和多级页表。</li><li>虚拟地址通过多级索引（PML4 / PDPT / PDT / PT 等）依次查表找到对应的物理页框基址。</li><li>最后将该基址与页内偏移相加，形成 <strong>物理地址</strong>。</li></ul></blockquote><p>为什么现在CPU不再使用分段机制而使用分页？</p><blockquote><p>在现代 CPU（尤其是 <strong>x86-64</strong> 和 <strong>ARM64</strong> 等 64 位架构）中，“分段机制（Segmentation）” 已基本被“分页机制（Paging）”所&gt; 取代或大幅弱化，主要原因可概括为以下几点：</p><hr><h2 id="_1-简化内存管理" tabindex="-1"><a class="header-anchor" href="#_1-简化内存管理"><span>1. 简化内存管理</span></a></h2><ul><li><p><strong>分段机制的复杂性</strong><br> 早期 x86 架构在 16 位时代大量使用分段（Code Segment、Data Segment、Stack Segment 等），每个段都有不同的基址和界限。应用程序需要频繁地调整段寄存器，管理起来相对繁琐。</p></li><li><p><strong>分页机制更符合现代操作系统需求</strong><br> 现代操作系统（如 Linux、Windows、macOS）普遍采用 <strong>分页（Paging）</strong> 来提供更灵活的内存管理功能，例如：</p><ul><li><strong>虚拟内存</strong>：可以把不常用的页面换出到磁盘，节省物理内存。</li><li><strong>内存保护</strong>：每个页面可以设置只读、可写、可执行等权限。</li><li><strong>共享内存</strong>：多个进程可以映射同一个物理页面，节省资源。</li></ul></li></ul><p>使用分页后，内存管理单元（MMU）只需要维护多级页表，不再关心段基址和段限长等复杂信息，体系结构更加统一。</p><hr><h2 id="_2-大内存空间与统一地址模型" tabindex="-1"><a class="header-anchor" href="#_2-大内存空间与统一地址模型"><span>2. 大内存空间与统一地址模型</span></a></h2><ul><li><strong>分段更适合小地址空间</strong><br> 在 16 位或 32 位时代，分段+分页并存是为了扩大可用地址空间，但同时也带来复杂性。</li><li><strong>64 位带来的“大一统”</strong><br> 现代 64 位架构一般将分段机制弱化或基本关闭，仅保留少量的“伪分段”或“平坦（Flat）模式”： <ul><li>所有段的基址为 0，段限长设置到最大，等效于无分段。</li><li>CPU 主要依靠分页做虚拟地址到物理地址的映射与保护。</li></ul></li></ul><p>这样就形成了一种 <strong>“平坦内存模型”</strong>，使操作系统可以在巨大、连续的虚拟地址空间中更自由地调度和管理内存，简化开发和运行时的复&gt; 杂度。</p><hr><h2 id="_3-硬件与软件的协同演进" tabindex="-1"><a class="header-anchor" href="#_3-硬件与软件的协同演进"><span>3. 硬件与软件的协同演进</span></a></h2><ul><li><strong>操作系统普遍依赖分页</strong><br> 从 UNIX 到 Linux/Windows 这些现代操作系统，都基于分页来实现虚拟内存管理与进程隔离。分段往往只是最初在 x86 上为了兼容 16 &gt; 位模式保留下来的遗产。</li><li><strong>硬件设计逐步弱化分段</strong><br> x86-64 架构虽然在硬件上还保留“段寄存器”，但大多数情况下段基址都固定为 0，分段检查被简化甚至禁用。硬件厂商将设计重点放在更&gt; 高效的分页机制（如多级页表、TLB、大页支持等），以满足大内存和高性能需求。</li><li><strong>性能和可扩展性</strong><br> 分段需要处理基址加法、限长检查，每次访问内存都要额外进行段检查，硬件逻辑更复杂。分页只需页面粒度的访问控制，利用高速缓存&gt; （TLB）来加速地址翻译，性能更好、扩展性更强。</li></ul><hr><h2 id="_4-安全性与隔离" tabindex="-1"><a class="header-anchor" href="#_4-安全性与隔离"><span>4. 安全性与隔离</span></a></h2><ul><li><strong>分页粒度更细</strong><br> 分段往往以“段”为单位，虽然也可以分得很细，但编写复杂。分页则以固定大小的“页”为单位（通常 4 KB、2 MB、1 GB 等），对于权限&gt; （R/W/X）的设置和进程间隔离更直观、可控。</li><li><strong>现代安全需求</strong><br> 地址空间布局随机化（ASLR）、不可执行堆栈/数据区（NX bit）等安全特性都基于分页实现。分段模式难以在现代复杂系统中灵活应用这&gt; 些特性。</li></ul><hr><h2 id="_5-向下兼容与过渡" tabindex="-1"><a class="header-anchor" href="#_5-向下兼容与过渡"><span>5. 向下兼容与过渡</span></a></h2><ul><li><strong>早期 x86 的“分段+分页”</strong><br> 32 位的 x86（保护模式）既支持分段，又支持分页。操作系统往往将段设置成“平坦模式”（base=0，limit=4GB），再用分页来真正管理&gt; 内存。</li><li><strong>x86-64 的“长模式”</strong><br> 在“长模式”下（即 64 位模式），仍保留对分段寄存器的一些支持，但大多数情况下都将它们设置为平坦模式，只对 FS/GS 等寄存器做个&gt; 别特殊用途（如线程本地存储）处理，而不再做通用的内存隔离。</li><li><strong>ARM64 则几乎没有历史包袱</strong><br> ARM64 更彻底地依赖分页来管理地址空间，没有 x86 那样复杂的历史遗留分段机制。</li></ul><hr><h2 id="总结-7" tabindex="-1"><a class="header-anchor" href="#总结-7"><span>总结</span></a></h2><p><strong>分页</strong> 在现代操作系统和 CPU 架构中成为主要的内存管理手段，主要原因是：</p><ol><li><strong>更大更复杂的内存空间需求</strong>：64 位下地址空间远超 32 位或 16 位时代，分段模式的管理复杂度大幅上升，不利于可扩展性。</li><li><strong>易实现虚拟内存和进程隔离</strong>：分页可细粒度控制内存访问、实现共享与保护，分段机制则相对繁琐。</li><li><strong>硬件与软件协同简化</strong>：硬件上弱化分段、强化分页；操作系统则充分利用分页实现安全与性能。</li></ol><p>因此，现在的 CPU 都 <strong>默认使用分页</strong>（结合简化或“关闭”的分段）来实现内存地址转换与访问控制，让操作系统和应用开发者专注于更高层次的需求。</p></blockquote><h3 id="_2-7-段地址x16-偏移地址-物理地址的本质含义" tabindex="-1"><a class="header-anchor" href="#_2-7-段地址x16-偏移地址-物理地址的本质含义"><span>2.7 段地址x16+偏移地址=物理地址的本质含义</span></a></h3><p>基础地址+偏移地址=物理地址</p><h3 id="_2-8-段的概念" tabindex="-1"><a class="header-anchor" href="#_2-8-段的概念"><span>2.8 段的概念</span></a></h3><h3 id="_2-9-段寄存器" tabindex="-1"><a class="header-anchor" href="#_2-9-段寄存器"><span>2.9 段寄存器</span></a></h3><h3 id="_2-10-cs和ip" tabindex="-1"><a class="header-anchor" href="#_2-10-cs和ip"><span>2.10 CS和IP</span></a></h3><p>8086CPU的工作过程：</p><ul><li><ol><li>从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器。</li></ol></li><li><ol start="2"><li>IP=IP+所读取指令的长度，从而指向下一条指令。</li></ol></li><li><ol start="3"><li>执行指令。转到步骤1，重复这个过程。</li></ol></li></ul><p>CPU根据什么将内存中的信息看做指令？</p><ul><li>CPU将CS:IP指向的内存单元中的内容看做指令。</li></ul><p>CPU根据什么将内存中的信息看做指令？</p><blockquote><p>在现代计算机体系结构中，<strong>CPU 之所以会把内存中的某些信息当作指令来执行</strong>，根本原因在于以下几点：</p><hr><h2 id="_1-程序计数器-pc-ip-指向-即将执行的指令-所在地址" tabindex="-1"><a class="header-anchor" href="#_1-程序计数器-pc-ip-指向-即将执行的指令-所在地址"><span>1. <strong>程序计数器（PC / IP）指向“即将执行的指令”所在地址</strong></span></a></h2><ol><li><p><strong>程序计数器（Program Counter, PC）</strong></p><ul><li>也称 <strong>指令指针（Instruction Pointer, IP）</strong>（在 x86 架构中常用 IP/EIP/RIP 等名称）。</li><li>CPU 内部的一个特殊寄存器，用来存储下一条要执行指令在内存中的地址。</li></ul></li><li><p><strong>取指（Fetch）阶段</strong></p><ul><li>CPU 会根据 PC 的值，从内存中读取相应地址处的数据。</li><li>读出的这段二进制数据将被当作“指令”字节序列，送往 <strong>指令解码器（Instruction Decoder）</strong>。</li></ul></li><li><p><strong>解码（Decode）阶段</strong></p><ul><li>指令解码器把取出的二进制序列，按本机 <strong>指令集</strong> 的格式来解释：哪几位表示操作码、哪几位表示操作数，等等。</li><li>如果解码成功，就表明这段二进制确实是合法的指令；若解码失败或不合法，就会导致异常（非法指令异常）。</li></ul></li><li><p><strong>执行（Execute）阶段</strong></p><ul><li>根据解码结果，CPU 执行相应的操作（如加法、内存访问、跳转等）。</li><li>执行完后，将 PC 更新到下一条指令地址，进入下一轮取指、解码、执行的循环。</li></ul></li></ol><p><strong>由此可见</strong>：CPU 是靠“<strong>程序计数器</strong> + <strong>指令解码器</strong>”的协同工作，将取到的内存数据解释为指令的。</p><hr><h2 id="_2-内存数据是指令还是普通数据-取决于程序逻辑和pc的指向" tabindex="-1"><a class="header-anchor" href="#_2-内存数据是指令还是普通数据-取决于程序逻辑和pc的指向"><span>2. <strong>内存数据是指令还是普通数据，取决于程序逻辑和PC的指向</strong></span></a></h2><ul><li>内存中存放的不仅仅是“程序指令”，也可能是“纯数据”。</li><li>CPU 并不会自动区分“这是代码还是数据”，它只是<strong>从 PC 指向的位置取数据</strong>，然后试图将这些数据“解码”为指令。</li><li>如果有错误地跳转到一段本该是数据区域的地址，那么 CPU 取到的数据就会被当作指令解码，多数情况下会出现 <strong>非法指令</strong> 错误或执&gt; 行一些意料之外的操作（这在安全漏洞利用中也很常见，称为“代码注入”或者“shellcode”）。</li></ul><hr><h2 id="_3-编译器、操作系统与链接装载器的配合" tabindex="-1"><a class="header-anchor" href="#_3-编译器、操作系统与链接装载器的配合"><span>3. <strong>编译器、操作系统与链接装载器的配合</strong></span></a></h2><ol><li><strong>编译器</strong><ul><li>将高级语言编译为目标文件（机器码），里面包含指令的二进制序列和一些数据区。</li></ul></li><li><strong>链接器（Linker）</strong><ul><li>把多个目标文件与库文件链接起来，生成可执行文件。</li><li>在可执行文件中，会将“代码段（.text）”和“数据段（.data / .bss）”等分门别类地放入不同区域。</li></ul></li><li><strong>装载器（Loader）</strong><ul><li>操作系统把可执行文件装载到内存对应的地址空间中，建立“代码段区域”、“数据段区域”等映射关系。</li></ul></li><li><strong>程序入口地址</strong><ul><li>当操作系统把程序运行起来后，CPU 的 PC 指向程序入口地址（如 <code>_start</code>），开始从那里取指令执行。</li></ul></li></ol><p><strong>这样一来</strong>，放在“代码段”里的那部分内存内容，就成为 CPU 要执行的“指令”；而放在“数据段”里的则通常不会被 PC 指向，也就不会被&gt; 当作指令执行。</p><hr><h2 id="_4-为什么要有-指令解码器" tabindex="-1"><a class="header-anchor" href="#_4-为什么要有-指令解码器"><span>4. <strong>为什么要有“指令解码器”？</strong></span></a></h2><ul><li>每种 CPU 都有特定的 <strong>指令集架构（ISA, Instruction Set Architecture）</strong>。</li><li>指令解码器的任务就是根据 ISA 的编码格式，解析取到的二进制指令。</li><li>例如，在 x86-64 下，一条指令可能包含可变长度的操作码和操作数修饰；在 ARM64 下，一般是固定 32 位对齐等。</li><li>解码器负责把这些“比特组合”翻译成 CPU 内部能执行的“微指令（Micro-ops）”或“微码（Microcode）”，进而驱动算术逻辑单元&gt; （ALU）、寄存器、总线操作等。</li></ul><hr><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结"><span>5. <strong>小结</strong></span></a></h2><ul><li><strong>CPU 将内存中的信息当作指令的前提</strong>：该内存区域的地址恰好是 <strong>程序计数器</strong>（PC）指向的地方。</li><li><strong>实现机制</strong>： <ol><li>CPU 在“取指阶段”根据 PC 读取指定内存地址的内容。</li><li>“解码阶段”把读取到的二进制按照指令集格式解释。</li><li>如果合规，进入“执行阶段”；否则产生异常。</li></ol></li><li><strong>谁来告诉 CPU 该取哪段内存？</strong><ul><li>主要依赖 <strong>PC 的值</strong>，而 PC 的更新又受指令本身（如跳转、调用、返回等）以及操作系统管理的可执行文件布局影响。</li></ul></li></ul><p>因此，从物理层面上来说，<strong>CPU 并不知道“哪段内存是指令、哪段是数据”，它只是单纯地按照 PC 指向的地址取数据，并通过指令解码器解释那些比特流</strong>。如果能正确解码并符合权限，CPU 就执行；否则就报错或引发异常。</p></blockquote><h3 id="_2-11-修改cs、ip的指令" tabindex="-1"><a class="header-anchor" href="#_2-11-修改cs、ip的指令"><span>2.11 修改CS、IP的指令</span></a></h3><p>jmp 段地址:偏移地址 指令的功能位：用指令中的段地址修改CS，偏移地址修改IP。</p><p>jmp 某一合法寄存器 指令的功能为：用寄存器中的值修改IP。</p><h3 id="_2-12-代码段" tabindex="-1"><a class="header-anchor" href="#_2-12-代码段"><span>2.12 代码段</span></a></h3><p>什么是内存单元？ 16位、32位、64位CPU内存单元，有什么区别？</p><blockquote><p><em>内存单元</em>*（Memory Cell）是计算机内存中的最基本存储单位，用于存储单个数据元素。每个内存单元都有一个唯一的地址，便于 CPU 读取和写入数据。内存单元通常以字节（Byte）为单位，但在不同的 CPU 架构（如 16 位、32 位、64 位）中，内存单元的组织和处理方式会有所不同。以下是对内存单元的详细介绍及其在不同位数 CPU 中的区别。</p><p>--</p><h1 id="一、什么是内存单元" tabindex="-1"><a class="header-anchor" href="#一、什么是内存单元"><span>一、什么是内存单元？</span></a></h1><h2 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义"><span>1. <strong>定义</strong></span></a></h2><p><strong>内存单元</strong>是计算机内存中能够存储一个固定大小数据的基本单位。每个内存单元都有一个唯一的地址，便于 CPU 进行数据访问。 <strong>存储单位</strong>：通常以 <strong>字节（Byte）</strong> 为单位，一个字节由 <strong>8 位（bit）</strong> 组成。</p><h2 id="_2-结构" tabindex="-1"><a class="header-anchor" href="#_2-结构"><span>2. <strong>结构</strong></span></a></h2><p><strong>地址</strong>：每个内存单元都有一个唯一的地址，用于标识其位置。例如，地址 <code>0x0000</code>、<code>0x0001</code> 等。 <strong>存储内容</strong>：每个内存单元可以存储一个字节的数据，表示为 8 个二进制位（如 <code>10101010</code>）。</p><h2 id="_3-功能" tabindex="-1"><a class="header-anchor" href="#_3-功能"><span>3. <strong>功能</strong></span></a></h2><p><strong>数据存储</strong>：用于存储程序指令、变量、缓冲区等各种数据。 <strong>数据传输</strong>：CPU 通过内存总线（数据总线、地址总线、控制总线）与内存单元进行数据交换。</p><p>--</p><h1 id="二、16位、32位、64位-cpu-内存单元的区别" tabindex="-1"><a class="header-anchor" href="#二、16位、32位、64位-cpu-内存单元的区别"><span>二、16位、32位、64位 CPU 内存单元的区别</span></a></h1><p>PU 的位数（16位、32位、64位）主要指的是其 <strong>寄存器宽度</strong>、<strong>数据总线宽度</strong> 和 <strong>地址总线宽度</strong>，这些因素共同影响内存单元的访问和管理方式。以下从几个关键方面对比不同位数 CPU 的内存单元：</p><h2 id="_1-数据总线宽度" tabindex="-1"><a class="header-anchor" href="#_1-数据总线宽度"><span>1. <strong>数据总线宽度</strong></span></a></h2><p><strong>定义</strong>：数据总线是 CPU 与内存之间传输数据的通道，其宽度决定了每次可以传输的数据位数。</p><p><strong>区别</strong>：</p><ul><li><strong>16位 CPU</strong>：数据总线宽度为 16 位，每次可以传输 <strong>2 字节</strong> 数据。</li><li><strong>32位 CPU</strong>：数据总线宽度为 32 位，每次可以传输 <strong>4 字节</strong> 数据。</li><li><strong>64位 CPU</strong>：数据总线宽度为 64 位，每次可以传输 <strong>8 字节</strong> 数据。</li></ul><p><strong>影响</strong>：</p><ul><li><strong>传输效率</strong>：位数越高，每次数据传输的字节数越多，数据传输效率越高。</li><li><strong>带宽需求</strong>：更宽的数据总线需要更高的带宽支持，以维持高效的数据传输速率。</li></ul><h2 id="_2-地址总线宽度和内存寻址能力" tabindex="-1"><a class="header-anchor" href="#_2-地址总线宽度和内存寻址能力"><span>2. <strong>地址总线宽度和内存寻址能力</strong></span></a></h2><p><strong>定义</strong>：地址总线用于传输内存地址，决定了 CPU 可以直接寻址的内存空间大小。</p><p><strong>区别</strong>：</p><ul><li><strong>16位 CPU</strong>： <ul><li>地址总线宽度通常为 20 位（如 Intel 8086），通过分段机制扩展至 <strong>1 MB</strong> 地址空间。</li><li>现代 16位系统可能采用不同的地址扩展技术，但总体寻址能力有限。</li></ul></li><li><strong>32位 CPU</strong>： <ul><li>地址总线宽度为 <strong>32 位</strong>，可以直接寻址 <strong>4 GB</strong>（2³² 字节）内存。</li></ul></li><li><strong>64位 CPU</strong>： <ul><li>地址总线宽度通常为 <strong>48 位</strong> 至 <strong>52 位</strong>（具体取决于架构和实现），理论上可寻址 <strong>256 TB</strong>（2⁴⁸ 字节）至 <strong>4 PB</strong>（2⁵² 字节）内存。</li></ul></li></ul><p><strong>影响</strong>：</p><ul><li><strong>内存容量</strong>：更高位数的 CPU 支持更大容量的物理内存，有利于运行需要大量内存的应用（如数据库、虚拟化、科学计算）。</li><li><strong>内存管理</strong>：更大的地址空间允许更复杂和高效的内存管理策略，如分页、分段和虚拟内存。</li></ul><h2 id="_3-寄存器宽度-1" tabindex="-1"><a class="header-anchor" href="#_3-寄存器宽度-1"><span>3. <strong>寄存器宽度</strong></span></a></h2><p><strong>定义</strong>：寄存器是 CPU 内部用于存储临时数据的高速存储单元，其宽度决定了单次指令可以处理的数据大小。</p><p><strong>区别</strong>：</p><ul><li><strong>16位 CPU</strong>：拥有 16 位宽的寄存器，适合处理 16 位数据。</li><li><strong>32位 CPU</strong>：拥有 32 位宽的寄存器，适合处理 32 位数据。</li><li><strong>64位 CPU</strong>：拥有 64 位宽的寄存器，适合处理 64 位数据。</li></ul><p><strong>影响</strong>：</p><ul><li><strong>计算能力</strong>：寄存器宽度越大，单次指令能处理的数据越多，计算能力越强。</li><li><strong>数据类型支持</strong>：更宽的寄存器更适合处理大型数据类型，如 64 位整数、双精度浮点数等。</li></ul><h2 id="_4-内存单元对齐和访问效率" tabindex="-1"><a class="header-anchor" href="#_4-内存单元对齐和访问效率"><span>4. <strong>内存单元对齐和访问效率</strong></span></a></h2><p><strong>定义</strong>：内存对齐是指数据在内存中的存储地址必须满足特定的对齐规则（如 2 字节、4 字节、8 字节对齐）。</p><p><strong>区别</strong>：</p><ul><li><strong>16位 CPU</strong>：通常要求 2 字节对齐，减少内存访问次数。</li><li><strong>32位 CPU</strong>：通常要求 4 字节对齐，进一步提高访问效率。</li><li><strong>64位 CPU</strong>：通常要求 8 字节对齐，优化对大数据类型的访问。</li></ul><p><strong>影响</strong>：</p><ul><li><strong>性能</strong>：正确的对齐可以减少内存访问次数，提高缓存命中率和整体性能。</li><li><strong>兼容性</strong>：某些架构对对齐要求严格，不符合对齐规则可能导致性能下降甚至异常。</li></ul><h2 id="_5-指令集和内存操作" tabindex="-1"><a class="header-anchor" href="#_5-指令集和内存操作"><span>5. <strong>指令集和内存操作</strong></span></a></h2><p><strong>定义</strong>：不同位数的 CPU 通常伴随不同的指令集，影响如何操作内存。</p><p><strong>区别</strong>：</p><ul><li><strong>16位 CPU</strong>：指令集较为简单，内存操作通常以 16 位为单位。</li><li><strong>32位 CPU</strong>：指令集扩展，支持 32 位内存操作，提供更多的内存操作指令。</li><li><strong>64位 CPU</strong>：指令集进一步扩展，支持 64 位内存操作，提供更高效的内存管理指令，如大页支持、增强的虚拟化指令等。</li></ul><p><strong>影响</strong>：</p><ul><li><strong>编程效率</strong>：更丰富的指令集简化了编程，实现复杂内存操作更为高效。</li><li><strong>优化能力</strong>：高级指令（如 SIMD 指令）允许在内存操作中实现并行处理，提高性能。</li></ul><p>--</p><h1 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h1><h2 id="内存单元的基本概念" tabindex="-1"><a class="header-anchor" href="#内存单元的基本概念"><span><strong>内存单元的基本概念</strong></span></a></h2><p><strong>内存单元</strong>是计算机内存中存储单个字节数据的基本单位，每个内存单元都有唯一的地址。 <strong>字节对齐</strong>和<strong>寄存器宽度</strong>是影响内存单元访问效率和数据处理能力的重要因素。</p><h2 id="不同位数-cpu-内存单元的主要区别" tabindex="-1"><a class="header-anchor" href="#不同位数-cpu-内存单元的主要区别"><span><strong>不同位数 CPU 内存单元的主要区别</strong></span></a></h2><table><thead><tr><th><strong>特性</strong></th><th><strong>16位 CPU</strong></th><th><strong>32位 CPU</strong></th><th><strong>64位 CPU</strong></th></tr></thead><tbody><tr><td><strong>数据总线宽度</strong></td><td>16 位（每次传输 2 字节）</td><td>32 位（每次传输 4 字节）</td><td>64 位（每次传输 8 字节）</td></tr><tr><td><strong>地址总线宽度</strong></td><td>20 位（约 1 MB，使用分段机制）</td><td>32 位（4 GB）</td><td>48-52 位（256 TB - 4 PB）</td></tr><tr><td><strong>寄存器宽度</strong></td><td>16 位</td><td>32 位</td><td>64 位</td></tr><tr><td><strong>内存对齐要求</strong></td><td>2 字节对齐</td><td>4 字节对齐</td><td>8 字节对齐</td></tr><tr><td><strong>指令集复杂度</strong></td><td>较简单，操作以 16 位为主</td><td>中等，支持 32 位内存操作</td><td>复杂，支持 64 位内存操作及高级指令</td></tr><tr><td><strong>应用场景</strong></td><td>早期计算机、嵌入式系统、简单任务</td><td>个人电脑、早期服务器、中等性能应用</td><td>现代 PC、服务器、高性能计算、大数据处理</td></tr></tbody></table><h2 id="实际影响" tabindex="-1"><a class="header-anchor" href="#实际影响"><span><strong>实际影响</strong></span></a></h2><p><strong>性能</strong>：随着 CPU 位数的增加，内存单元的访问效率和数据处理能力显著提升，满足了现代应用对高性能和大内存的需求。 <strong>内存容量</strong>：64 位 CPU 支持的内存容量远超 16 位和 32 位 CPU，适应了大规模数据处理和多任务并行的需求。 <strong>编程与优化</strong>：更高位数的 CPU 提供了更丰富的指令集和优化手段，提升了编程效率和程序执行性能。</p><p>--</p><p><em>综上所述</em>*，内存单元作为计算机内存的基本存储单位，在不同位数的 CPU 架构中，其组织和处理方式随着位数的增加而变得更高效和灵活。16 位、32 位和 64 位 CPU 在数据总线宽度、地址总线宽度、寄存器宽度、内存对齐和指令集等方面的差异，决定了它们在性能、内存容量和应用场景上的不同表现。</p></blockquote><h2 id="_3-寄存器-内存访问" tabindex="-1"><a class="header-anchor" href="#_3-寄存器-内存访问"><span>3. 寄存器（内存访问）</span></a></h2><h3 id="_3-1-内存中字的存储" tabindex="-1"><a class="header-anchor" href="#_3-1-内存中字的存储"><span>3.1 内存中字的存储</span></a></h3><p>字单元的概念：字单元，即存放一个字形数据（16位，和CPU位数有关系）的内存单元，由两个地址连续的内存单元组成。高地址内存单元中存放字型数据的高位字节，低地址内存单元中存放字型数据的低位字节。</p><h3 id="_3-2-ds和-address" tabindex="-1"><a class="header-anchor" href="#_3-2-ds和-address"><span>3.2 DS和[address]</span></a></h3><p>CPU读内存单元的时候，要给出内存单元的地址，在8086CPU中，内存地址由段地址和偏移地址组成。</p><p>DS寄存器，用来存放要访问数据的段地址。</p><h3 id="_3-3-字的传送" tabindex="-1"><a class="header-anchor" href="#_3-3-字的传送"><span>3.3 字的传送</span></a></h3><h3 id="_3-4-mov-add-sub指令" tabindex="-1"><a class="header-anchor" href="#_3-4-mov-add-sub指令"><span>3.4 mov,add,sub指令</span></a></h3><p>现在CPU中16位、32位、64位系统中，内存中地址单元和地址字单元的存储？</p><blockquote><p>在谈及 <strong>16 位、32 位、64 位系统</strong>时，很多人会把“CPU 位数”与“内存地址单元”、“数据存储单元”这些概念混在一起。其实，从 8 位机开始，绝大部分现代通用计算机体系结构都采用 <strong>“按字节（Byte）寻址”</strong> 的方式（即 <strong>byte-addressable</strong>），而 <strong>CPU 的位数</strong> 则主要决定了“<strong>一次</strong>能处理多少位的数据”和“<strong>地址总线</strong>（可寻址空间）多宽”，并不改变<strong>最小可寻址单位依旧是字节</strong>这一事实。下面从几个角度来回答“16位、32位、64位系统中，内存中地址单元和地址字单元的存储”这个问题。</p><hr><h2 id="_1-最小可寻址单位-字节-byte" tabindex="-1"><a class="header-anchor" href="#_1-最小可寻址单位-字节-byte"><span>1. 最小可寻址单位：<strong>字节（Byte）</strong></span></a></h2><ul><li><p><strong>共同点</strong>：<br> 无论是 16 位、32 位还是 64 位的 CPU，内存中 <strong>最小的“地址单元”都是 1 个字节</strong>。也就是说，内存地址 <code>0x0000</code> 和 <code>0x0001</code> 指向的是两个不同的字节。CPU 通过地址总线上的二进制数来选中某一个字节的存储单元。</p></li><li><p><strong>原因</strong>：<br> 早期（更早于 8 位机时代）可能出现过“位寻址”或“字寻址”的特殊体系结构，但在 现代通用计算机 中，<strong>“字节寻址”</strong> 成为事实标准，因为字节（8 bits）在数据表示上最为通用（一个 ASCII 字符正好占 1 字节）且灵活。</p></li></ul><hr><h2 id="_2-cpu-位数-与-字-word-的概念" tabindex="-1"><a class="header-anchor" href="#_2-cpu-位数-与-字-word-的概念"><span>2. CPU “位数” 与 “字（Word）” 的概念</span></a></h2><ol><li><p><strong>CPU 位数</strong></p><ul><li><strong>16 位 CPU</strong>：一次能处理（或寄存器宽度）是 16 位，数据总线一般也是 16 位。</li><li><strong>32 位 CPU</strong>：一次能处理 32 位数据，数据总线一般是 32 位。</li><li><strong>64 位 CPU</strong>：一次能处理 64 位数据，数据总线通常是 64 位。</li></ul></li><li><p><strong>“字（Word）”的大小</strong></p><ul><li>在 CPU 内部，所谓的 “一个字(Word)” 通常指 CPU 最擅长或最自然处理的数据宽度。</li><li>对于 <strong>16 位 CPU</strong>，一个“字”就是 16 bits（2 字节）；</li><li>对于 <strong>32 位 CPU</strong>，一个“字”就是 32 bits（4 字节）；</li><li>对于 <strong>64 位 CPU</strong>，一个“字”就是 64 bits（8 字节）。</li></ul></li><li><p><strong>为什么不直接用“字”做最小寻址单位？</strong></p><ul><li>如果采用“字”寻址，那么在 16 位系统中，地址 <code>0x0001</code> 指向的就不是下一个字节，而是下一个 16 位单元。这样在处理字节级别的数据时就会相当麻烦。</li><li>所以现代主流体系结构都坚持 “<strong>字节</strong>” 作为最小地址单位，而 “<strong>字</strong>” 只是 CPU 自身的自然处理宽度，跟地址空间组织是两件事。</li></ul></li></ol><hr><h2 id="_3-地址总线宽度与可寻址空间" tabindex="-1"><a class="header-anchor" href="#_3-地址总线宽度与可寻址空间"><span>3. 地址总线宽度与可寻址空间</span></a></h2><ol><li><p><strong>16 位系统</strong></p><ul><li>经典例子：Intel 8086 虽然是 16 位处理器，但最初的地址总线是 20 位（通过分段机制组合出 20 位地址线），可寻址 1 MB（(2^{20} = 1,048,576) 字节）的内存。</li><li>如果真的是纯粹 16 位地址总线（没有分段扩展），那就是 (2^{16} = 65536) 字节，也就是 64 KB 的地址空间。</li></ul></li><li><p><strong>32 位系统</strong></p><ul><li>通常拥有 32 位的地址总线，就能够直接寻址 (2^{32} = 4,294,967,296) 字节，也就是 <strong>4 GB</strong> 内存空间。</li><li>这也是 32 位操作系统在不借助特殊扩展（如 PAE）时，用户态进程能用的内存上限常常在 2~3 GB 左右（还得留一点给内核）。</li></ul></li><li><p><strong>64 位系统</strong></p><ul><li>理论上拥有 64 位地址线可寻址 (2^{64} = 16) EB（ExaBytes）的内存，但实际 CPU、主板、操作系统并不会实现全部 64 根物理地址线。</li><li>目前常见的 x86-64 实现物理地址线在 48~52 位左右，对应的物理内存上限为 <strong>256 TB</strong> ~ <strong>4 PB</strong>。</li><li>即便如此，也远超普通桌面或服务器的内存需求，给未来扩展留了很大余量。</li></ul></li></ol><hr><h2 id="_4-内存中如何存储-地址-本身" tabindex="-1"><a class="header-anchor" href="#_4-内存中如何存储-地址-本身"><span>4. 内存中如何存储“地址”本身</span></a></h2><ul><li><strong>存储地址所需的字节数</strong><ul><li>16 位系统：如果要在程序中保存一个地址，就需要 16 位（2 字节）来存这个地址值。</li><li>32 位系统：需要 32 位（4 字节）来存一个地址。</li><li>64 位系统：需要 64 位（8 字节）来存一个地址。</li></ul></li><li><strong>在内存中，这些地址依旧是以字节为单位顺次存储</strong><ul><li>例如，在 x86（小端序）平台上，假设某个指针（地址）值是 <code>0x12345678</code>（32 位），它会在内存中以字节的顺序存放为 <code>78 56 34 12</code>（从低地址到高地址依次为 78、56、34、12）。</li></ul></li></ul><hr><h2 id="_5-对齐与存取效率" tabindex="-1"><a class="header-anchor" href="#_5-对齐与存取效率"><span>5. 对齐与存取效率</span></a></h2><ul><li><strong>对齐（Alignment）</strong><ul><li>通常 16 位系统更注重 <strong>2 字节对齐</strong>，32 位系统常见 <strong>4 字节对齐</strong>，64 位系统则常见 <strong>8 字节对齐</strong>。</li><li>即如果数据类型是一个 32 位整数，在 32 位系统上最好放在地址能被 4 整除的地方；在 64 位系统上，若是 64 位整数或指针，最好放在能被 8 整除的地址上。</li></ul></li><li><strong>好处</strong>： <ul><li>对齐可以让 CPU 一次取数（对齐的数据）就能完成对该数据的读取，无需额外的拆分或拼接，大大提高访问效率。</li></ul></li></ul><hr><h2 id="_6-小结" tabindex="-1"><a class="header-anchor" href="#_6-小结"><span>6. 小结</span></a></h2><ol><li><p><strong>内存“地址单元”仍然是字节</strong></p><ul><li>这在 16 位、32 位、64 位系统中都相同，都是 <strong>“byte-addressable”</strong>。</li></ul></li><li><p><strong>CPU 位数决定“自然字宽度”、能一次处理的数据大小，以及最大寻址能力</strong></p><ul><li>16 位 CPU 每次擅长处理 16 位（2 字节）；</li><li>32 位 CPU 每次擅长处理 32 位（4 字节）；</li><li>64 位 CPU 每次擅长处理 64 位（8 字节）。</li><li>同时，地址总线决定最大可寻址空间大小。</li></ul></li><li><p><strong>“地址字单元”指的是存储一个完整地址所需的宽度</strong></p><ul><li>16 位系统存放一个地址需 2 字节；</li><li>32 位系统需要 4 字节；</li><li>64 位系统需要 8 字节。</li><li>这些字节也依旧是以“字节”的形式顺序存放在内存里（可能涉及大小端）。</li></ul></li><li><p><strong>对齐与效率</strong></p><ul><li>CPU 位数越高，通常需要更宽的对齐边界才能最高效地读取/写入数据。</li><li>但从本质看，最小可寻址单位依旧是“1 字节”。</li></ul></li></ol><hr><h3 id="核心总结" tabindex="-1"><a class="header-anchor" href="#核心总结"><span>核心总结</span></a></h3><ul><li><strong>“按字节寻址”是一条“金科玉律”</strong>——在当今主流 CPU（无论 16、32 还是 64 位）里，都保持最小地址单元=1 字节。</li><li><strong>CPU 位数</strong> 更多影响的是 <strong>一次处理数据的位宽</strong> 以及 <strong>地址总线的宽度</strong>，进而影响 <strong>可用内存容量</strong>、<strong>处理效率</strong>、<strong>对齐要求</strong> 等。</li><li>当我们说“16 位、32 位或 64 位”系统时，并不代表“内存中一单元就是 2 字节、4 字节或 8 字节”，而是指 CPU“自然处理字长”和“地址总线/寄存器宽度”的变化；<strong>内存仍然是一字节一字节地被寻址</strong>。</li></ul></blockquote><h3 id="_3-5-数据段" tabindex="-1"><a class="header-anchor" href="#_3-5-数据段"><span>3.5 数据段</span></a></h3><p>一个字型数据在16位CPU中，占两个单元，所以偏移地址是0，2，4。</p><h3 id="_3-5-小结" tabindex="-1"><a class="header-anchor" href="#_3-5-小结"><span>3.5 小结</span></a></h3><p>在内存和寄存器之间传送字型数据时，高地址单元和高8位寄存器、低地址单元和低8位寄存器相对应。</p><h3 id="_3-6-栈" tabindex="-1"><a class="header-anchor" href="#_3-6-栈"><span>3.6 栈</span></a></h3><h3 id="_3-7-cpu提供的栈机制" tabindex="-1"><a class="header-anchor" href="#_3-7-cpu提供的栈机制"><span>3.7 CPU提供的栈机制</span></a></h3><p>将某一段内存当做栈使用。</p><p>8086CPU的入栈和出栈都是以字为单位进行的。</p><p>CS:IP中存放着当前指令的段地址和偏移地址。</p><p>SS:SP指向栈顶元素，栈顶的段地址存放在SS中，偏移地址存放在SP中。</p><p>pop SP=SP+2 push SP=SP-2</p><h3 id="_3-8-栈顶超界问题" tabindex="-1"><a class="header-anchor" href="#_3-8-栈顶超界问题"><span>3.8 栈顶超界问题</span></a></h3><p>8086CPU需要自己处理栈顶超界的问题。</p><h3 id="_3-9-push-pop-指令" tabindex="-1"><a class="header-anchor" href="#_3-9-push-pop-指令"><span>3.9 push，pop 指令</span></a></h3><h3 id="_3-10-栈段" tabindex="-1"><a class="header-anchor" href="#_3-10-栈段"><span>3.10 栈段</span></a></h3><h3 id="_3-10-段的综述" tabindex="-1"><a class="header-anchor" href="#_3-10-段的综述"><span>3.10 段的综述</span></a></h3><p>用一个段存放数据 - 数据段 用一个段存放代码 - 代码段 用一个段当做栈 - 栈段</p><p>对于数据段，将他的段地址放在DS中，用mov，add，sub等访问内存单元的指令时，CPU就将我们定义的数据段中的内容当做数据来访问。 对于代码段，将他的段地址放在CS中，将段中的第一条指令的偏移地址放在IP中，这样CPU就将执行我们定义代码段中的指令。 对于栈段，将他的段地址放在SS中，将栈顶单元你的偏移地址放在SP中，这样push、pop指令，就会将我们定义的栈段当做栈空间使用。</p><p>CPU将内存中的某段内容当做代码，是因为CS:IP指向了那里。 CPU将内存中某段内容当做栈，是因为SS:SP指向了那里。</p><p>PUSH和POP实质上是一种内存传送指令。</p><p>64KB = 65536 = 0xFFFF = 64*1024</p><h3 id="_3-2-检测点" tabindex="-1"><a class="header-anchor" href="#_3-2-检测点"><span>3.2 检测点</span></a></h3><p>https://blog.csdn.net/fencecat/article/details/113751759</p><h2 id="_4-第一个程序" tabindex="-1"><a class="header-anchor" href="#_4-第一个程序"><span>4. 第一个程序</span></a></h2><h3 id="_4-1-一个源程序从写出到执行的过程" tabindex="-1"><a class="header-anchor" href="#_4-1-一个源程序从写出到执行的过程"><span>4.1 一个源程序从写出到执行的过程</span></a></h3><ol><li>编写汇编源程序</li><li>对源程序进行编译连接。用编译程序编译源文件，产生目标文件；再用连接程序对目标文件进行连接，生成可执行文件。 <ol><li>程序（从源程序中汇编指令翻译过来的机器码）和数据（源程序中定义的数据）</li><li>相关的描述信息（程序有多大，占用多少内存空间）</li></ol></li><li>执行可执行文件中的程序。</li></ol><p>操作系统依照可执行文件中的描述信息，将可执行文件中的机器码和数据加载入内存，并进行相关的初始化（CS:IP，指向第一条要执行的指令），然后CPU执行。</p><h3 id="_4-2-源程序" tabindex="-1"><a class="header-anchor" href="#_4-2-源程序"><span>4.2 源程序</span></a></h3><p>汇编语言：</p><ul><li>汇编指令，有对应机器码的指令。</li><li>伪指令，没有对应机器码，不会被CPU执行。编译器来执行伪指令。</li></ul><p>assume:</p><ul><li>假设某一寄存器和程序中的某一个segment...ends定义的段相关联。</li></ul><p>程序：</p><ul><li>程序最先以汇编指令的形式存在源程序中，经过编译、连接后转变位机器码，存储在可执行文件中。</li></ul><p>标号：</p><ul><li>一个标号指代了一个地址。最终将被编译、连接程序处理位一个段的段地址。</li></ul><h3 id="_4-3-编辑源程序" tabindex="-1"><a class="header-anchor" href="#_4-3-编辑源程序"><span>4.3 编辑源程序</span></a></h3><h3 id="_4-4-编译" tabindex="-1"><a class="header-anchor" href="#_4-4-编译"><span>4.4 编译</span></a></h3><p>经过编译之后，编译器masm.exe的目录出现一个新的1.obj文件，这是对源程序1.asm进行编译得到的结果。</p><p>在编译过程中，提供一个源程序文件，可以得到：目标文件.obj，列表文件.lst，交叉引用文件.crf。</p><h3 id="_4-5-连接" tabindex="-1"><a class="header-anchor" href="#_4-5-连接"><span>4.5 连接</span></a></h3><p>学习汇编的主要目的：</p><ul><li>就是通过汇编语言进行编程而深入的理解计算机底层的基本工作机理，达到可以随心所欲的控制计算机的目的。</li></ul><p>编辑器-edit 编译器-masm 连接器-link 调试工具-debug</p><p>连接的作用：</p><ul><li>当源程序很大时，将他氛围多个源程序文件来编译，每个源程序编译成为目标文件后，再用连接程序将他们连接到一起，生成一个可执行文件。</li><li>程序中调用了某个库中的子程序，需要将这个库文件和该程序生成的目标文件连接到一起，生成一个可执行文件。</li><li>一个源程序编译后，得到了存有机器码的目标程序，目标文件中的有些内容还不能够直接用来生成可执行文件。</li></ul><h3 id="_4-6-以简化的方式进行编译和连接" tabindex="-1"><a class="header-anchor" href="#_4-6-以简化的方式进行编译和连接"><span>4.6 以简化的方式进行编译和连接</span></a></h3><p>masm demo1.asm;</p><h3 id="_4-7-exe的执行" tabindex="-1"><a class="header-anchor" href="#_4-7-exe的执行"><span>4.7 exe的执行</span></a></h3><h3 id="_4-8-谁将可执行文件中的程序装在进入内存并使它运行" tabindex="-1"><a class="header-anchor" href="#_4-8-谁将可执行文件中的程序装在进入内存并使它运行"><span>4.8 谁将可执行文件中的程序装在进入内存并使它运行？</span></a></h3><p>汇编程序从写出到执行的过程</p><ul><li>edit -&gt; 1.asm -&gt; masm -&gt; 1.obj -&gt; link -&gt; 1.exe -&gt; command -&gt; 内存中的程序 -&gt; CPU</li></ul><h3 id="_4-9-程序执行过程的跟踪" tabindex="-1"><a class="header-anchor" href="#_4-9-程序执行过程的跟踪"><span>4.9 程序执行过程的跟踪</span></a></h3><p>汇编语言-王爽 第四版中的这段话，我不理解，帮我重新解释一下。?</p><blockquote><p>下面我先把原文逐句拆开，然后用更通俗的语言来解释它到底在讲什么。原文内容是（略有改动，但核心意思不变）：</p><hr><p>1）“程序加载后，<code>ds</code> 中存放着程序所在内存区的段地址，这个内存区的偏移地址为 0，则程序所在的内存区的地址为 <code>ds:0</code>。”</p><p>2）“这个内存区的前 256 个字节中存放的是 PSP（Program Segment Prefix），DOS 用来和程序进行通信。从 256 字节处（也就是偏移量 100H）开始存&gt; 放的才是程序。”</p><blockquote><p>所以，从 <code>ds</code> 可以得到 PSP 的段地址为 <code>SA</code>，PSP 的偏移地址为 0，则 PSP 的物理地址为 <code>SA × 16 + 0</code>。<br> 因为 PSP 占 256（100H）字节，所以程序的物理地址就是：<br> [ SA \\times 16 + 256 ;=; SA \\times 16 + 16 \\times 16 ;=; (SA + 16) \\times 16 + 0 ]<br> 可用段地址和偏移地址表示为：<code>(SA + 10H):0</code>。</p></blockquote><hr><h2 id="重新解释这段话的来龙去脉" tabindex="-1"><a class="header-anchor" href="#重新解释这段话的来龙去脉"><span><strong>重新解释这段话的来龙去脉</strong></span></a></h2><ol><li><p><strong>程序加载位置</strong><br> 当 DOS 把一个可执行程序加载到内存里时，会设置好 <code>DS</code> 段寄存器，使它指向“程序的根基”所在的那一段。与此同时，程序起始的偏移默认是 <code>0</code>。</p><ul><li>也就是说，“程序所在的内存区”的入口是 <code>ds:0</code>。</li><li>但这里有个“细节”：在 DOS 下，真正程序指令并不是立刻从 <code>ds:0</code> 开始放的，而是留出了 256 字节给 PSP。</li></ul></li><li><p><strong>什么是 PSP（Program Segment Prefix）？</strong></p><ul><li>PSP 是 DOS 留给每个程序的一个“前置块”，大小固定 256 字节（也就是 100H）。</li><li>DOS 会在这 256 字节里存放一些和当前程序相关的环境信息、跳转入口、中断处理地址之类的内容，用于实现“程序与 DOS 之间的通信”。</li></ul></li><li><p><strong>程序真正的代码放在哪里？</strong></p><ul><li>因为 PSP 占了从段基址（<code>ds:0</code>）开始的前 256 字节，所以程序的代码要从 <strong>偏移地址</strong> <code>100H</code> 才正式开始存放。</li><li>换句话说，假设 <code>ds=SA</code>，那么程序代码的物理地址其实从<br> [ SA \\times 16 + 100H ]<br> 这个位置才开始。</li></ul></li><li><p><strong>为什么最后给出 <code>(SA+10H):0</code> 这样的段：偏移表示？</strong></p><ul><li>在 8086 中，物理地址 = 段地址 × 16 + 偏移地址。</li><li>PSP 的起始物理地址是 <code>SA × 16</code>；它占 256 字节（100H）。</li><li>程序起始物理地址就是 <code>SA × 16 + 100H</code>。</li><li>但是你也可以把同一个物理地址表示成另外一个段：偏移组合：<br> [ (SA + 10H) \\times 16 + 0 = SA \\times 16 + 10H \\times 16 + 0 = SA \\times 16 + 100H ]</li><li>所以，程序起始的物理地址“等价”地可以写成 <code>(SA+10H):0</code>。</li></ul></li></ol><h3 id="举个-门牌号-类比" tabindex="-1"><a class="header-anchor" href="#举个-门牌号-类比"><span><strong>举个“门牌号”类比</strong></span></a></h3><ul><li>可以把“物理地址”想象成一个实际的门牌号，比如“XX 街 123 号”。</li><li>“段地址 × 16 + 偏移地址”就像“<strong>街区编号</strong> + <strong>巷内门牌</strong>”的组合，最后能找到同一个实际地址。</li><li>一栋大楼（段地址）从“0 楼”开始往上算（偏移地址），但如果你想从第 16 层（10H 楼）开始，也可以说这是另一栋楼（段地址 + 10H），从 0 层开&gt; 始。这两种描述实际上指向同一个物理位置。</li></ul><hr><h2 id="结论与要点" tabindex="-1"><a class="header-anchor" href="#结论与要点"><span><strong>结论与要点</strong></span></a></h2><ol><li><code>DS:0</code> 并不一定就是你程序的第一条指令所在位置；在 DOS 环境下，前 100H 个字节给了 PSP 用。</li><li>程序的真正入口往往是 <code>DS:100H</code>。</li><li>同一个物理地址可以有多种“段:偏移”的写法。把程序起始地址写成 <code>(DS+10H):0</code> 在计算上等价于 <code>DS:100H</code>，都是指向相同的物理地址。</li></ol><p>以上就是这段话的核心含义：**DOS 会在程序前预留 100H 字节给 PSP，而程序真正的起始（物理）地址可以通过计算发现，它“等效于”把段地址往前加 &gt; 10H，然后偏移清零。**这样做在汇编中很常见，也是一种灵活运用“段：偏移”机制的体现。</p></blockquote><p>“大小固定 256 字节（也就是 100H）”，这段话我不理解， 256个字节不应该是0xFF么？为什么是0x100?</p><blockquote><p>这是一个<strong>进制转换</strong>的问题：</p><ul><li><strong>256</strong> 在<strong>十进制</strong>是 <strong>256</strong>。</li><li>把 <strong>256</strong> 转换成<strong>十六进制</strong>时，结果是 <strong>0x100</strong>。</li><li>而 <strong>0xFF</strong>（十六进制）等于 <strong>255</strong>（十进制），比 256 小 1。</li></ul><p>因此，<strong>256</strong>（十进制）对应的<strong>十六进制</strong>不是 <strong>0xFF</strong>，而是 <strong>0x100</strong>。这是因为：</p><ul><li>0xFF = (15 × 16¹) + (15 × 16⁰) = 255</li><li>0x100 = (1 × 16²) + (0 × 16¹) + (0 × 16⁰) = 256</li></ul><p>所以当我们说 “大小固定 256 字节（也就是 100H）” 时，指的就是：</p><ul><li>256 (十进制) = 0x100 (十六进制)</li></ul><p>而不是 0xFF。</p></blockquote><h2 id="实验-3-编程、编译、连接、跟踪" tabindex="-1"><a class="header-anchor" href="#实验-3-编程、编译、连接、跟踪"><span>实验 3 编程、编译、连接、跟踪</span></a></h2><p>为什么上述汇编程序执行完毕后， AX BX交换了数据？</p><blockquote><p>先大致看一下这段程序的核心指令（与栈操作相关的部分）：</p><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mov ax,2000H</span></span>
<span class="line"><span>mov ss,ax</span></span>
<span class="line"><span>mov sp,0</span></span>
<span class="line"><span>add sp,10     ; SP = 0010H</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pop ax</span></span>
<span class="line"><span>pop bx</span></span>
<span class="line"><span>push ax</span></span>
<span class="line"><span>push bx</span></span>
<span class="line"><span>pop ax</span></span>
<span class="line"><span>pop bx</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mov ax,4C00H</span></span>
<span class="line"><span>int 21H</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 <code>mov ss,ax</code> 到 <code>add sp,10</code> 这几条指令只是设置了栈段(SS=2000H)和栈顶指针(SP=0010H)，<strong>真正导致 AX 与 BX 互换</strong>的关键是下面这六条指令(可以把它们拆分成三组 pop/push/push/pop 操作来理解)：</p><ol><li><code>pop ax</code></li><li><code>pop bx</code></li><li><code>push ax</code></li><li><code>push bx</code></li><li><code>pop ax</code></li><li><code>pop bx</code></li></ol><p>下面按顺序分析寄存器与栈顶(SP)的变化。为了更直观，我们用「栈」的图示来表示每一次操作。初始时 SP=0010H。</p><hr><h2 id="_1-pop-ax" tabindex="-1"><a class="header-anchor" href="#_1-pop-ax"><span>1）pop ax</span></a></h2><ul><li><p>作用：从栈顶取出 2 字节赋给 AX，然后 SP 向上增加 2（栈在 x86 中是“向下生长”，pop 会增加 SP）。</p></li><li><p>前后状态（假设内存中的内容我们称之为 val1、val2 等）：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  SS:SP=2000:0010  &lt;-- 栈顶（未知内容 val1）</span></span>
<span class="line"><span>  SS:0012          &lt;-- (未知内容 val2)</span></span>
<span class="line"><span>  SS:0014</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ; 执行 pop ax</span></span>
<span class="line"><span>  AX &lt;- [2000:0010]  (取到 val1)</span></span>
<span class="line"><span>  SP = 0012</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行完毕后：AX = val1，SP=0012H。</p></li></ul><hr><h2 id="_2-pop-bx" tabindex="-1"><a class="header-anchor" href="#_2-pop-bx"><span>2）pop bx</span></a></h2><ul><li><p>作用：从栈顶（此时的 SP=0012H）取 2 字节赋给 BX，SP 再向上增加 2。</p></li><li><p>前后状态：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  SS:SP=2000:0012  &lt;-- 栈顶（未知内容 val2）</span></span>
<span class="line"><span>  SS:0014</span></span>
<span class="line"><span>  SS:0016</span></span>
<span class="line"><span>  ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ; 执行 pop bx</span></span>
<span class="line"><span>  BX &lt;- [2000:0012]  (取到 val2)</span></span>
<span class="line"><span>  SP = 0014</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行完毕后：BX = val2，SP=0014H。</p></li></ul><hr><h2 id="_3-push-ax" tabindex="-1"><a class="header-anchor" href="#_3-push-ax"><span>3）push ax</span></a></h2><ul><li><p>作用：将 AX 的内容压入栈中，即 [SS:SP - 2] &lt;- AX，SP 减 2。</p></li><li><p>前后状态：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  原先 SP=0014，执行 push ax 之后：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  SP = 0012</span></span>
<span class="line"><span>  [2000:0012] &lt;- AX (即 val1)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行完毕后：栈顶(0012H)中存放了 val1，SP=0012H。</p></li></ul><hr><h2 id="_4-push-bx" tabindex="-1"><a class="header-anchor" href="#_4-push-bx"><span>4）push bx</span></a></h2><ul><li><p>作用：将 BX 的内容压入栈中，即 [SS:SP - 2] &lt;- BX，SP 减 2。</p></li><li><p>前后状态：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  原先 SP=0012，执行 push bx 之后：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  SP = 0010</span></span>
<span class="line"><span>  [2000:0010] &lt;- BX (即 val2)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>执行完毕后：栈顶(0010H)中存放了 val2，SP=0010H。</p></li></ul><p>此时的栈布局大致如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>栈顶→ [2000:0010] = val2</span></span>
<span class="line"><span>       [2000:0012] = val1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-pop-ax" tabindex="-1"><a class="header-anchor" href="#_5-pop-ax"><span>5）pop ax</span></a></h2><ul><li><p>作用：将当前栈顶 [2000:0010] 中的内容(即 val2) 弹出给 AX，SP += 2。</p></li><li><p>前后状态：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  AX &lt;- val2</span></span>
<span class="line"><span>  SP = 0012</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h2 id="_6-pop-bx" tabindex="-1"><a class="header-anchor" href="#_6-pop-bx"><span>6）pop bx</span></a></h2><ul><li><p>作用：将当前栈顶 [2000:0012] 中的内容(即 val1) 弹出给 BX，SP += 2。</p></li><li><p>前后状态：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  BX &lt;- val1</span></span>
<span class="line"><span>  SP = 0014</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>到这里，原来最开始弹出来时 <code>AX=val1</code>，<code>BX=val2</code>，经过这番「pop/push/push/pop」后，<strong>AX 里变成了 val2，BX 里变成了 val1</strong>。也就是说，<strong>AX 与 BX 的内容被交换了</strong>。</p><hr><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h1><ul><li>这段代码用「栈」作为中介，先 <code>pop ax/pop bx</code> 得到初始的 AX/BX，再 <code>push ax/push bx</code>、<code>pop ax/pop bx</code> 来完成交换。</li><li>之所以程序结束后看起来「AX、BX 的数据被互换了」，就是因为这几条 <code>pop/push</code> 的组合恰好实现了一个 <strong>swap</strong> 效果。</li><li>这是一种比较“绕”的交换方法，但在有些场合可能会用到（尤其在不用专门的交换指令时）。</li></ul><p>因此，当你调试跟踪完 <code>t1.exe</code> 后会发现，最初保存在「栈顶」的那两个字(最先弹到 AX、BX 里的值) 在最后执行完所有指令之后，其实已经「对调」到了 AX、BX 中。</p></blockquote><h2 id="_5-bx-和loop指令" tabindex="-1"><a class="header-anchor" href="#_5-bx-和loop指令"><span>5. [BX]和loop指令</span></a></h2><ul><li>[bx]和内存单元的描述 <ul><li>内存单元：内存单元的地址；内存单元的长度（类型）</li></ul></li><li>loop</li><li>():表示一个寄存器或者一个内存单元中的内容 <ul><li>三种类型： <ul><li>寄存器名</li><li>内存单元的物理地址</li></ul></li><li>(ax) (ds) (al) (cx) (20000h) ((ds)*16+(bx))</li></ul></li></ul><h3 id="_5-1-bx" tabindex="-1"><a class="header-anchor" href="#_5-1-bx"><span>5.1 [BX]</span></a></h3><p>bx中存放的数据作为一个偏移地址EA，段地址SA默认在DS中，将SA:EA处的数据送入ax中，即：(ax) = ((ds)*16+(bx)) mov ax,[bx]</p><p>bx中存放的数据作为一个偏移地址EA，段地址SA默认在DS中，将ax中的数据送入内存SA:EA处，即：((ds)*16+(bx))=(ax)</p><h3 id="_5-2-loop指令" tabindex="-1"><a class="header-anchor" href="#_5-2-loop指令"><span>5.2 Loop指令</span></a></h3><p>loop格式：</p><ul><li>loop 标号</li></ul><p>loop执行：</p><ul><li>(cx)=(cx)-1</li><li>判断cx中的值，不为零则转至标号处执行程序，为零则向下执行。</li></ul><p>通常使用loop指令来实现循环，cx中存放循环次数。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code</span></span>
<span class="line"><span>  code segment</span></span>
<span class="line"><span>    mov ax,2</span></span>
<span class="line"><span>    mov cx,11</span></span>
<span class="line"><span>  s: add ax,ax</span></span>
<span class="line"><span>    loop s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    mov ax,4C00H</span></span>
<span class="line"><span>    int 21h</span></span>
<span class="line"><span>  ends</span></span>
<span class="line"><span>end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标号：</p><ul><li>在汇编语言中，标号代表一个地址，他实际上标识了一个地址，这个地址处有一条指令：add ax,ax</li></ul><p>loop s:</p><ul><li>CPU执行loop s的时候，要进行两步操作： <ul><li>(cx)=(cx)-1</li><li>判断cx的值，不为0则转至标号s处所标识的地址处执行，如果为0则执行下一条指令。</li></ul></li></ul><p>用cx和loop指令配合实现循环功能的程序框架如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  mov cx,循环次数</span></span>
<span class="line"><span>s:</span></span>
<span class="line"><span>  循环执行的程序段</span></span>
<span class="line"><span>  loop s</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-在debug中跟踪用loop指令实现的循环程序" tabindex="-1"><a class="header-anchor" href="#_5-3-在debug中跟踪用loop指令实现的循环程序"><span>5.3 在Debug中跟踪用loop指令实现的循环程序</span></a></h3><h3 id="_5-4-debug和汇编编译器masm对指令的不同处理" tabindex="-1"><a class="header-anchor" href="#_5-4-debug和汇编编译器masm对指令的不同处理"><span>5.4 Debug和汇编编译器masm对指令的不同处理</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mov al,ds:[0] ; (al)=((ds)*16+0)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_5-5-loop和-bx-的联合应用" tabindex="-1"><a class="header-anchor" href="#_5-5-loop和-bx-的联合应用"><span>5.5 loop和[bx]的联合应用</span></a></h3><h3 id="_5-6-段前缀" tabindex="-1"><a class="header-anchor" href="#_5-6-段前缀"><span>5.6 段前缀</span></a></h3><p>用于显示的指明内存单元的段地址的ds: cs: ss: es:，称为段前缀</p><h3 id="_5-7-一段安全的空间" tabindex="-1"><a class="header-anchor" href="#_5-7-一段安全的空间"><span>5.7 一段安全的空间</span></a></h3><p>0:200~0:2FF这段是安全空间</p><h3 id="_5-8-段前缀的使用" tabindex="-1"><a class="header-anchor" href="#_5-8-段前缀的使用"><span>5.8 段前缀的使用</span></a></h3><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:code </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code segment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">12</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">  mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0ffffh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0020H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">dl</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4C00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:code </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code segment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0ffffh</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0020H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> es</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">12</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">  mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> dl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> es</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">dl</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4C00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实验4-bx-和loop的使用" tabindex="-1"><a class="header-anchor" href="#实验4-bx-和loop的使用"><span>实验4 [bx]和loop的使用</span></a></h2><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:code </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">64</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">  mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4C00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code ends</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:code </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0020H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">64</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">  mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4C00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code ends</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:code </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0020H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> es</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">17</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">  mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> es</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4C00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 24h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code ends</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ends</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-包含多个段的程序" tabindex="-1"><a class="header-anchor" href="#_6-包含多个段的程序"><span>6. 包含多个段的程序</span></a></h2><h3 id="_6-1-在代码段中使用数据" tabindex="-1"><a class="header-anchor" href="#_6-1-在代码段中使用数据"><span>6.1 在代码段中使用数据</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code</span></span>
<span class="line"><span></span></span>
<span class="line"><span>dw 0123h, 0456h, 0789h, 0abch,0defh,0fedh,0cbah,0987h</span></span>
<span class="line"><span></span></span>
<span class="line"><span>start:      mov bx,0</span></span>
<span class="line"><span>            mov ax,0</span></span>
<span class="line"><span>            mov cx,8</span></span>
<span class="line"><span>      s:    add ax,cs:[bx]</span></span>
<span class="line"><span>            add bx,2</span></span>
<span class="line"><span>            loop s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            mov ax,4c00H</span></span>
<span class="line"><span>            int 21H</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如何知道那一条指令是程序的第一条要执行的指令？ 由可执行文件中的描述信息指明的。</p><p>可执行文件由描述信息和程序组成，程序来自于源程序中的汇编指令和定义的数据；描述信息则主要是编译、连接程序对源程序中相关伪指令进行处理所得到的信息。</p><h3 id="_6-2-在代码段中使用栈" tabindex="-1"><a class="header-anchor" href="#_6-2-在代码段中使用栈"><span>6.2 在代码段中使用栈</span></a></h3><h3 id="_6-3-将数据、代码、栈放入不同的段" tabindex="-1"><a class="header-anchor" href="#_6-3-将数据、代码、栈放入不同的段"><span>6.3 将数据、代码、栈放入不同的段</span></a></h3><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:code,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:data,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:stack</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data segment</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        dw</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0123h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0456h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0789h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0abch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0defh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0fedh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0cbah</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0987h</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stack segment</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        dw</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stack ends</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code segment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">  mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,stack</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> sp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,data</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  s0:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">   pop</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4C00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实验5-编写、调试具有多个段的程序" tabindex="-1"><a class="header-anchor" href="#实验5-编写、调试具有多个段的程序"><span>实验5 编写、调试具有多个段的程序</span></a></h3><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_7-0-更灵活的定位内存地址的方法" tabindex="-1"><a class="header-anchor" href="#_7-0-更灵活的定位内存地址的方法"><span>7.0 更灵活的定位内存地址的方法</span></a></h2><h3 id="_7-1-and-和-or-指令" tabindex="-1"><a class="header-anchor" href="#_7-1-and-和-or-指令"><span>7.1 and 和 or 指令</span></a></h3><p>and指令，逻辑与指令，按位进行与运算</p><p>mov al,01100011B and al,00111011B</p><p>-&gt; al=01000011B</p><p>or指令，逻辑或指令，按位进行或运算</p><p>mov al,01100011B or al,00111011B</p><p>-&gt; al=01111011B</p><h3 id="_7-2-关于ascii码" tabindex="-1"><a class="header-anchor" href="#_7-2-关于ascii码"><span>7.2 关于ASCII码</span></a></h3><h3 id="_7-3-以字符形式给出的数据" tabindex="-1"><a class="header-anchor" href="#_7-3-以字符形式给出的数据"><span>7.3 以字符形式给出的数据</span></a></h3><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:code,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data segment</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;biezhihua&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;huyuqiong&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code segment</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,&#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">          mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,&#39;b&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">          mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4c00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">          int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21h</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">code ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-大小写转换问题" tabindex="-1"><a class="header-anchor" href="#_7-4-大小写转换问题"><span>7.4 大小写转换问题</span></a></h3><p>大写字母ASCII码的第五位为0 小写字母ASCII码的第五位为1</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:codesg, ds:datasg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>datasg segment</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        db &#39;BaSiC&#39;</span></span>
<span class="line"><span>        db &#39;iNfOrMaTiOn&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>datasg ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>codesg segment</span></span>
<span class="line"><span></span></span>
<span class="line"><span>start:  mov ax,datasg</span></span>
<span class="line"><span>        mov ds,ax</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov bx,0</span></span>
<span class="line"><span>        mov cx,5</span></span>
<span class="line"><span>    s:  mov al,[bx]</span></span>
<span class="line"><span>        and al,11011111B</span></span>
<span class="line"><span>        mov [bx], al</span></span>
<span class="line"><span>        inc bx</span></span>
<span class="line"><span>        loop s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov bx,5</span></span>
<span class="line"><span>        mov cx,11</span></span>
<span class="line"><span>    s0: mov al,[bx]</span></span>
<span class="line"><span>        or al,00100000B</span></span>
<span class="line"><span>        mov [bx],al</span></span>
<span class="line"><span>        inc bx</span></span>
<span class="line"><span>        loop s0</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov ax,4c00h</span></span>
<span class="line"><span>        int 21h</span></span>
<span class="line"><span>codesg ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5-bx-idata" tabindex="-1"><a class="header-anchor" href="#_7-5-bx-idata"><span>7.5 [bx+idata]</span></a></h3><p>[bx+idata]表示一个内存单元，他的偏移地址为(bx)+idata,bx中的数值加上idata</p><p>mov ax,[bx+200]的含义:</p><ul><li>(ax)=((ds)*16+(bx)+200)</li></ul><p>mov ax,[bx+200] = mov ax, 200[bx] = mov ax,[bx].200</p><h3 id="_7-6-用-bx-idata-的方式进行数组的处理" tabindex="-1"><a class="header-anchor" href="#_7-6-用-bx-idata-的方式进行数组的处理"><span>7.6 用[bx+idata]的方式进行数组的处理</span></a></h3><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:codesg, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:datasg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">datasg segment</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">              db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;BaSiC&#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">              db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;MinIX&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">datasg ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">codesg segment</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,datasg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11011111B</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              or</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">00100000B</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">              loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">codesg ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;BaSiC&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;MinIX&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  do</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">DF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[j]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>C语言:a[i]、b[i] 汇编语言：0[bx]、5[bx]</p><p>idata[bx]=[bx+idata]的方式为高级语言实现数组提供了便利。</p><h3 id="_7-7-si和di" tabindex="-1"><a class="header-anchor" href="#_7-7-si和di"><span>7.7 SI和DI</span></a></h3><p>si和di是16位寄存器，一次复制2字节。</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">codesg segment</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">      mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,datasg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      s:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4c00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">            int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">codesg ends</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以利用idata[bx/si/di]的方式，是程序变得简介。</p><h3 id="_7-8-bx-si-和-bx-di" tabindex="-1"><a class="header-anchor" href="#_7-8-bx-si-和-bx-di"><span>7.8 [bx+si]和[bx+di]</span></a></h3><p>[bx+si]表示一个内存单元，它的偏移地址为(bx)+(si)。</p><p>(ax)=((ds)*16+(bx)+(si))</p><p>mov ax, [bx][si] = mov ax, [bx+si]</p><h3 id="_7-9-bx-si-idata-和-bx-di-idata" tabindex="-1"><a class="header-anchor" href="#_7-9-bx-si-idata-和-bx-di-idata"><span>7.9 [bx+si+idata]和[bx+di+idata]</span></a></h3><p>mov ax,[bx+si+idata] mov ax,200[bx][si] mov ax,[bx].200[si]</p><p>(ax)=((ds)*16+(bx)+(si)+idata)</p><h3 id="_7-10-不同的寻址方式的灵活应用" tabindex="-1"><a class="header-anchor" href="#_7-10-不同的寻址方式的灵活应用"><span>7.10 不同的寻址方式的灵活应用</span></a></h3><p>定位内存地址的方法=寻址方式</p><ul><li>[idata]用一个常亮来表示地址，可用于直接定位一个内存单元。</li><li>[bx]用一个变量来表示内存地址，可用于简介定位一个内存单元。</li><li>[bx+idata]用一个变量和常量表示地址，可在一个起始地址的基础上用变量间接定位一个内存单元。</li><li>[bx+si]用两个变量表示地址。</li><li>[bx+si+idata]用两个变量和一个常量表示地址。</li></ul><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">assume </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">cs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:codesg, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:datasg</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">datasg segment</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;ibm             &#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">dec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">             &#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;dos             &#39;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &#39;vax             &#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">datasg ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stacksg segment</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        dw</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">stacksg ends</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">codesg segment</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,stacksg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> sp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">16</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,datasg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    s0:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        push</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">3</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    s1:</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        and</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> al</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11011111B</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">al</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        add</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">16</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        pop</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> cx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4c00H</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21H</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">codesg ends</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般来说，在需要暂存数据的时候，我们都应该使用栈。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code,ds:data,ss:stack</span></span>
<span class="line"><span>stack segment</span></span>
<span class="line"><span>        dw 0,0,0,0,0,0,0,0</span></span>
<span class="line"><span>stack ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>data segment</span></span>
<span class="line"><span>        db &#39;1. display      &#39;</span></span>
<span class="line"><span>        db &#39;2. brows        &#39;</span></span>
<span class="line"><span>        db &#39;3. replace      &#39;</span></span>
<span class="line"><span>        db &#39;4. modify       &#39;</span></span>
<span class="line"><span>data ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code segment</span></span>
<span class="line"><span>start:</span></span>
<span class="line"><span>        mov ax,stack</span></span>
<span class="line"><span>        mov ss,ax</span></span>
<span class="line"><span>        mov sp,16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov ax,data</span></span>
<span class="line"><span>        mov ds,ax</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov bx,0</span></span>
<span class="line"><span>        mov cx,4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    s0:</span></span>
<span class="line"><span>        push cx</span></span>
<span class="line"><span>        mov si,0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov cx,4</span></span>
<span class="line"><span>    s1:</span></span>
<span class="line"><span>        mov al,ds:[bx+si+3]</span></span>
<span class="line"><span>        and al,11011111b</span></span>
<span class="line"><span>        mov ds:[bx+si+3],al</span></span>
<span class="line"><span>        inc si</span></span>
<span class="line"><span>        loop s1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        add bx,16</span></span>
<span class="line"><span>        pop cx</span></span>
<span class="line"><span>        loop s0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov ax,4c00h</span></span>
<span class="line"><span>        int 21h</span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实验-6-实践课程中的程序" tabindex="-1"><a class="header-anchor" href="#实验-6-实践课程中的程序"><span>实验 6 实践课程中的程序</span></a></h2><h2 id="_8-数据处理的两个基本问题" tabindex="-1"><a class="header-anchor" href="#_8-数据处理的两个基本问题"><span>8. 数据处理的两个基本问题</span></a></h2><ul><li><p>处理的数据在什么地方？</p></li><li><p>要处理的数据有多长？</p></li><li><p>reg 来表示一个寄存器:</p><ul><li>ax,bx,cx,dx,ah,al,bh,bl,ch,cl,dh,dl,sp,bp,si,di</li></ul></li><li><p>sreg来表示一个段寄存器：</p><ul><li>ds,ss,cs,es</li></ul></li></ul><h3 id="_8-1-bx、si、di、bp" tabindex="-1"><a class="header-anchor" href="#_8-1-bx、si、di、bp"><span>8.1 bx、si、di、bp</span></a></h3><ul><li>在8086CPU中只有这四个寄存器可以用在[...]中来进行单元的寻址。</li><li>在[...]中，这4个寄存器可以单个出现，后者只能以4中组合出现。</li><li>只要在[...]中使用寄存器bp，而指令中没有显性的给出段地址，段地址就默认在ss中。</li></ul><h3 id="_8-2-机器指令处理的数据在什么地方" tabindex="-1"><a class="header-anchor" href="#_8-2-机器指令处理的数据在什么地方"><span>8.2 机器指令处理的数据在什么地方？</span></a></h3><p>读取、写入、运算。</p><p>在指令执行前的一刻，他将要处理的数据所在的位置。</p><p>在指令执行前，要处理的数据可以在3个地方：CPU内部、内存、端口。</p><ul><li>内存、寄存器、指令缓冲器、端口</li></ul><h3 id="_8-3-汇编语言中数据位置的表达" tabindex="-1"><a class="header-anchor" href="#_8-3-汇编语言中数据位置的表达"><span>8.3 汇编语言中数据位置的表达</span></a></h3><p>在汇编语言中如何表达数据的位置？</p><ul><li>立即数（idata） <ul><li>对于直接包含在机器指令中的数据（执行前在CPU的指令缓冲器中），在汇编语言中称为：立即数-idata</li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mov ax,1</span></span>
<span class="line"><span>add bx,2000H</span></span>
<span class="line"><span>or bx,00010000B</span></span>
<span class="line"><span>mov al,&#39;a&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>寄存器 <ul><li>指令要处理的数据在寄存器中，在汇编指令中个提出相应的寄存器名。</li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mov ax,bx</span></span>
<span class="line"><span>mov ds,ax</span></span>
<span class="line"><span>push bx</span></span>
<span class="line"><span>mov ds:[0],bx</span></span>
<span class="line"><span>push ds</span></span>
<span class="line"><span>mov ss,ax</span></span>
<span class="line"><span>mov sp,ax</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>段地址SA和偏移地址EA <ul><li>指令要处理的数据在内存中，在汇编指令中可用[X]的格式给出EA，SA在某个段寄存器中。</li><li>di/bx，段地址默认在DS中</li><li>bp 段地址默认在SS中</li><li>也可以显性给出</li></ul></li></ul><h3 id="_8-4-寻址方式" tabindex="-1"><a class="header-anchor" href="#_8-4-寻址方式"><span>8.4 寻址方式</span></a></h3><p>当数据放在内存中的时候，我们可以用多种方式来给定这个内存单元的偏移地址，这种定位内存单元的方法一般被称为<strong>寻址方式</strong>。</p><p>8086CPU 有多种寻址方式，我们在前面的课程中已经用到了，这里进行一下总结</p><table><thead><tr><th style="text-align:left;">寻址方式</th><th style="text-align:center;">含义</th><th style="text-align:center;">名称</th><th style="text-align:left;">常用格式举例</th></tr></thead><tbody><tr><td style="text-align:left;"><code>[idata]</code></td><td style="text-align:center;">EA = idata; SA = (ds)</td><td style="text-align:center;">直接寻址</td><td style="text-align:left;"><code>[idata]</code></td></tr><tr><td style="text-align:left;"><code>[bx]</code></td><td style="text-align:center;">EA = (bx); SA = (ds)</td><td style="text-align:center;">寄存器间接寻址</td><td style="text-align:left;"><code>[bx]</code></td></tr><tr><td style="text-align:left;"><code>[si]</code></td><td style="text-align:center;">EA = (si); SA = (ds)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[si]</code></td></tr><tr><td style="text-align:left;"><code>[di]</code></td><td style="text-align:center;">EA = (di); SA = (ds)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[di]</code></td></tr><tr><td style="text-align:left;"><code>[bp]</code></td><td style="text-align:center;">EA = (bp); SA = (ss)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[bp]</code></td></tr><tr><td style="text-align:left;"><code>[bx + idata]</code></td><td style="text-align:center;">EA = (bx) + idata; SA = (ds)</td><td style="text-align:center;">寄存器相对寻址</td><td style="text-align:left;">用于结构体: <code>[bx].idata</code></td></tr><tr><td style="text-align:left;"><code>[si + idata]</code></td><td style="text-align:center;">EA = (si) + idata; SA = (ds)</td><td style="text-align:center;"></td><td style="text-align:left;">用于数组: <code>idata[si]</code>, <code>idata[di]</code></td></tr><tr><td style="text-align:left;"><code>[di + idata]</code></td><td style="text-align:center;">EA = (di) + idata; SA = (ds)</td><td style="text-align:center;"></td><td style="text-align:left;">用于二维数组: <code>[bx][idata]</code></td></tr><tr><td style="text-align:left;"><code>[bp + idata]</code></td><td style="text-align:center;">EA = (bp) + idata; SA = (ss)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[bp + idata]</code></td></tr><tr><td style="text-align:left;"><code>[bx + si]</code></td><td style="text-align:center;">EA = (bx) + (si); SA = (ds)</td><td style="text-align:center;">基址变址寻址</td><td style="text-align:left;">用于二维数组: <code>[bx][si]</code></td></tr><tr><td style="text-align:left;"><code>[bx + di]</code></td><td style="text-align:center;">EA = (bx) + (di); SA = (ds)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[bx + di]</code></td></tr><tr><td style="text-align:left;"><code>[bp + si]</code></td><td style="text-align:center;">EA = (bp) + (si); SA = (ss)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[bp + si]</code></td></tr><tr><td style="text-align:left;"><code>[bp + di]</code></td><td style="text-align:center;">EA = (bp) + (di); SA = (ss)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[bp + di]</code></td></tr><tr><td style="text-align:left;"><code>[bx + si + idata]</code></td><td style="text-align:center;">EA = (bx) + (si) + idata; SA = (ds)</td><td style="text-align:center;">相对基址变址寻址</td><td style="text-align:left;">用于表格(结构)中的数组项: <code>[bx].idata[si]</code></td></tr><tr><td style="text-align:left;"><code>[bx + di + idata]</code></td><td style="text-align:center;">EA = (bx) + (di) + idata; SA = (ds)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>[bx].idata[si]</code></td></tr><tr><td style="text-align:left;"><code>[bp + si + idata]</code></td><td style="text-align:center;">EA = (bp) + (si) + idata; SA = (ss)</td><td style="text-align:center;"></td><td style="text-align:left;">用于二维数组: <code>idata[bx][si]</code></td></tr><tr><td style="text-align:left;"><code>[bp + di + idata]</code></td><td style="text-align:center;">EA = (bp) + (di) + idata; SA = (ss)</td><td style="text-align:center;"></td><td style="text-align:left;"><code>idata[bx][si]</code></td></tr></tbody></table><h3 id="_8-5-指令要处理的数据由多长" tabindex="-1"><a class="header-anchor" href="#_8-5-指令要处理的数据由多长"><span>8.5 指令要处理的数据由多长？</span></a></h3><p>在8086CPU的指令，可以处理两种尺寸的数据，byte和word。</p><ul><li>通过寄存器名制定要处理的数据的尺寸。</li></ul><p>mov ax,1</p><p>mov al,1</p><ul><li>在没有寄存器名存在的情况下，用操作符X ptr指明内存单元的长度，X在汇编语言中可以为word或byte。</li></ul><p>mov word ptr ds:[0],1 int word ptr [bx]</p><p>mov byte ptr ds:[0],1 inc byte ptr [bx]</p><ul><li>其他方法，push指令只能进行字操作</li></ul><h3 id="_8-6-寻址方式的综合应用" tabindex="-1"><a class="header-anchor" href="#_8-6-寻址方式的综合应用"><span>8.6 寻址方式的综合应用</span></a></h3><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,seg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0cH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">38</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">add</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0eH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">70</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],&#39;V&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],&#39;A&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],&#39;X&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> company {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> hn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">9</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pm;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sr;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  char</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">strcut company desc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;DEC&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Ken Olsen&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">138</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">40</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;PDP&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  dec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pm</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 38</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  dec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> dec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 70</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  dec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;V&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  dec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;A&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  dec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">cp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;X&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,seg</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> ds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">ax</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">60h</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0cH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">38</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">add</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">0eH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">70</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],&#39;V&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],&#39;A&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">inc</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> si</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">bx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">10h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">si</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">],&#39;X&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[bx+si+idata].</p><p>通过[bx+si+idata]的方式来访问结构体中的数据。</p><p>bx用于定位整个结构体，idata定位结构体中的某一个数据项，si用于定位数组项中的每个元素。</p><p>汇编语言提供了更为贴切的书写方式：[bx].idata, [bx].idata[si]。</p><p>在C语言程序中，我们看到，如dec.cp[i]，dec是一个变量名，指明了结构体变量的地址，cp是一个名称，指明了数据项cp的地址， 而i是用来定位cp中的每一个字符。</p><h3 id="_8-7-div指令" tabindex="-1"><a class="header-anchor" href="#_8-7-div指令"><span>8.7 div指令</span></a></h3><p>div是除法指令。</p><ul><li>被除数÷除数=商；商 x 除数=被除数</li><li>除数：有8位、16位两种，在一个reg或内存单元中</li><li>被除数：默认放在ax、dx、ax中。 <ul><li>如果除数为8位，被除数则为16位，默认在AX中存放</li><li>如果除数为16位，被输出则为32位，在DX和AX中存放，DX存放高16位，AX存放低16位。</li></ul></li><li>结果： <ul><li>如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数；</li><li>如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。</li></ul></li></ul><h3 id="_8-8-伪指令dd" tabindex="-1"><a class="header-anchor" href="#_8-8-伪指令dd"><span>8.8 伪指令dd</span></a></h3><p>db 字节型数据 dw 字型数据 word dd 双字型数据 double word</p><h3 id="_8-9-dup" tabindex="-1"><a class="header-anchor" href="#_8-9-dup"><span>8.9 dup</span></a></h3><p>dup是一个操作符。</p><p>db/dw/dd 重复的次数 dup (重复的数据)</p><p>db 3 dup (0)</p><p>db 3 dup (0,1,2)</p><h2 id="实验7" tabindex="-1"><a class="header-anchor" href="#实验7"><span>实验7</span></a></h2><h2 id="_9-转移指令的原理" tabindex="-1"><a class="header-anchor" href="#_9-转移指令的原理"><span>9. 转移指令的原理</span></a></h2><p>可以修改IP，或同时修改CS和IP的指令统称为转移指令。</p><p>转移指令就是可以额控制CPU执行内存中某处代码的指令。</p><p>8086CPU:</p><ul><li>只修改IP时，称为段内转移，jmp ax</li><li>同时修改CS和IP，称为段间转移 jmp 1000:0</li></ul><p>由于转移指令对IP的修改范围不同，段内转移又分为：短转移和近转移</p><ul><li>短转移IP， -128-127</li><li>近转移IP，~32768-32767</li></ul><p>转移指令分为以下几类：</p><ul><li>无条件转移指令，jmp</li><li>条件转移指令</li><li>循环指令 loop</li><li>过程</li><li>中断</li></ul><h3 id="_9-1-操作符offset" tabindex="-1"><a class="header-anchor" href="#_9-1-操作符offset"><span>9.1 操作符offset</span></a></h3><p>操作符offset在汇编语言中是由编译器处理的符号，他的功能是取得标号的偏移地址。</p><h3 id="_9-2-jmp指令" tabindex="-1"><a class="header-anchor" href="#_9-2-jmp指令"><span>9.2 jmp指令</span></a></h3><p>jmp为无条件转移指令，可以只修改IP，也可以同时修改CS和IP。</p><p>jmp：</p><ul><li>转移的目的地址</li><li>转移的距离</li></ul><h3 id="_9-3-根据位移进行转移的jmp指令" tabindex="-1"><a class="header-anchor" href="#_9-3-根据位移进行转移的jmp指令"><span>9.3 根据位移进行转移的jmp指令</span></a></h3><p>jmp short 标号</p><p>&quot;jmp short 标号&quot;指令所对应的机器码中，并不包含转移的目的地址，而包含的是转移的位移。这个位移，是编译器根据汇编指令中的标号计算出来的。</p><p>&quot;jmp short 标号&quot;的功能为：(IP)=(IP)+8位位移</p><ul><li>8位位移=标号处的地址 - jmp指令后的第一个字节的地址</li><li>short指名此处的位移为8位位移</li><li>8位位移的范围为-128~127,用补码表示。</li><li>8位位移由编译程序在编译时算出。</li></ul><p>&quot;jmp near ptr&quot;的功能为：(IP)=(IP)+16位位移</p><ul><li>16位位移=标号处的地址 - jmp指令后的第一个字节的地址</li><li>near ptr指名此处的位移为16位位移</li><li>16位位移的范围为-32768~32767,用补码表示。</li><li>16位位移由编译程序在编译时算出。</li></ul><p>8位补码?</p><blockquote><p>当然可以。<strong>8位补码</strong>（Two&#39;s Complement）是一种用于表示有符号整数的二进制编码方法，广泛应用于计算机系统中，尤其是在处理负数时。下面将详细解释8位补码的概念、表示范围、转换方法以及一些常见操作。</p><hr><h2 id="_1-补码简介" tabindex="-1"><a class="header-anchor" href="#_1-补码简介"><span><strong>1. 补码简介</strong></span></a></h2><p><strong>补码</strong>是一种将负数表示为正数的特殊编码方式。对于8位补码：</p><ul><li><p><strong>最高位</strong>（即第7位，最左边的位）是符号位：</p><ul><li><strong>0</strong> 表示正数</li><li><strong>1</strong> 表示负数</li></ul></li><li><p><strong>剩余的7位</strong>用于表示数值。</p></li></ul><hr><h2 id="_2-表示范围" tabindex="-1"><a class="header-anchor" href="#_2-表示范围"><span><strong>2. 表示范围</strong></span></a></h2><p>使用8位补码时，可以表示的整数范围为：</p><ul><li><strong>最小值</strong>：-128（1000 0000）</li><li><strong>最大值</strong>：+127（0111 1111）</li></ul><p>这意味着：</p><ul><li><strong>0</strong> 到 <strong>127</strong> 用标准的二进制表示（最高位为0）。</li><li><strong>-1</strong> 到 <strong>-128</strong> 用补码表示（最高位为1）。</li></ul><hr><h2 id="_3-正数的表示" tabindex="-1"><a class="header-anchor" href="#_3-正数的表示"><span><strong>3. 正数的表示</strong></span></a></h2><p>正数的补码与其原码（即标准二进制表示）相同。举例如下：</p><table><thead><tr><th>十进制</th><th>二进制（8位）</th><th>补码</th></tr></thead><tbody><tr><td>0</td><td>0000 0000</td><td>0000 0000</td></tr><tr><td>5</td><td>0000 0101</td><td>0000 0101</td></tr><tr><td>127</td><td>0111 1111</td><td>0111 1111</td></tr></tbody></table><hr><h2 id="_4-负数的表示" tabindex="-1"><a class="header-anchor" href="#_4-负数的表示"><span><strong>4. 负数的表示</strong></span></a></h2><p>负数的补码表示方法如下：</p><ol><li><strong>求原码</strong>：首先写出该负数的绝对值的二进制表示。</li><li><strong>取反</strong>：将所有位取反（0变1，1变0）。</li><li><strong>加1</strong>：在取反后的结果上加1，得到补码。</li></ol><h3 id="示例-5-的补码表示" tabindex="-1"><a class="header-anchor" href="#示例-5-的补码表示"><span><strong>示例：-5 的补码表示</strong></span></a></h3><ol><li><strong>原码</strong>（5的二进制）：<code>0000 0101</code></li><li><strong>取反</strong>：<code>1111 1010</code></li><li><strong>加1</strong>：<code>1111 1011</code></li></ol><p>因此，-5 的8位补码表示为 <strong>1111 1011</strong>。</p><table><thead><tr><th>步骤</th><th>结果</th></tr></thead><tbody><tr><td>原码（5）</td><td>0000 0101</td></tr><tr><td>取反</td><td>1111 1010</td></tr><tr><td>加1</td><td>1111 1011</td></tr><tr><td>补码（-5）</td><td>1111 1011</td></tr></tbody></table><h3 id="另一个示例-128-的补码表示" tabindex="-1"><a class="header-anchor" href="#另一个示例-128-的补码表示"><span><strong>另一个示例：-128 的补码表示</strong></span></a></h3><ol><li><strong>原码</strong>（128的二进制，注意：128在8位中无法表示为正数，因为最大正数是127，但为了说明补码的范围，假设我们需要表示-128）</li><li><strong>取反</strong>：<code>0111 1111</code> → <code>1000 0000</code></li><li><strong>加1</strong>：<code>1000 0000</code> + <code>0000 0001</code> = <code>1000 0001</code></li></ol><p>然而，-128 的补码在8位中直接表示为 <strong>1000 0000</strong>，因为在8位补码中，-128 是唯一一个没有对应正数的数。</p><hr><h2 id="_5-补码与原码、反码的关系" tabindex="-1"><a class="header-anchor" href="#_5-补码与原码、反码的关系"><span><strong>5. 补码与原码、反码的关系</strong></span></a></h2><ul><li><strong>原码</strong>：最高位为符号位，其他位表示数值。</li><li><strong>反码</strong>：负数的反码是将原码的所有位取反（不包括符号位）。</li><li><strong>补码</strong>：反码加1。</li></ul><h3 id="总结关系" tabindex="-1"><a class="header-anchor" href="#总结关系"><span><strong>总结关系</strong></span></a></h3><table><thead><tr><th>类型</th><th>正数</th><th>负数</th></tr></thead><tbody><tr><td>原码</td><td>符号位 + 数值位</td><td>符号位 + 数值位</td></tr><tr><td>反码</td><td>与原码相同</td><td>取反（不包括符号位）</td></tr><tr><td>补码</td><td>与原码相同</td><td>反码 + 1</td></tr></tbody></table><hr><h2 id="_6-补码的优点" tabindex="-1"><a class="header-anchor" href="#_6-补码的优点"><span><strong>6. 补码的优点</strong></span></a></h2><p>使用补码有几个重要的优点，使其在计算机系统中成为标准：</p><ol><li><strong>唯一表示</strong>：每个数只有一种补码表示，避免了原码和反码中正负零的情况。</li><li><strong>简化运算</strong>：加减运算可以统一使用加法器完成，减少了硬件复杂度。</li><li><strong>符号扩展</strong>：在进行位扩展时，补码能正确保持数值的符号。</li></ol><hr><h2 id="_7-补码的转换方法" tabindex="-1"><a class="header-anchor" href="#_7-补码的转换方法"><span><strong>7. 补码的转换方法</strong></span></a></h2><h3 id="正数转换为补码" tabindex="-1"><a class="header-anchor" href="#正数转换为补码"><span><strong>正数转换为补码</strong></span></a></h3><ol><li>将数值转换为二进制，确保使用8位表示。</li><li>如果符号位为0，则补码即为该二进制数。</li></ol><p><strong>示例</strong>：+25</p><ul><li>二进制：<code>0001 1001</code></li><li>补码：<code>0001 1001</code></li></ul><h3 id="负数转换为补码" tabindex="-1"><a class="header-anchor" href="#负数转换为补码"><span><strong>负数转换为补码</strong></span></a></h3><ol><li>取绝对值的二进制表示（8位）。</li><li>取反。</li><li>加1。</li></ol><p><strong>示例</strong>：-25</p><ol><li>绝对值25的二进制：<code>0001 1001</code></li><li>取反：<code>1110 0110</code></li><li>加1：<code>1110 0111</code></li></ol><p>因此，-25 的补码表示为 <strong>1110 0111</strong>。</p><h3 id="补码转换为十进制" tabindex="-1"><a class="header-anchor" href="#补码转换为十进制"><span><strong>补码转换为十进制</strong></span></a></h3><ol><li><p>检查最高位（符号位）：</p><ul><li>如果为0，按正数处理，直接转换为十进制。</li><li>如果为1，按负数处理。</li></ul></li><li><p>对于负数：s</p><ul><li>取补码，减1，取反，得到原码的绝对值。</li><li>在结果前加负号。</li></ul></li></ol><p><strong>示例</strong>：<code>1110 0111</code></p><ol><li>符号位为1，表示负数。</li><li>补码 <code>1110 0111</code> 减1：<code>1110 0110</code></li><li>取反：<code>0001 1001</code></li><li>十进制：25</li><li>最终结果：-25</li></ol><hr><h2 id="_8-补码的加减运算" tabindex="-1"><a class="header-anchor" href="#_8-补码的加减运算"><span><strong>8. 补码的加减运算</strong></span></a></h2><h3 id="加法" tabindex="-1"><a class="header-anchor" href="#加法"><span><strong>加法</strong></span></a></h3><p>补码加法遵循二进制加法规则，不考虑符号位。溢出时，高位的进位被忽略。</p><p><strong>示例</strong>：+5 (<code>0000 0101</code>) + +3 (<code>0000 0011</code>)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  0000 0101</span></span>
<span class="line"><span>+ 0000 0011</span></span>
<span class="line"><span>------------</span></span>
<span class="line"><span>  0000 1000  (8)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="减法" tabindex="-1"><a class="header-anchor" href="#减法"><span><strong>减法</strong></span></a></h3><p>使用补码进行减法，可以转化为加上被减数的补码。</p><p><strong>示例</strong>：+5 (<code>0000 0101</code>) - +3 (<code>0000 0011</code>)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>+5: 0000 0101</span></span>
<span class="line"><span>-3: 补码 1111 1101  (取3的补码)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  0000 0101</span></span>
<span class="line"><span>+ 1111 1101</span></span>
<span class="line"><span>------------</span></span>
<span class="line"><span>  1111 10010</span></span>
<span class="line"><span></span></span>
<span class="line"><span>忽略进位，结果为 \`0000 1000\`（8）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_9-常见误区" tabindex="-1"><a class="header-anchor" href="#_9-常见误区"><span><strong>9. 常见误区</strong></span></a></h2><ol><li><p><strong>0 的表示</strong>：</p><ul><li>在补码中，0 只有一种表示：<code>0000 0000</code>。</li><li>原码和反码中可能存在+0和-0，但补码中消除了这一问题。</li></ul></li><li><p><strong>溢出</strong>：</p><ul><li>当结果超出表示范围时，会发生溢出，但补码运算不改变溢出标志位（需要通过溢出标志位来检测）。</li></ul></li></ol><hr><h2 id="_10-实际应用中的例子" tabindex="-1"><a class="header-anchor" href="#_10-实际应用中的例子"><span><strong>10. 实际应用中的例子</strong></span></a></h2><h3 id="例子1-10-7" tabindex="-1"><a class="header-anchor" href="#例子1-10-7"><span><strong>例子1：-10 + 7</strong></span></a></h3><ol><li><p><strong>表示</strong>：</p><ul><li>-10 的补码： <ul><li>10 的二进制：<code>0000 1010</code></li><li>取反：<code>1111 0101</code></li><li>加1：<code>1111 0110</code></li><li>补码：<code>1111 0110</code></li></ul></li><li>+7 的补码：<code>0000 0111</code></li></ul></li><li><p><strong>加法</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  1111 0110  (-10)</span></span>
<span class="line"><span>+ 0000 0111  (+7)</span></span>
<span class="line"><span>------------</span></span>
<span class="line"><span>  1111 1101  (-3)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>结果</strong>：-3 的补码 <code>1111 1101</code></p></li></ol><h3 id="例子2-50-30" tabindex="-1"><a class="header-anchor" href="#例子2-50-30"><span><strong>例子2：-50 - 30</strong></span></a></h3><ol><li><p><strong>表示</strong>：</p><ul><li>-50 的补码： <ul><li>50 的二进制：<code>0011 0010</code></li><li>取反：<code>1100 1101</code></li><li>加1：<code>1100 1110</code></li><li>补码：<code>1100 1110</code></li></ul></li><li>-30 的补码： <ul><li>30 的二进制：<code>0001 1110</code></li><li>取反：<code>1110 0001</code></li><li>加1：<code>1110 0010</code></li><li>补码：<code>1110 0010</code></li></ul></li></ul></li><li><p><strong>加法</strong>：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  1100 1110  (-50)</span></span>
<span class="line"><span>+ 1110 0010  (-30)</span></span>
<span class="line"><span>------------</span></span>
<span class="line"><span>1 1011 0000  （忽略进位，结果为 \`1011 0000\`）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>结果</strong>：</p><ul><li><code>1011 0000</code> 的补码表示： <ul><li>取反：<code>0100 1111</code></li><li>减1：<code>0100 1110</code>（即78）</li><li>加上负号：-78</li></ul></li></ul></li></ol><hr><h2 id="总结-8" tabindex="-1"><a class="header-anchor" href="#总结-8"><span><strong>总结</strong></span></a></h2><p><strong>8位补码</strong>是一种高效、统一的有符号整数表示方法，广泛应用于计算机系统中。它通过最高位作为符号位，结合二进制运算简化了加减运算的实现，同时避免了正负零的表示问题。理解补码对于深入学习计算机体系结构、汇编语言编程以及数字电路设计等领域至关重要。</p></blockquote><h3 id="_9-4-转移的目的地址在指令中的jmp指令" tabindex="-1"><a class="header-anchor" href="#_9-4-转移的目的地址在指令中的jmp指令"><span>9.4 转移的目的地址在指令中的jmp指令</span></a></h3><p>&quot;jmp far ptr 标号&quot; 实现的是段间转移 - 远转移。功能如下：</p><ul><li>（CS）=标号所在段的地址，（IP）=标号在段中的偏移地址。</li><li>far ptr指明了指令用标号的段地址和偏移地址修改CS和IP。</li></ul><p>机器码：EA 0B 01 BD 0B - 0BBD:010B</p><h3 id="_9-5-转移地址在寄存器中的jmp指令" tabindex="-1"><a class="header-anchor" href="#_9-5-转移地址在寄存器中的jmp指令"><span>9.5 转移地址在寄存器中的jmp指令</span></a></h3><p>指令格式：jmp 16位reg</p><h3 id="_9-6-转移地址在内存中的jmp指令" tabindex="-1"><a class="header-anchor" href="#_9-6-转移地址在内存中的jmp指令"><span>9.6 转移地址在内存中的jmp指令</span></a></h3><p>jmp word ptr 段内转移 jmp dword ptr 段间转移</p><h3 id="_9-7-jcxz指令" tabindex="-1"><a class="header-anchor" href="#_9-7-jcxz指令"><span>9.7 jcxz指令</span></a></h3><p>指令格式：jcxz 标号 （如果cx=0，转移至标号处执行） 操作：当(cx)=0时，(IP)=(IP)+8位位移</p><p>jcxz 标号 if ((cx)==0) jmp short 标号</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>code segment</span></span>
<span class="line"><span>start:</span></span>
<span class="line"><span>	mov ax,2000H</span></span>
<span class="line"><span>	mov ds,ax</span></span>
<span class="line"><span>	mov bx,0</span></span>
<span class="line"><span>s:	mov cl,ds:[bx]	;将内存单元的值依次赋值给寄存器CL</span></span>
<span class="line"><span>	mov ch,0		;将CH填充为0，和CL组合判断CX是否为零</span></span>
<span class="line"><span>	jcxz ok			;如果(CX)等于零则跳转到标号ok处，即结束查找</span></span>
<span class="line"><span>	add bx,1		;每次向后偏移一个字节</span></span>
<span class="line"><span>	jmp short s </span></span>
<span class="line"><span>ok:	mov dx,bx		;偏移地址存储在寄存器DX中</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>	mov ax,4c00h</span></span>
<span class="line"><span>	int 21h</span></span>
<span class="line"><span>code ends</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-8-loop指令" tabindex="-1"><a class="header-anchor" href="#_9-8-loop指令"><span>9.8 loop指令</span></a></h3><h3 id="_9-9-根据位移进行转移的意义" tabindex="-1"><a class="header-anchor" href="#_9-9-根据位移进行转移的意义"><span>9.9 根据位移进行转移的意义</span></a></h3><h3 id="_9-10-编译器对转移位移超界的检测" tabindex="-1"><a class="header-anchor" href="#_9-10-编译器对转移位移超界的检测"><span>9.10 编译器对转移位移超界的检测</span></a></h3><h2 id="_10-call和ret指令" tabindex="-1"><a class="header-anchor" href="#_10-call和ret指令"><span>10 CALL和RET指令</span></a></h2><p>call和ret指令都是转移指令，他们都修改IP或者同时修改CS和IP。</p><p>他们经常被共同用来实现子程序的设计。</p><h3 id="_10-1-ret和retf" tabindex="-1"><a class="header-anchor" href="#_10-1-ret和retf"><span>10.1 ret和retf</span></a></h3><p>ret指令用栈中的数据，修改IP的内容，从而实现近转移 retf指令用占中的数据，修改CS和IP的内容，从而实现远转移</p><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code</span></span>
<span class="line"><span>stack segment</span></span>
<span class="line"><span>        db 16 dup (0)</span></span>
<span class="line"><span>stack ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code segment</span></span>
<span class="line"><span>        mov ax,4c00H</span></span>
<span class="line"><span>        int 21h</span></span>
<span class="line"><span>start:  mov ax,stack</span></span>
<span class="line"><span>        mov ss,ax</span></span>
<span class="line"><span>        mov sp,16</span></span>
<span class="line"><span>        mov ax,0</span></span>
<span class="line"><span>        push ax</span></span>
<span class="line"><span>        mov bx,0</span></span>
<span class="line"><span>        ret </span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[start]</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>   V</span></span>
<span class="line"><span>mov ax, stack      ; AX = stack segment address</span></span>
<span class="line"><span>mov ss, ax         ; SS = stack segment</span></span>
<span class="line"><span>mov sp, 16         ; SP = 0x10</span></span>
<span class="line"><span>mov ax, 0          ; AX = 0</span></span>
<span class="line"><span>push ax            ; Push 0 onto stack, SP = 0x0E</span></span>
<span class="line"><span>mov bx, 0          ; BX = 0</span></span>
<span class="line"><span>ret                ; Pop 0 from stack, set IP = 0x0000</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>   V</span></span>
<span class="line"><span>CS:0000</span></span>
<span class="line"><span>mov ax,4c00h       ; AX = 0x4C00 (DOS terminate program)</span></span>
<span class="line"><span>int 21h            ; Terminate program, return code = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当然可以。让我们详细分析并解释您提供的 <strong>8086CPU</strong> 汇编代码的执行过程和原理。</p><h3 id="代码概述" tabindex="-1"><a class="header-anchor" href="#代码概述"><span><strong>代码概述</strong></span></a></h3><p>您提供的汇编代码如下：</p><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code</span></span>
<span class="line"><span>stack segment</span></span>
<span class="line"><span>        db 16 dup (0)</span></span>
<span class="line"><span>stack ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code segment</span></span>
<span class="line"><span>        mov ax,4c00H</span></span>
<span class="line"><span>        int 21h</span></span>
<span class="line"><span>start:  mov ax,stack</span></span>
<span class="line"><span>        mov ss,ax</span></span>
<span class="line"><span>        mov sp,16</span></span>
<span class="line"><span>        mov ax,0</span></span>
<span class="line"><span>        push ax</span></span>
<span class="line"><span>        mov bx,0</span></span>
<span class="line"><span>        ret </span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码定义了两个段（Segment）：<code>stack</code> 和 <code>code</code>。其中，<code>stack</code> 段用于栈操作，<code>code</code> 段包含程序的主要指令。<code>end start</code> &gt; 指定程序的入口点为 <code>start</code> 标签。</p><h3 id="详细解析" tabindex="-1"><a class="header-anchor" href="#详细解析"><span><strong>详细解析</strong></span></a></h3><h4 id="_1-指令解释" tabindex="-1"><a class="header-anchor" href="#_1-指令解释"><span><strong>1. 指令解释</strong></span></a></h4><h5 id="_1-1-assume-cs-code" tabindex="-1"><a class="header-anchor" href="#_1-1-assume-cs-code"><span><strong>1.1. <code>assume cs:code</code></strong></span></a></h5><ul><li><strong>作用</strong>：告诉汇编器，代码段寄存器 <strong>CS</strong> 对应的是 <code>code</code> 段。这有助于汇编器正确解析段内的指令和数据。</li></ul><h5 id="_1-2-stack-segment-到-stack-ends" tabindex="-1"><a class="header-anchor" href="#_1-2-stack-segment-到-stack-ends"><span><strong>1.2. <code>stack segment</code> 到 <code>stack ends</code></strong></span></a></h5><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>stack segment</span></span>
<span class="line"><span>        db 16 dup (0)</span></span>
<span class="line"><span>stack ends</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>定义</strong>：定义一个名为 <code>stack</code> 的段，用于栈操作。</li><li><strong><code>db 16 dup (0)</code></strong>：在 <code>stack</code> 段中分配 <strong>16 个字节</strong>，并将每个字节初始化为 <strong>0</strong>。这将作为栈空间使用。</li></ul><h5 id="_1-3-code-segment-到-code-ends" tabindex="-1"><a class="header-anchor" href="#_1-3-code-segment-到-code-ends"><span><strong>1.3. <code>code segment</code> 到 <code>code ends</code></strong></span></a></h5><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>code segment</span></span>
<span class="line"><span>        mov ax,4c00H</span></span>
<span class="line"><span>        int 21h</span></span>
<span class="line"><span>start:  mov ax,stack</span></span>
<span class="line"><span>        mov ss,ax</span></span>
<span class="line"><span>        mov sp,16</span></span>
<span class="line"><span>        mov ax,0</span></span>
<span class="line"><span>        push ax</span></span>
<span class="line"><span>        mov bx,0</span></span>
<span class="line"><span>        ret </span></span>
<span class="line"><span>code ends</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>定义</strong>：定义一个名为 <code>code</code> 的段，包含程序的主要指令。</li></ul><h5 id="_1-4-end-start" tabindex="-1"><a class="header-anchor" href="#_1-4-end-start"><span><strong>1.4. <code>end start</code></strong></span></a></h5><ul><li><strong>作用</strong>：指定程序的入口点为 <code>start</code> 标签。这意味着当程序开始执行时，从 <code>start</code> 标签处开始。</li></ul><h4 id="_2-程序执行流程" tabindex="-1"><a class="header-anchor" href="#_2-程序执行流程"><span><strong>2. 程序执行流程</strong></span></a></h4><p>让我们逐步跟踪程序的执行：</p><h5 id="_2-1-程序入口-start-标签" tabindex="-1"><a class="header-anchor" href="#_2-1-程序入口-start-标签"><span><strong>2.1. 程序入口：<code>start</code> 标签</strong></span></a></h5><p>程序从 <code>start:</code> 标签开始执行。</p><h5 id="_2-2-mov-ax-stack" tabindex="-1"><a class="header-anchor" href="#_2-2-mov-ax-stack"><span><strong>2.2. <code>mov ax, stack</code></strong></span></a></h5><ul><li><strong>作用</strong>：将 <code>stack</code> 段的段地址加载到寄存器 <strong>AX</strong> 中。</li><li><strong>解释</strong>：段地址是指内存中该段的起始位置。<code>stack</code> 段的地址由汇编器在编译时分配。</li></ul><h5 id="_2-3-mov-ss-ax" tabindex="-1"><a class="header-anchor" href="#_2-3-mov-ss-ax"><span><strong>2.3. <code>mov ss, ax</code></strong></span></a></h5><ul><li><strong>作用</strong>：将 <strong>AX</strong> 中的值（即 <code>stack</code> 段的段地址）移动到栈段寄存器 <strong>SS</strong>。</li><li><strong>解释</strong>：这一步将栈段寄存器 <strong>SS</strong> 设置为指向 <code>stack</code> 段，从而指明栈的物理位置。</li></ul><h5 id="_2-4-mov-sp-16" tabindex="-1"><a class="header-anchor" href="#_2-4-mov-sp-16"><span><strong>2.4. <code>mov sp,16</code></strong></span></a></h5><ul><li><strong>作用</strong>：将值 <strong>16</strong>（即 <strong>0x10</strong>）加载到栈指针寄存器 <strong>SP</strong> 中。</li><li><strong>解释</strong>：<strong>SP</strong> 指向栈顶的位置。这里设置 <strong>SP</strong> 为 <strong>16</strong>，意味着栈的顶部在 <code>stack</code> 段的偏移地址 <strong>0x10</strong>（即 &gt; <code>stack:0010h</code>）。</li></ul><h5 id="_2-5-mov-ax-0" tabindex="-1"><a class="header-anchor" href="#_2-5-mov-ax-0"><span><strong>2.5. <code>mov ax,0</code></strong></span></a></h5><ul><li><strong>作用</strong>：将 <strong>0</strong> 加载到寄存器 <strong>AX</strong> 中。</li><li><strong>解释</strong>：这是为了后续将 <strong>AX</strong> 的值压入栈中。</li></ul><h5 id="_2-6-push-ax" tabindex="-1"><a class="header-anchor" href="#_2-6-push-ax"><span><strong>2.6. <code>push ax</code></strong></span></a></h5><ul><li><strong>作用</strong>：将 <strong>AX</strong> 中的值（<strong>0</strong>）压入栈中。</li><li><strong>过程</strong>： <ol><li><strong>SP</strong> 减少 <strong>2</strong>（因为在 8086 中，栈是向下增长的，每次压栈操作 <strong>SP</strong> 减少 <strong>2</strong>）。 <ul><li>原 <strong>SP</strong> = <strong>16</strong> → 新 <strong>SP</strong> = <strong>14</strong>（即 <strong>0x0E</strong>）。</li></ul></li><li>在 <code>stack</code> 段的偏移地址 <strong>0x0E</strong> 处存储 <strong>AX</strong> 的值 <strong>0x0000</strong>。</li></ol></li></ul><h5 id="_2-7-mov-bx-0" tabindex="-1"><a class="header-anchor" href="#_2-7-mov-bx-0"><span><strong>2.7. <code>mov bx,0</code></strong></span></a></h5><ul><li><strong>作用</strong>：将 <strong>0</strong> 加载到寄存器 <strong>BX</strong> 中。</li><li><strong>解释</strong>：简单地将 <strong>BX</strong> 清零。</li></ul><h5 id="_2-8-ret" tabindex="-1"><a class="header-anchor" href="#_2-8-ret"><span><strong>2.8. <code>ret</code></strong></span></a></h5><ul><li><strong>作用</strong>：从栈中弹出一个返回地址，并将其加载到指令指针 <strong>IP</strong> 中，跳转到该地址继续执行。</li><li><strong>过程</strong>： <ol><li>从栈顶（<code>stack:000E</code>）弹出 <strong>2</strong> 字节的数据，这里是 <strong>0x0000</strong>。</li><li><strong>SP</strong> 增加 <strong>2</strong>（即从 <strong>14</strong> 回到 <strong>16</strong>）。</li><li>将弹出的值 <strong>0x0000</strong> 加载到 <strong>IP</strong> 中。</li><li>程序跳转到 <code>CS:0000</code> 处继续执行。</li></ol></li></ul><h5 id="_2-9-跳转到-cs-0000" tabindex="-1"><a class="header-anchor" href="#_2-9-跳转到-cs-0000"><span><strong>2.9. 跳转到 <code>CS:0000</code></strong></span></a></h5><p>在 <strong>8086</strong> 架构中，物理地址是通过段地址和偏移地址计算得到的：</p><p>[ \\text{物理地址} = \\text{段地址} \\times 16 + \\text{偏移地址} ]</p><ul><li><strong>CS</strong> 指向 <code>code</code> 段。</li><li><strong>IP</strong> 被设置为 <strong>0x0000</strong>，因此跳转到 <code>code</code> 段的偏移地址 <strong>0x0000</strong>。</li></ul><h5 id="_2-10-mov-ax-4c00h-和-int-21h" tabindex="-1"><a class="header-anchor" href="#_2-10-mov-ax-4c00h-和-int-21h"><span><strong>2.10. <code>mov ax,4c00H</code> 和 <code>int 21h</code></strong></span></a></h5><div class="language-assembly line-numbers-mode" data-highlighter="shiki" data-ext="assembly" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mov ax,4c00H</span></span>
<span class="line"><span>int 21h</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong><code>mov ax,4c00H</code></strong>：</p><ul><li>将 <strong>0x4C00</strong> 加载到 <strong>AX</strong> 中。</li><li>在 DOS 中，<strong>INT 21h</strong> 的 <strong>AH=4Ch</strong> 功能是<strong>终止程序</strong>，<strong>AL</strong> 是返回代码。</li><li>因此，<strong>AX=4C00h</strong> 表示终止程序，返回代码 <strong>0x00</strong>。</li></ul></li><li><p><strong><code>int 21h</code></strong>：</p><ul><li>触发 DOS 中断 <strong>21h</strong>，执行 <strong>AH=4Ch</strong> 的功能，即终止程序。</li></ul></li></ul><h4 id="_3-总体执行流程" tabindex="-1"><a class="header-anchor" href="#_3-总体执行流程"><span><strong>3. 总体执行流程</strong></span></a></h4><ol><li><p><strong>程序开始</strong>：</p><ul><li><strong>CS</strong> 指向 <code>code</code> 段。</li><li><strong>DS</strong>, <strong>ES</strong> 等默认段寄存器指向相应的段，未在此代码中明确设置。</li></ul></li><li><p><strong>设置栈段和栈指针</strong>：</p><ul><li>将 <code>stack</code> 段的地址加载到 <strong>SS</strong>。</li><li>设置 <strong>SP</strong> 为 <strong>16</strong>（<strong>0x10</strong>），即栈顶在 <code>stack:0010h</code>。</li></ul></li><li><p><strong>压栈操作</strong>：</p><ul><li>将 <strong>AX=0</strong> 压入栈中，栈内容在 <code>stack:000E</code> 处存储 <strong>0x0000</strong>，<strong>SP</strong> 变为 <strong>0x0E</strong>。</li></ul></li><li><p><strong>清零 <strong>BX</strong> 寄存器</strong>：</p><ul><li>将 <strong>BX</strong> 设置为 <strong>0</strong>。</li></ul></li><li><p><strong>返回操作</strong>：</p><ul><li><strong>ret</strong> 指令从栈中弹出 <strong>0x0000</strong>，设置 <strong>IP=0x0000</strong>，<strong>SP</strong> 回到 <strong>16</strong>（<strong>0x10</strong>）。</li><li>跳转到 <code>CS:0000</code>。</li></ul></li><li><p><strong>终止程序</strong>：</p><ul><li>在 <code>CS:0000</code> 处，执行 <code>mov ax,4c00h</code> 和 <code>int 21h</code>，终止程序并返回 <strong>0</strong> 作为退出代码。</li></ul></li></ol><h4 id="_4-栈操作的具体效果" tabindex="-1"><a class="header-anchor" href="#_4-栈操作的具体效果"><span><strong>4. 栈操作的具体效果</strong></span></a></h4><ul><li><p><strong>栈段设置</strong>：</p><ul><li><strong>SS = stack</strong>，<strong>SP = 0x10</strong>。</li><li>初始栈顶：<code>stack:0010h</code>。</li></ul></li><li><p><strong><code>push ax</code></strong>：</p><ul><li><strong>AX = 0</strong> 被压入栈中。</li><li><strong>SP</strong> 减少 <strong>2</strong> → <strong>SP = 0x0E</strong>。</li><li><strong>stack:000Eh</strong> 存储 <strong>0x0000</strong>。</li></ul></li><li><p><strong><code>ret</code></strong>：</p><ul><li>从栈中弹出 <strong>0x0000</strong>，加载到 <strong>IP</strong>。</li><li><strong>SP</strong> 增加 <strong>2</strong> → <strong>SP = 0x10</strong>。</li><li>程序跳转到 <code>code:0000h</code>，即执行 <code>mov ax,4c00h</code> 和 <code>int 21h</code>。</li></ul></li></ul><h4 id="_5-代码的执行原理与目的" tabindex="-1"><a class="header-anchor" href="#_5-代码的执行原理与目的"><span><strong>5. 代码的执行原理与目的</strong></span></a></h4><p>这段代码主要展示了如何在 <strong>8086</strong> 汇编中设置栈段、进行基本的栈操作（如压栈和返回），以及如何通过 DOS 中断终止程序。</p><ul><li><p><strong>设置栈段和栈指针</strong>：</p><ul><li>使用 <code>mov ss, ax</code> 和 <code>mov sp, 16</code> 设置栈段和栈指针，确保栈操作有正确的内存空间。</li></ul></li><li><p><strong>栈操作</strong>：</p><ul><li><code>push ax</code> 将 <strong>AX</strong> 的值（<strong>0</strong>）压入栈中。</li><li><code>ret</code> 从栈中弹出一个地址，并跳转到该地址继续执行。</li></ul></li><li><p><strong>程序终止</strong>：</p><ul><li>通过 <code>mov ax,4c00h</code> 和 <code>int 21h</code> 终止程序，返回代码 <strong>0</strong>。</li></ul></li></ul><h4 id="_6-总结与关键点" tabindex="-1"><a class="header-anchor" href="#_6-总结与关键点"><span><strong>6. 总结与关键点</strong></span></a></h4><ol><li><p><strong>段的定义与使用</strong>：</p><ul><li><strong><code>stack</code> 段</strong>：用于栈操作，分配了 <strong>16</strong> 个字节的空间。</li><li><strong><code>code</code> 段</strong>：包含程序的指令。</li></ul></li><li><p><strong>栈的设置</strong>：</p><ul><li><strong>SS</strong> 指向 <code>stack</code> 段，<strong>SP</strong> 设置为 <strong>16</strong>（<strong>0x10</strong>），确保栈操作在正确的内存区域进行。</li></ul></li><li><p><strong>栈操作的流程</strong>：</p><ul><li><strong>压栈</strong>：<code>push ax</code> 将 <strong>AX</strong> 的值压入栈中，<strong>SP</strong> 减少。</li><li><strong>返回</strong>：<code>ret</code> 从栈中弹出一个地址，设置 <strong>IP</strong>，实现跳转。</li></ul></li><li><p><strong>程序终止</strong>：</p><ul><li>使用 DOS 中断 <strong>21h</strong> 的功能 <strong>4Ch</strong> 终止程序，返回代码 <strong>0</strong>。</li></ul></li><li><p><strong>内存布局</strong>：</p><ul><li>栈段 <code>stack</code> 从 <strong>0x0000</strong> 到 <strong>0x0010</strong> 分配了 <strong>16</strong> 个字节。</li><li>程序指令位于 <code>code</code> 段，从 <strong>0x0000</strong> 开始。</li></ul></li><li><p><strong>执行流程图示</strong>：</p></li></ol><div class="language-plaintext line-numbers-mode" data-highlighter="shiki" data-ext="plaintext" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[start]</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>   V</span></span>
<span class="line"><span>mov ax, stack      ; AX = stack segment address</span></span>
<span class="line"><span>mov ss, ax         ; SS = stack segment</span></span>
<span class="line"><span>mov sp, 16         ; SP = 0x10</span></span>
<span class="line"><span>mov ax, 0          ; AX = 0</span></span>
<span class="line"><span>push ax            ; Push 0 onto stack, SP = 0x0E</span></span>
<span class="line"><span>mov bx, 0          ; BX = 0</span></span>
<span class="line"><span>ret                ; Pop 0 from stack, set IP = 0x0000</span></span>
<span class="line"><span>   |</span></span>
<span class="line"><span>   V</span></span>
<span class="line"><span>CS:0000</span></span>
<span class="line"><span>mov ax,4c00h       ; AX = 0x4C00 (DOS terminate program)</span></span>
<span class="line"><span>int 21h            ; Terminate program, return code = 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="扩展说明-为什么-ret-跳转到-cs-0000" tabindex="-1"><a class="header-anchor" href="#扩展说明-为什么-ret-跳转到-cs-0000"><span><strong>扩展说明：为什么 <code>ret</code> 跳转到 <code>CS:0000</code></strong></span></a></h3><p>在 <strong>8086</strong> 架构中，<code>ret</code> 指令的作用是从栈中弹出返回地址，并将其加载到 <strong>IP</strong>（指令指针）中，从而实现函数调用的返回。</p><p>在这段代码中：</p><ol><li><strong><code>push ax</code></strong> 将 <strong>0</strong> 压入栈中。</li><li><strong><code>ret</code></strong> 从栈中弹出 <strong>0</strong>，将其加载到 <strong>IP</strong>。</li><li><strong>IP = 0x0000</strong>，所以程序跳转到 <code>code</code> 段的偏移地址 <strong>0x0000</strong>，执行 <code>mov ax,4c00h</code> 和 <code>int 21h</code>，即终止程序。</li></ol><p>这种方式实际上利用了 <code>ret</code> 指令来控制程序的流程，将执行流跳转到了程序的开头，执行终止命令。这在实际编程中不常见，但在教学或特&gt; 定场景下可能用于演示栈操作和程序流程控制。</p><h3 id="常见应用场景" tabindex="-1"><a class="header-anchor" href="#常见应用场景"><span><strong>常见应用场景</strong></span></a></h3><ul><li><strong>栈设置</strong>：在程序开始时设置栈段和栈指针，以确保栈操作在正确的内存区域进行。</li><li><strong>函数调用与返回</strong>：使用 <code>call</code> 和 <code>ret</code> 指令实现函数的调用和返回，利用栈来保存返回地址和局部变量。</li><li><strong>程序终止</strong>：通过 DOS 中断 <code>int 21h</code> 的功能终止程序，并返回特定的退出代码。</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span><strong>注意事项</strong></span></a></h3><ul><li><strong>栈空间</strong>：确保栈段有足够的空间来存储需要的值，避免栈溢出。</li><li><strong>正确设置段寄存器</strong>：在进行栈操作前，必须正确设置 <strong>SS</strong> 和 <strong>SP</strong>，否则可能导致数据写入错误的内存区域。</li><li><strong>返回地址的有效性</strong>：<code>ret</code> 指令依赖于栈中的返回地址，确保栈中存储的是有效的地址，避免程序崩溃或不可预测的行为。</li></ul><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span><strong>结论</strong></span></a></h3><p>这段 <strong>8086</strong> 汇编代码展示了如何设置栈段、进行基本的栈操作（如压栈和返回），以及如何通过 DOS 中断终止程序。通过逐步分析每条&gt; 指令的作用，我们理解了程序的执行流程和内存操作的基本原理。这对于学习 <strong>8086</strong> 汇编语言和计算机体系结构非常有帮助。</p><p>如果您对某些部分还有疑问，或需要进一步的解释，请随时提问！</p></blockquote><h3 id="_10-2-call指令" tabindex="-1"><a class="header-anchor" href="#_10-2-call指令"><span>10.2 call指令</span></a></h3><p>CPU执行call指令时，进行两步操作：</p><ul><li>将当前的IP或者CS和IP亚茹栈</li><li>转移</li></ul><h3 id="_10-3-一句位移进行转移的call指令" tabindex="-1"><a class="header-anchor" href="#_10-3-一句位移进行转移的call指令"><span>10.3 一句位移进行转移的call指令</span></a></h3><p>call 标号：将当前的IP压栈后，转到标号处执行指令。</p><p>push IP jmp near ptr 标号</p><h3 id="_10-4-转移的目的地址在指令中的call指令" tabindex="-1"><a class="header-anchor" href="#_10-4-转移的目的地址在指令中的call指令"><span>10.4 转移的目的地址在指令中的call指令</span></a></h3><p>call far ptr 标号：段间转移</p><p>PUSH CS PUSH IP jmp far ptr 标号</p><h3 id="_10-5-转移地址在寄存器中的call指令" tabindex="-1"><a class="header-anchor" href="#_10-5-转移地址在寄存器中的call指令"><span>10.5 转移地址在寄存器中的call指令</span></a></h3><p>call 16位reg</p><p>PUSH IP jmp 16 reg</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code </span></span>
<span class="line"><span>stack segment</span></span>
<span class="line"><span>  dw 8 dup (0)</span></span>
<span class="line"><span>stack ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code segment</span></span>
<span class="line"><span></span></span>
<span class="line"><span>start:      mov ax,stack</span></span>
<span class="line"><span>            mov ss,ax</span></span>
<span class="line"><span>            mov ds,ax</span></span>
<span class="line"><span>            mov ax,0</span></span>
<span class="line"><span>            call word ptr ds:[0EH]</span></span>
<span class="line"><span>            inc ax</span></span>
<span class="line"><span>            inc ax</span></span>
<span class="line"><span>            inc ax</span></span>
<span class="line"><span>            mov ax,4c00H</span></span>
<span class="line"><span>            int 21H</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code</span></span>
<span class="line"><span>stack segment</span></span>
<span class="line"><span>  dw 8 dup (0)        ; 定义栈段，包含 16 个字节（8 个字，每个字为 2 字节）</span></span>
<span class="line"><span>stack ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code segment</span></span>
<span class="line"><span></span></span>
<span class="line"><span>start:      mov ax,stack          ; 将栈段地址加载到 AX</span></span>
<span class="line"><span>            mov ss,ax             ; 将栈段地址加载到 SS（设置栈段）</span></span>
<span class="line"><span>            mov ds,ax             ; 将栈段地址加载到 DS（数据段和栈段相同）</span></span>
<span class="line"><span>            mov ax,0              ; 将 0 加载到 AX</span></span>
<span class="line"><span>            call word ptr ds:[0EH] ; 调用位于 ds:0EH 的子程序地址</span></span>
<span class="line"><span>            inc ax                ; AX = AX + 1</span></span>
<span class="line"><span>            inc ax                ; AX = AX + 1</span></span>
<span class="line"><span>            inc ax                ; AX = AX + 1</span></span>
<span class="line"><span>            mov ax,4c00H          ; 将 4c00H 加载到 AX</span></span>
<span class="line"><span>            int 21H               ; DOS 终止程序并返回</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-6-转移地址在内存中的call指令" tabindex="-1"><a class="header-anchor" href="#_10-6-转移地址在内存中的call指令"><span>10.6 转移地址在内存中的call指令</span></a></h3><p>call word ptr 内存单元地址： PUSH IP jmp word ptr 内存单元地址</p><p>call dword ptr 内存单元地址： PUSH CS PUSH IP jmp dword ptr 内存单元地址</p><h3 id="_10-7-call和ret的配合使用" tabindex="-1"><a class="header-anchor" href="#_10-7-call和ret的配合使用"><span>10.7 call和ret的配合使用</span></a></h3><h3 id="_10-8-mul-指令" tabindex="-1"><a class="header-anchor" href="#_10-8-mul-指令"><span>10.8 mul 指令</span></a></h3><p>mul reg</p><p>mul byte ptr ds:[0] (ax)=(al)*((ds)*16+0)</p><p>mul word ptr [bx+si+8] (ax)=(ax)*((ds)<em>16+(bx)+(si)+8) 低16位 (dx)=(ax)</em>((ds)*16+(bx)+(si)+8) 高16位</p><h3 id="_10-9-模块化程序设计" tabindex="-1"><a class="header-anchor" href="#_10-9-模块化程序设计"><span>10.9 模块化程序设计</span></a></h3><h3 id="_10-10-参数和结果传递的问题" tabindex="-1"><a class="header-anchor" href="#_10-10-参数和结果传递的问题"><span>10.10 参数和结果传递的问题</span></a></h3><p>如何存储子程序需要的参数和产生的返回值。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>code segment</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>start:  mov ax,data</span></span>
<span class="line"><span>        mov ds,ax</span></span>
<span class="line"><span>        mov si,0</span></span>
<span class="line"><span>        mov di,16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov cx,8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>s:      mov bx,[si]</span></span>
<span class="line"><span>        call cube</span></span>
<span class="line"><span>        mov [di],ax</span></span>
<span class="line"><span>        mov [di].2, dx</span></span>
<span class="line"><span>        add si,2</span></span>
<span class="line"><span>        add di,4</span></span>
<span class="line"><span>        loop s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov ax,4c00H</span></span>
<span class="line"><span>        int 21h</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cube:   mov ax,bx</span></span>
<span class="line"><span>        mul bx</span></span>
<span class="line"><span>        mul bx</span></span>
<span class="line"><span>        ret</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-11-批量数据的传递" tabindex="-1"><a class="header-anchor" href="#_10-11-批量数据的传递"><span>10.11 批量数据的传递</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>assume cs:code</span></span>
<span class="line"><span></span></span>
<span class="line"><span>data segment</span></span>
<span class="line"><span>        db &#39;conversation&#39;</span></span>
<span class="line"><span>data ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code segment</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>start:  mov ax,data</span></span>
<span class="line"><span>        mov ds,ax</span></span>
<span class="line"><span>        mov si,0      ;ds:si 只想字符串（批量数据）所在空间的地址</span></span>
<span class="line"><span>        mov cx,12</span></span>
<span class="line"><span>        call capital</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        mov ax,4c00H</span></span>
<span class="line"><span>        int 21h</span></span>
<span class="line"><span></span></span>
<span class="line"><span>cube:   and byte ptr [si], 1101111B</span></span>
<span class="line"><span>        inc si</span></span>
<span class="line"><span>        loop captial</span></span>
<span class="line"><span>        ret</span></span>
<span class="line"><span></span></span>
<span class="line"><span>code ends</span></span>
<span class="line"><span></span></span>
<span class="line"><span>end start</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-12-寄存器冲突的问题" tabindex="-1"><a class="header-anchor" href="#_10-12-寄存器冲突的问题"><span>10.12 寄存器冲突的问题</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>子程序开始： 子程序中使用的寄存器入栈</span></span>
<span class="line"><span>            子程序内容</span></span>
<span class="line"><span>            子程序中使用的寄存器出栈</span></span>
<span class="line"><span>            返回</span></span>
<span class="line"><span></span></span>
<span class="line"><span>capital:    push cx</span></span>
<span class="line"><span>            push si</span></span>
<span class="line"><span></span></span>
<span class="line"><span>change:     mov cl,[si]</span></span>
<span class="line"><span>            mov ch,0</span></span>
<span class="line"><span>            jcxz ok</span></span>
<span class="line"><span>            and byte ptr [si],11011111B</span></span>
<span class="line"><span>            inc si</span></span>
<span class="line"><span>            jmp short change</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ok:         pop si</span></span>
<span class="line"><span>            pop cx</span></span>
<span class="line"><span>            ret</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-标志寄存器" tabindex="-1"><a class="header-anchor" href="#_11-标志寄存器"><span>11. 标志寄存器</span></a></h2><p>flag寄存器</p><p>有一种特殊的寄存器，具有下面三种作用：</p><ul><li>用来存储相关指令的某些执行结果</li><li>用来为CPU执行相关指令提供行为依据</li><li>用来控制CPU的相关工作方式</li></ul><p>程序状态字 = PSW。</p><h3 id="_11-1-zf标志-0标志位" tabindex="-1"><a class="header-anchor" href="#_11-1-zf标志-0标志位"><span>11.1 ZF标志 0标志位</span></a></h3><p>flag的第六位是ZF，0标志位。</p><p>它记录相关指令执行后，其结果是否为0，如果结果为0，那么ZF=1，结果结果不为0，那么ZF=0；</p><p>add/sub/mul/div/inc/or/and，运算指令，影响标志位寄存器。</p><p>mov/push/pop 传送指令，对标志寄存器无影响。</p><h3 id="_11-2-pf标志-奇偶标志位" tabindex="-1"><a class="header-anchor" href="#_11-2-pf标志-奇偶标志位"><span>11.2 PF标志 奇偶标志位</span></a></h3><p>flag的第2位是PF，奇偶标志位。 他记录相关指令执行后，其结果的所有bit位中1的个数是否为偶数。如果1的个数为偶数，pf=1，如果为奇数，pf=0</p><h3 id="_11-3-sf标志-正负标志位" tabindex="-1"><a class="header-anchor" href="#_11-3-sf标志-正负标志位"><span>11.3 SF标志 正负标志位</span></a></h3><p>flag寄存器的第七位。 记录相关指令执行后，其结果是否为负。如果为负，sf=1；如果非负，sf=0。</p><h3 id="_11-4-cf标志-进位标志位" tabindex="-1"><a class="header-anchor" href="#_11-4-cf标志-进位标志位"><span>11.4 CF标志 进位标志位</span></a></h3><p>CF 进位标志位</p><p>CF是对无符号运算有意义的标志位。</p><p>mov al, 98H add al,al ;执行后 (al)=30H, CF=1，</p><p>mov al.97H sub al,98H ;执行后：(al)=FFH,CF=1 sub al,al ;执行后 (al)=0,CF=0</p><h3 id="_11-5-of标志-溢出标志位" tabindex="-1"><a class="header-anchor" href="#_11-5-of标志-溢出标志位"><span>11.5 OF标志 溢出标志位</span></a></h3><p>溢出标志位。</p><p>OF记录了有符号数运算的结果是否发生了溢出。</p><p>如果发生溢出，OF=1，如果没有，OF=0</p><p>OF是对有符号数运算有意义的标志位。</p><p>mov al,F0H add al,88H</p><p>add 指令执行后：CF=1,OF=0. 对于无符号运算，F0H+78H有进位，CF=1 对于有符号运算，F0H+78H发生溢出，OF=1</p><p>mov al,F0H add al,78H</p><p>add 指令执行后：CF=1，OF=0. 对于无符号运算，F0H+78H有进位，CF=1； 对于有符号运算，F0H+78H不产生溢出，OF=0；</p><h3 id="_11-6-adc-指令" tabindex="-1"><a class="header-anchor" href="#_11-6-adc-指令"><span>11.6 adc 指令</span></a></h3><p>adb是带进位加法指令，它利用了CF位上记录的进位值。</p><p>adc ax,bx (ax)=(ax)+(bx)+CF</p><p>如果CF的值是被sub指令设置的，那么他的含义就是借位值； 如果CS是被add指令设置的，他们他的含义就是进位值。</p><p>加法可以分两步来进行：</p><ul><li>1 低位相加</li><li>2 高位相加再加上低位相加产生的进位值。</li></ul><p>CPU提供adc指令的目的，就是进行加法的第二步运算的。</p><p>adc指令和add指令相配合就可以对更大的数据进行加法运算。</p><h3 id="_11-7-sbb指令" tabindex="-1"><a class="header-anchor" href="#_11-7-sbb指令"><span>11.7 sbb指令</span></a></h3><p>sbb是带借位减法指令，他利用了CF位上记录的借位值。</p><p>sbb ax,bx (ax)=(ax)-(bx)-CF</p><p>sbb和adc是基于同样的思想设计的两条指令。</p><h3 id="_11-8-cmp指令" tabindex="-1"><a class="header-anchor" href="#_11-8-cmp指令"><span>11.8 cmp指令</span></a></h3><p>cmp指令执行后，将对标志寄存器产生影响。</p><p>其他相关指令通过识别这些被影响的标志寄存器未来得知比较结果。</p><p>cmp ax,bx</p><p>如果(ax)=(bx) 则(ax)-(bx)=0 所以：zf=1 如果(ax)!=(bx) 则(ax)-(bx)!=0 所以：zf=0 如果(ax)&lt;(bx) 则(ax)-(bx)将产生错位 所以:cf=1 如果(ax)&gt;=(bx) 则(ax)-(bx)不必错位 所以:cf=0 如果(ax)&gt;(bx) 则(ax)-(bx)不必错位，结果又不为0，所以:cf=0 并且 zf=0 如果(ax)&lt;=(bx) 则(ax)-(bx)即可能借位，结果可能为0，所以：cf=1 或 zf=1</p><p>zf=1, (ax)=(bx) zf=0, (ax)!=(bx) cf=1, (ax)&lt;(bx) cf=0, (ax)&gt;=(bx) cf=0 &amp;&amp; zf=0, (ax)&gt;(bx) cf=1 || zf=1, (ax)&lt;=(bx)</p><p>通add,sub指令一样，CPU在执行cmp指令的时候，也包含两种含义：</p><ul><li>进行无符号数运算</li><li>进行有符号数运算</li></ul><p>上面是进行无符号数比较时，相关标志位对比较结果的记录。</p><p>在考察sf（得知实际的结果的政府）的同时考察of（得知有没有移除），就可以得知逻辑上真正结果的政府，同时就可以知道比较的结果。</p><p>com ah,bh为例：</p><ul><li>如果sf=1，而of=0 <ul><li>of=0，说明没有溢出，逻辑上真正结果的正负=实际结果的正负。</li><li>sf=1，实际结果为负，所以逻辑上真正的结果为负，所以（ah）&lt; （bh）</li></ul></li><li>如果sf=0，而of=0 <ul><li>of=0，说明没有溢出，逻辑上真正结果的正负=实际结果的正负。</li><li>sf=1，实际结果为非负，所以逻辑上真正的结果为非负，所以（ah）&gt;= （bh）</li></ul></li><li>如果sf=1，而of=1 <ul><li>of=1，说明有移除，逻辑上真正结果的正负！=实际结果的正负；</li><li>(ah) &gt; (bh)</li></ul></li><li>如果sf=0，而of=1 <ul><li>(ah) &lt; (bh)</li></ul></li></ul><h3 id="_11-9-检测比较结果的条件转移指令" tabindex="-1"><a class="header-anchor" href="#_11-9-检测比较结果的条件转移指令"><span>11.9 检测比较结果的条件转移指令</span></a></h3><p>转移指的是他能够修改IP，而条件指的是他可以根据某种条件，决定是否修改IP。</p><p>cmp指令可以同时进行两种比较，无符号数比较和有符号数比较，所以根据cmp指令的比较结果进行转移的指令也分为两种。</p><p>根据无符号数的比较结果进行转移的条件转移指令（他们检测，zf，cf的值）和根据有符号数的比较结果进行转移的条件指令（检测sf、of、zf的值）</p><p>下面是根据无符号数的比较结果进行转移的条件转移指令： je 等于则转移 zf=1 jne 不等于则转移 zf=0 jb 低于则转移 cf=1 jnb 不低于则转移 cf=0 ja 高于则转移 cf=0且zf=0 jna 不高于则转移 cf=1活zf=1</p>`,510)]))}const h=i(e,[["render",p],["__file","Assembly-Language-4th-Edition-Wang-Shuang.html.vue"]]),o=JSON.parse('{"path":"/public-articles/Assembly-Language-4th-Edition-Wang-Shuang.html","title":"汇编语言","lang":"zh-CN","frontmatter":{"description":"汇编语言 0. 8086CPU常用debug命令 在学习和调试 8086CPU 程序时，通常使用 DEBUG 工具（DOS 自带调试程序），可以通过命令直接与程序进行交互。以下是 DEBUG 中常用的一些命令及其解释： 常用命令 1. R（Register 显示/修改寄存器） 功能：显示或修改 CPU 寄存器的内容。 用法： 输入 R：显示所有寄存器的...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/public-articles/Assembly-Language-4th-Edition-Wang-Shuang.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"汇编语言"}],["meta",{"property":"og:description","content":"汇编语言 0. 8086CPU常用debug命令 在学习和调试 8086CPU 程序时，通常使用 DEBUG 工具（DOS 自带调试程序），可以通过命令直接与程序进行交互。以下是 DEBUG 中常用的一些命令及其解释： 常用命令 1. R（Register 显示/修改寄存器） 功能：显示或修改 CPU 寄存器的内容。 用法： 输入 R：显示所有寄存器的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"汇编语言\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1735284358000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":25,"url":"https://github.com/biezhihua"},{"name":"zhihua.bzh","username":"zhihua.bzh","email":"zhihua.bzh@alibaba-inc.com","commits":4,"url":"https://github.com/zhihua.bzh"}]},"readingTime":{"minutes":97.84,"words":29353},"filePathRelative":"public-articles/Assembly-Language-4th-Edition-Wang-Shuang.md","localizedDate":"2024年12月27日","excerpt":"","autoDesc":true}');export{h as comp,o as data};
