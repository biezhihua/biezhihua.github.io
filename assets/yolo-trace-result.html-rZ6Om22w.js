import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as s,f as r,o as n}from"./app-CSplTqru.js";const e={};function l(i,o){return n(),s("div",null,o[0]||(o[0]=[r('<h1 id="yolo-训练结果" tabindex="-1"><a class="header-anchor" href="#yolo-训练结果"><span>YOLO 训练结果</span></a></h1><p>我们来详细解释 YOLO (特别是 YOLOv5/v7/v8 等常见版本) 训练日志中这些关键列的含义：</p><ol><li><p><strong><code>epoch</code></strong>:</p><ul><li><strong>含义：</strong> 当前训练的轮次（Epoch）。一个 Epoch 表示模型已经完整地遍历了整个训练数据集一次。</li><li><strong>用途：</strong> 跟踪训练进度，观察指标随训练轮次的变化趋势。</li></ul></li><li><p><strong><code>train/box_loss</code></strong>:</p><ul><li><strong>含义：</strong> <strong>训练集</strong>上的<strong>边界框回归损失</strong> (Bounding Box Loss)。</li><li><strong>计算：</strong> 衡量模型预测的边界框 (x, y, w, h) 与真实标注框 (Ground Truth) 之间的差异。通常使用 CIOU Loss、DIOU Loss 或 GIOU Loss 等改进的 IoU 损失函数。</li><li><strong>目标：</strong> 这个值<strong>越低越好</strong>。表示模型预测的框位置和大小越准确。</li><li><strong>关注点：</strong> 下降趋势是否平稳？是否收敛？</li></ul></li><li><p><strong><code>train/obj_loss</code></strong>:</p><ul><li><strong>含义：</strong> <strong>训练集</strong>上的<strong>目标存在性损失</strong> (Objectness Loss)。</li><li><strong>计算：</strong> 衡量模型预测的“该网格/锚框内存在目标物体”的置信度（通常是 0 到 1 之间的概率）与真实情况（1 表示有目标，0 表示无目标）之间的差异。通常使用二元交叉熵损失 (Binary Cross-Entropy Loss)。</li><li><strong>目标：</strong> 这个值<strong>越低越好</strong>。表示模型能更准确地判断哪些位置有物体（减少漏检和误检）。</li><li><strong>关注点：</strong> 与 <code>box_loss</code> 一起观察，理解模型定位和检测置信度的学习情况。</li></ul></li><li><p><strong><code>train/cls_loss</code></strong>:</p><ul><li><strong>含义：</strong> <strong>训练集</strong>上的<strong>分类损失</strong> (Classification Loss)。</li><li><strong>计算：</strong> 衡量模型对检测到的目标物体预测的类别概率分布与真实类别标签之间的差异。通常使用交叉熵损失 (Cross-Entropy Loss)。</li><li><strong>目标：</strong> 这个值<strong>越低越好</strong>。表示模型能更准确地区分不同的物体类别。</li><li><strong>关注点：</strong> 如果分类任务困难或类别不平衡，这个损失可能相对较高。</li></ul></li><li><p><strong><code>metrics/precision</code></strong>:</p><ul><li><strong>含义：</strong> <strong>验证集</strong>上的<strong>精确率</strong>。</li><li><strong>计算：</strong> <code>Precision = TP / (TP + FP)</code>。在所有模型预测为正例（检测到物体）的样本中，有多少是真正的正例（确实是物体且类别正确）。</li><li><strong>目标：</strong> <strong>越高越好</strong> (接近 1)。高 Precision 意味着模型检测到的物体中，误检（False Positives/FP，把背景或错误类别当成目标）的比例低。</li><li><strong>关注点：</strong> 模型预测结果的“纯净度”。</li></ul></li><li><p><strong><code>metrics/recall</code></strong>:</p><ul><li><strong>含义：</strong> <strong>验证集</strong>上的<strong>召回率</strong>（也称为查全率）。</li><li><strong>计算：</strong> <code>Recall = TP / (TP + FN)</code>。在所有真实存在的正例（标注的物体）中，有多少被模型成功检测出来（预测为正例且类别正确）。</li><li><strong>目标：</strong> <strong>越高越好</strong> (接近 1)。高 Recall 意味着模型漏检（False Negatives/FN，真实物体没检测到）的比例低。</li><li><strong>关注点：</strong> 模型检测物体的“覆盖率”。</li></ul></li><li><p><strong><code>metrics/mAP_0.5</code></strong>:</p><ul><li><strong>含义：</strong> <strong>验证集</strong>上，在 <strong>IoU 阈值为 0.5</strong> 时计算的平均精度均值 (mean Average Precision)。</li><li><strong>计算：</strong> 这是目标检测最核心的综合评价指标之一。它首先计算每个类别的 AP (Average Precision)，即在不同置信度阈值下，Precision-Recall 曲线下的面积。然后将所有类别的 AP 求平均得到 mAP。这里的 IoU 阈值固定为 0.5（即预测框与真实框的重叠面积占并集面积 &gt;=50% 才认为检测正确）。</li><li><strong>目标：</strong> <strong>越高越好</strong> (范围 0~1)。这是衡量模型整体检测性能的关键指标。mAP@0.5 是相对宽松的标准，关注物体是否被大致框出来。</li><li><strong>关注点：</strong> 训练过程中最重要的监控指标之一，综合反映了检测的准确性和召回率。</li></ul></li><li><p><strong><code>metrics/mAP_0.5:0.95</code></strong> (有时简写为 <code>mAP</code> 或 <code>mAP@[.5:.95]</code>):</p><ul><li><strong>含义：</strong> <strong>验证集</strong>上，在 <strong>IoU 阈值从 0.5 到 0.95，步长 0.05</strong> (即 0.5, 0.55, 0.6, ..., 0.95) 的多个阈值下计算的平均精度均值的<strong>再平均</strong>。</li><li><strong>计算：</strong> 对每个 IoU 阈值（0.5 到 0.95，步长 0.05，共 10 个阈值）都计算一次 mAP，然后将这 10 个 mAP 值求平均。</li><li><strong>目标：</strong> <strong>越高越好</strong> (范围 0~1)。这是衡量模型定位精度的<strong>更严格、更全面</strong>的核心指标。它要求预测框与真实框有更高的重叠度（从 50% 到 95%），能更好地反映模型预测框的精确性。</li><li><strong>关注点：</strong> 训练过程中另一个极其重要的监控指标，尤其关注定位精度。通常比 <code>mAP_0.5</code> 低很多。</li></ul></li><li><p><strong><code>val/box_loss</code></strong>:</p><ul><li><strong>含义：</strong> <strong>验证集</strong>上的<strong>边界框回归损失</strong>。</li><li><strong>目标/关注点：</strong> 与 <code>train/box_loss</code> 类似，但反映的是模型在未参与训练的验证数据上的定位能力。理想情况下应与 <code>train/box_loss</code> 趋势一致且接近。如果 <code>val/box_loss</code> 远高于 <code>train/box_loss</code>，可能出现过拟合。</li></ul></li><li><p><strong><code>val/obj_loss</code></strong>:</p><ul><li><strong>含义：</strong> <strong>验证集</strong>上的<strong>目标存在性损失</strong>。</li><li><strong>目标/关注点：</strong> 与 <code>train/obj_loss</code> 类似，反映模型在验证集上判断有无目标的能力。同样需关注与训练损失的差距。</li></ul></li><li><p><strong><code>val/cls_loss</code></strong>:</p><ul><li><strong>含义：</strong> <strong>验证集</strong>上的<strong>分类损失</strong>。</li><li><strong>目标/关注点：</strong> 与 <code>train/cls_loss</code> 类似，反映模型在验证集上的分类能力。关注与训练损失的差距。</li></ul></li><li><p><strong><code>x/lr0</code></strong>, <strong><code>x/lr1</code></strong>, <strong><code>x/lr2</code></strong>:</p><ul><li><strong>含义：</strong> 当前 epoch 使用的<strong>学习率</strong> (Learning Rate)。在 YOLOv5/v7/v8 中，模型通常被分为不同的<strong>参数组</strong>（Parameter Groups），每组可以应用不同的学习率。这是优化器（如 SGD, Adam）的关键超参数。</li><li><strong>常见分组 (以 YOLOv5 为例):</strong><ul><li><strong><code>lr0</code> (或 <code>pg0</code>):</strong> 通常对应<strong>卷积层权重</strong> (Conv Weights) 的学习率。这是最主要的学习率。</li><li><strong><code>lr1</code> (或 <code>pg1</code>):</strong> 通常对应<strong>批归一化层权重和偏置</strong> (BatchNorm Weights &amp; Biases) 的学习率。这个学习率<strong>通常设置为 <code>lr0</code> 的一个倍数</strong> (例如，在 YOLOv5 中默认是 <code>lr0 * hyp[&#39;obj_lr&#39;]</code>，<code>obj_lr</code> 默认为 1.0，即通常与 <code>lr0</code> 相同)。</li><li><strong><code>lr2</code> (或 <code>pg2</code>):</strong> 通常对应<strong>其他所有参数</strong>（如偏置项 Bias，通常不包括在 pg1 中的 BN 参数）的学习率。这个学习率<strong>也通常设置为 <code>lr0</code> 的一个倍数</strong> (例如，在 YOLOv5 中默认是 <code>lr0 * hyp[&#39;bias_lr&#39;]</code>，<code>bias_lr</code> 默认为 1.0，即通常也与 <code>lr0</code> 相同)。</li></ul></li><li><strong>用途：</strong> 监控学习率调度器（如 Cosine, Step, Linear）的工作情况。你会看到学习率随着 epoch 增加而下降（如果是衰减策略）。确保学习率按预期变化对于训练成功至关重要。如果使用自定义的超参数 (<code>hyp.yaml</code>)，这里的值会反映你的设置。</li></ul></li></ol><p><strong>总结与监控要点：</strong></p><ul><li><strong>核心监控指标：</strong> <code>metrics/mAP_0.5</code> 和 <code>metrics/mAP_0.5:0.95</code> 是最重要的，直接反映模型在验证集上的最终性能。目标是它们随着训练持续上升并趋于稳定。</li><li><strong>损失函数：</strong> <code>train/*_loss</code> 和 <code>val/*_loss</code> 反映训练过程。期望看到它们逐渐下降并收敛。<code>val_loss</code> 显著高于 <code>train_loss</code> 可能是过拟合的信号。</li><li><strong>Precision/Recall 权衡：</strong> 观察 <code>metrics/precision</code> 和 <code>metrics/recall</code>。高 Precision 低 Recall 意味着检测框准但漏检多；低 Precision 高 Recall 意味着检测框多但误检也多。根据应用需求调整置信度阈值可以在这两者之间取得平衡（训练日志反映的是默认阈值，通常是 0.001 或 0.25 的结果）。</li><li><strong>学习率：</strong> 检查 <code>x/lr0</code>, <code>x/lr1</code>, <code>x/lr2</code> 是否按预期调度（如逐渐衰减）。不恰当的学习率是训练失败最常见的原因之一。</li><li><strong>收敛判断：</strong> 当 <code>mAP</code> 指标在连续多个 epoch 内不再显著提升（甚至开始轻微下降），且训练/验证损失趋于稳定时，通常意味着模型已经收敛，可以考虑停止训练或调整学习率策略。</li></ul><p>理解这些指标的含义对于分析 YOLO 模型的训练过程、诊断问题（如欠拟合、过拟合）以及比较不同模型或超参数配置的性能至关重要。</p>',6)]))}const d=t(e,[["render",l],["__file","yolo-trace-result.html.vue"]]),a=JSON.parse('{"path":"/public-articles/yolo-trace-result.html","title":"YOLO 训练结果","lang":"zh-CN","frontmatter":{"description":"YOLO 训练结果 我们来详细解释 YOLO (特别是 YOLOv5/v7/v8 等常见版本) 训练日志中这些关键列的含义： epoch: 含义： 当前训练的轮次（Epoch）。一个 Epoch 表示模型已经完整地遍历了整个训练数据集一次。 用途： 跟踪训练进度，观察指标随训练轮次的变化趋势。 train/box_loss: 含义： 训练集上的边界框回...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/public-articles/yolo-trace-result.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"YOLO 训练结果"}],["meta",{"property":"og:description","content":"YOLO 训练结果 我们来详细解释 YOLO (特别是 YOLOv5/v7/v8 等常见版本) 训练日志中这些关键列的含义： epoch: 含义： 当前训练的轮次（Epoch）。一个 Epoch 表示模型已经完整地遍历了整个训练数据集一次。 用途： 跟踪训练进度，观察指标随训练轮次的变化趋势。 train/box_loss: 含义： 训练集上的边界框回..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-19T08:12:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-19T08:12:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"YOLO 训练结果\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-19T08:12:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1760861542000,"updatedTime":1760861542000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":1,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":6.47,"words":1942},"filePathRelative":"public-articles/yolo-trace-result.md","localizedDate":"2025年10月19日","excerpt":"","autoDesc":true}');export{d as comp,a as data};
