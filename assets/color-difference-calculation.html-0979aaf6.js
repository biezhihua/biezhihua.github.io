import{_ as n,Y as a,Z as s,a2 as e}from"./framework-301d0703.js";const o={},t=e(`<h1 id="color-difference-calculation" tabindex="-1"><a class="header-anchor" href="#color-difference-calculation" aria-hidden="true">#</a> Color Difference Calculation</h1><h2 id="偏色计算" tabindex="-1"><a class="header-anchor" href="#偏色计算" aria-hidden="true">#</a> 偏色计算</h2><p>偏色计算通常涉及比较两种颜色，并确定它们之间的数值差异。这可以通过多种方法完成，其中最简单的一种是在RGB颜色空间中使用欧几里得距离。这种方法计算两种颜色作为RGB颜色立方体中的点的距离。</p><h3 id="十六进制颜色表示" tabindex="-1"><a class="header-anchor" href="#十六进制颜色表示" aria-hidden="true">#</a> 十六进制颜色表示</h3><ul><li>十六进制颜色格式为<code>#RRGGBB</code>，其中<code>RR</code>、<code>GG</code>和<code>BB</code>是从00到FF的两位十六进制数（十进制中是0到255）。这些表示红色、绿色和蓝色成分的强度。</li></ul><h3 id="从十六进制转换为rgb" tabindex="-1"><a class="header-anchor" href="#从十六进制转换为rgb" aria-hidden="true">#</a> 从十六进制转换为RGB</h3><ul><li>首先，需要将十六进制值转换为RGB（红色、绿色、蓝色）格式。例如： <ul><li><code>#ADA5D4</code>转换为RGB(173, 165, 212)。</li><li><code>#0C0C06</code>转换为RGB(12, 12, 6)。</li></ul></li></ul><h3 id="计算颜色差异" tabindex="-1"><a class="header-anchor" href="#计算颜色差异" aria-hidden="true">#</a> 计算颜色差异</h3><ul><li>这两种颜色在RGB空间的欧几里得距离可以使用以下公式计算： [ \\text{距离} = \\sqrt{(R_2 - R_1)^2 + (G_2 - G_1)^2 + (B_2 - B_1)^2} ] 其中( R_1, G_1, B_1 )是第一种颜色的RGB值，( R_2, G_2, B_2 )是第二种颜色的RGB值。</li></ul><h3 id="python示例计算" tabindex="-1"><a class="header-anchor" href="#python示例计算" aria-hidden="true">#</a> Python示例计算</h3><p>这里是如何在Python中进行计算的示例：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> math

<span class="token keyword">def</span> <span class="token function">hex_to_rgb</span><span class="token punctuation">(</span>hex_color<span class="token punctuation">)</span><span class="token punctuation">:</span>
    hex_color <span class="token operator">=</span> hex_color<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># 移除&#39;#&#39;符号</span>
    <span class="token keyword">return</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>hex_color<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将十六进制转换为十进制</span>

<span class="token keyword">def</span> <span class="token function">calculate_color_difference</span><span class="token punctuation">(</span>color1<span class="token punctuation">,</span> color2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    rgb1 <span class="token operator">=</span> hex_to_rgb<span class="token punctuation">(</span>color1<span class="token punctuation">)</span>
    rgb2 <span class="token operator">=</span> hex_to_rgb<span class="token punctuation">(</span>color2<span class="token punctuation">)</span>
    <span class="token keyword">return</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c2 <span class="token operator">-</span> c1<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> c1<span class="token punctuation">,</span> c2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>rgb1<span class="token punctuation">,</span> rgb2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 示例使用</span>
color1 <span class="token operator">=</span> <span class="token string">&quot;#ADA5D4&quot;</span>
color2 <span class="token operator">=</span> <span class="token string">&quot;#0C0C06&quot;</span>
difference <span class="token operator">=</span> calculate_color_difference<span class="token punctuation">(</span>color1<span class="token punctuation">,</span> color2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;颜色差异: </span><span class="token interpolation"><span class="token punctuation">{</span>difference<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此示例提供了一个简单的函数，用于将十六进制颜色转换为RGB，并使用另一个函数来计算它们之间的欧几里得距离，有效地测量一种颜色在视觉上与另一种颜色的差异。这是一种基本方法，在许多应用中都很有效，尽管在更多色彩关键的应用中可能会使用CIE76、CIE94、CIE2000等更复杂的颜色差异公式，以适应人类视觉的变异性。</p><h2 id="demo" tabindex="-1"><a class="header-anchor" href="#demo" aria-hidden="true">#</a> Demo</h2><p>def hex_to_rgb(hex_color): hex_color = hex_color.lstrip(&#39;#&#39;) return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))</p><p>def color_difference(rgb1, rgb2): return tuple(abs(c1 - c2) for c1, c2 in zip(rgb1, rgb2))</p><p>def is_within_color_range(color_string, color_to_check): base_color, tolerance_color = color_string.split(&#39;-&#39;)</p><pre><code>rgb_check = hex_to_rgb(color_to_check)
rgb_base = hex_to_rgb(base_color)
rgb_tolerance = hex_to_rgb(tolerance_color)

# Calculate the acceptable difference between the base color and the tolerance color
tolerance_diff = color_difference(rgb_base, rgb_tolerance)

# Calculate the actual difference between the color to check and the base color
actual_diff = color_difference(rgb_check, rgb_base)

# Check if the actual difference is within the tolerance range
return all(a &lt;= t for a, t in zip(actual_diff, tolerance_diff))
</code></pre><h1 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h1><p>color_string = &quot;#ADA5D4-#0C0C06&quot; color_to_check = &quot;#ADA5D4&quot; result = is_within_color_range(color_string, color_to_check) print(&quot;颜色是否在范围内:&quot;, result)</p>`,20),c=[t];function p(l,r){return a(),s("div",null,c)}const u=n(o,[["render",p],["__file","color-difference-calculation.html.vue"]]);export{u as default};
