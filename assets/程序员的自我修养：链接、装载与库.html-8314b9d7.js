const l=JSON.parse('{"key":"v-100103c8","path":"/learn-reverse-engineering/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%9A%E9%93%BE%E6%8E%A5%E3%80%81%E8%A3%85%E8%BD%BD%E4%B8%8E%E5%BA%93.html","title":"程序员的自我修养：链接、装载与库","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"第1部分 简介","slug":"第1部分-简介","link":"#第1部分-简介","children":[{"level":3,"title":"第1章 温故而知新","slug":"第1章-温故而知新","link":"#第1章-温故而知新","children":[]}]},{"level":2,"title":"第2部分 静态链接","slug":"第2部分-静态链接","link":"#第2部分-静态链接","children":[{"level":3,"title":"第2章 编译和链接","slug":"第2章-编译和链接","link":"#第2章-编译和链接","children":[]},{"level":3,"title":"第3章 目标文件里有什么","slug":"第3章-目标文件里有什么","link":"#第3章-目标文件里有什么","children":[]},{"level":3,"title":"第4章 静态链接","slug":"第4章-静态链接","link":"#第4章-静态链接","children":[]},{"level":3,"title":"第5章 Windows PE/COFF","slug":"第5章-windows-pe-coff","link":"#第5章-windows-pe-coff","children":[]}]},{"level":2,"title":"第3部分 装载与动态链接","slug":"第3部分-装载与动态链接","link":"#第3部分-装载与动态链接","children":[{"level":3,"title":"第6章 可执行文件的装载与进程","slug":"第6章-可执行文件的装载与进程","link":"#第6章-可执行文件的装载与进程","children":[]},{"level":3,"title":"第7章 动态链接","slug":"第7章-动态链接","link":"#第7章-动态链接","children":[]},{"level":3,"title":"第8章 Linux共享库的组织","slug":"第8章-linux共享库的组织","link":"#第8章-linux共享库的组织","children":[]},{"level":3,"title":"第9章 Windows下的动态链接","slug":"第9章-windows下的动态链接","link":"#第9章-windows下的动态链接","children":[]}]},{"level":2,"title":"第4部分 库与运行库","slug":"第4部分-库与运行库","link":"#第4部分-库与运行库","children":[{"level":3,"title":"第10章 内存","slug":"第10章-内存","link":"#第10章-内存","children":[]},{"level":3,"title":"第11章 运行库","slug":"第11章-运行库","link":"#第11章-运行库","children":[]},{"level":3,"title":"第12章 系统调用与API","slug":"第12章-系统调用与api","link":"#第12章-系统调用与api","children":[]},{"level":3,"title":"第13章 运行库实现","slug":"第13章-运行库实现","link":"#第13章-运行库实现","children":[]}]},{"level":2,"title":"兼容x86指令集的32位CPU的个人计算机，CPU的核心频率是指什么？","slug":"兼容x86指令集的32位cpu的个人计算机-cpu的核心频率是指什么","link":"#兼容x86指令集的32位cpu的个人计算机-cpu的核心频率是指什么","children":[{"level":3,"title":"一、核心频率的本质","slug":"一、核心频率的本质","link":"#一、核心频率的本质","children":[]},{"level":3,"title":"二、核心频率的作用","slug":"二、核心频率的作用","link":"#二、核心频率的作用","children":[]},{"level":3,"title":"三、x86 32 位 CPU 的典型频率","slug":"三、x86-32-位-cpu-的典型频率","link":"#三、x86-32-位-cpu-的典型频率","children":[]},{"level":3,"title":"四、核心频率的误区","slug":"四、核心频率的误区","link":"#四、核心频率的误区","children":[]},{"level":3,"title":"五、技术影响","slug":"五、技术影响","link":"#五、技术影响","children":[]},{"level":3,"title":"六、总结","slug":"六、总结","link":"#六、总结","children":[]}]},{"level":2,"title":"Linux系统架构图和Windows系统架构图","slug":"linux系统架构图和windows系统架构图","link":"#linux系统架构图和windows系统架构图","children":[{"level":3,"title":"1. Linux 系统架构图（分层模型）","slug":"_1-linux-系统架构图-分层模型","link":"#_1-linux-系统架构图-分层模型","children":[]},{"level":3,"title":"2. Windows 系统架构图（混合模型）","slug":"_2-windows-系统架构图-混合模型","link":"#_2-windows-系统架构图-混合模型","children":[]},{"level":3,"title":"3. 核心差异对比","slug":"_3-核心差异对比","link":"#_3-核心差异对比","children":[]},{"level":3,"title":"4. 典型应用场景","slug":"_4-典型应用场景","link":"#_4-典型应用场景","children":[]}]},{"level":2,"title":"原因在于早在几十年前，CPU就发展出了动态调度，在执行程序的时候为了提高效率有可能交换指令的顺序。同样，编译器在进行优化的时候，也可能为了效率而交换毫不相干的两条相邻指令（如x=1和r1=y）的执行顺序。","slug":"原因在于早在几十年前-cpu就发展出了动态调度-在执行程序的时候为了提高效率有可能交换指令的顺序。同样-编译器在进行优化的时候-也可能为了效率而交换毫不相干的两条相邻指令-如x-1和r1-y-的执行顺序。","link":"#原因在于早在几十年前-cpu就发展出了动态调度-在执行程序的时候为了提高效率有可能交换指令的顺序。同样-编译器在进行优化的时候-也可能为了效率而交换毫不相干的两条相邻指令-如x-1和r1-y-的执行顺序。","children":[{"level":3,"title":"一、指令重排序的本质与动机","slug":"一、指令重排序的本质与动机","link":"#一、指令重排序的本质与动机","children":[]},{"level":3,"title":"二、多线程环境下的风险","slug":"二、多线程环境下的风险","link":"#二、多线程环境下的风险","children":[]},{"level":3,"title":"三、解决方案：内存屏障与内存模型","slug":"三、解决方案-内存屏障与内存模型","link":"#三、解决方案-内存屏障与内存模型","children":[]},{"level":3,"title":"四、开发者应对策略","slug":"四、开发者应对策略","link":"#四、开发者应对策略","children":[]},{"level":3,"title":"五、示例：DCLP问题的修正","slug":"五、示例-dclp问题的修正","link":"#五、示例-dclp问题的修正","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"字节序（Byte Order）","slug":"字节序-byte-order","link":"#字节序-byte-order","children":[]},{"level":2,"title":"字节序","slug":"字节序","link":"#字节序","children":[{"level":3,"title":"一、字节序的定义","slug":"一、字节序的定义","link":"#一、字节序的定义","children":[]},{"level":3,"title":"二、字节序的常见应用场景","slug":"二、字节序的常见应用场景","link":"#二、字节序的常见应用场景","children":[]},{"level":3,"title":"三、如何区分字节序？","slug":"三、如何区分字节序","link":"#三、如何区分字节序","children":[]},{"level":3,"title":"四、字节序的实际影响","slug":"四、字节序的实际影响","link":"#四、字节序的实际影响","children":[]},{"level":3,"title":"五、总结","slug":"五、总结","link":"#五、总结","children":[]}]},{"level":2,"title":"列举ELF文件中的常用段","slug":"列举elf文件中的常用段","link":"#列举elf文件中的常用段","children":[{"level":3,"title":"一、代码与数据段","slug":"一、代码与数据段","link":"#一、代码与数据段","children":[]},{"level":3,"title":"二、符号与链接信息段","slug":"二、符号与链接信息段","link":"#二、符号与链接信息段","children":[]},{"level":3,"title":"三、动态链接相关段","slug":"三、动态链接相关段","link":"#三、动态链接相关段","children":[]},{"level":3,"title":"四、调试与元信息段","slug":"四、调试与元信息段","link":"#四、调试与元信息段","children":[]},{"level":3,"title":"五、初始化与终止段","slug":"五、初始化与终止段","link":"#五、初始化与终止段","children":[]},{"level":3,"title":"六、其他实用段","slug":"六、其他实用段","link":"#六、其他实用段","children":[]},{"level":3,"title":"七、工具操作示例","slug":"七、工具操作示例","link":"#七、工具操作示例","children":[]},{"level":3,"title":"总结","slug":"总结-1","link":"#总结-1","children":[]}]},{"level":2,"title":"simplesection.o","slug":"simplesection-o","link":"#simplesection-o","children":[]},{"level":2,"title":"上面是ubuntu 64位操作系统的目标文件和链接文件，帮我详细解释里面的汇编命令。","slug":"上面是ubuntu-64位操作系统的目标文件和链接文件-帮我详细解释里面的汇编命令。","link":"#上面是ubuntu-64位操作系统的目标文件和链接文件-帮我详细解释里面的汇编命令。","children":[{"level":3,"title":"一、核心代码段分析（.text）","slug":"一、核心代码段分析-text","link":"#一、核心代码段分析-text","children":[]},{"level":3,"title":"二、关键指令详解","slug":"二、关键指令详解","link":"#二、关键指令详解","children":[]},{"level":3,"title":"三、重定位与符号解析","slug":"三、重定位与符号解析","link":"#三、重定位与符号解析","children":[]},{"level":3,"title":"四、内存布局总结","slug":"四、内存布局总结","link":"#四、内存布局总结","children":[]},{"level":3,"title":"五、完整执行流程","slug":"五、完整执行流程","link":"#五、完整执行流程","children":[]},{"level":3,"title":"六、调试技巧","slug":"六、调试技巧","link":"#六、调试技巧","children":[]}]},{"level":2,"title":"链接器提供的默认链接规则是指什么？  有什么作用？","slug":"链接器提供的默认链接规则是指什么-有什么作用","link":"#链接器提供的默认链接规则是指什么-有什么作用","children":[{"level":3,"title":"一、默认链接规则详解","slug":"一、默认链接规则详解","link":"#一、默认链接规则详解","children":[]},{"level":3,"title":"二、默认规则的作用","slug":"二、默认规则的作用","link":"#二、默认规则的作用","children":[]},{"level":3,"title":"三、默认规则的覆盖与调试","slug":"三、默认规则的覆盖与调试","link":"#三、默认规则的覆盖与调试","children":[]},{"level":3,"title":"四、总结","slug":"四、总结","link":"#四、总结","children":[]}]},{"level":2,"title":"汇编代码","slug":"汇编代码","link":"#汇编代码","children":[{"level":3,"title":"一、代码结构与功能概览","slug":"一、代码结构与功能概览","link":"#一、代码结构与功能概览","children":[]},{"level":3,"title":"二、内联汇编详解","slug":"二、内联汇编详解","link":"#二、内联汇编详解","children":[]},{"level":3,"title":"三、入口函数nomain()","slug":"三、入口函数nomain","link":"#三、入口函数nomain","children":[]},{"level":3,"title":"四、编译与运行","slug":"四、编译与运行","link":"#四、编译与运行","children":[]},{"level":3,"title":"五、潜在问题与改进","slug":"五、潜在问题与改进","link":"#五、潜在问题与改进","children":[]},{"level":3,"title":"六、总结","slug":"六、总结-1","link":"#六、总结-1","children":[]}]},{"level":2,"title":"Windows11下 WinNT.h 文件在哪里存放？","slug":"windows11下-winnt-h-文件在哪里存放","link":"#windows11下-winnt-h-文件在哪里存放","children":[{"level":3,"title":"一、默认存放路径","slug":"一、默认存放路径","link":"#一、默认存放路径","children":[]},{"level":3,"title":"二、如何确认是否安装了 SDK？","slug":"二、如何确认是否安装了-sdk","link":"#二、如何确认是否安装了-sdk","children":[]},{"level":3,"title":"三、如何安装/修复 Windows SDK？","slug":"三、如何安装-修复-windows-sdk","link":"#三、如何安装-修复-windows-sdk","children":[]},{"level":3,"title":"四、开发环境中的路径配置","slug":"四、开发环境中的路径配置","link":"#四、开发环境中的路径配置","children":[]},{"level":3,"title":"五、常见问题解决","slug":"五、常见问题解决","link":"#五、常见问题解决","children":[]},{"level":3,"title":"六、总结","slug":"六、总结-2","link":"#六、总结-2","children":[]}]},{"level":2,"title":"编译与链接中，未决议的符号是指什么？","slug":"编译与链接中-未决议的符号是指什么","link":"#编译与链接中-未决议的符号是指什么","children":[{"level":3,"title":"一、未决议符号的常见表现","slug":"一、未决议符号的常见表现","link":"#一、未决议符号的常见表现","children":[]},{"level":3,"title":"二、未决议符号的常见原因","slug":"二、未决议符号的常见原因","link":"#二、未决议符号的常见原因","children":[]},{"level":3,"title":"三、解决未决议符号的方法","slug":"三、解决未决议符号的方法","link":"#三、解决未决议符号的方法","children":[]},{"level":3,"title":"四、调试工具辅助定位","slug":"四、调试工具辅助定位","link":"#四、调试工具辅助定位","children":[]},{"level":3,"title":"五、总结","slug":"五、总结-1","link":"#五、总结-1","children":[]}]},{"level":2,"title":"编译和汇编中， 链接时重定位和装载时重定位有什么区别？ 各自应用场景是什么？","slug":"编译和汇编中-链接时重定位和装载时重定位有什么区别-各自应用场景是什么","link":"#编译和汇编中-链接时重定位和装载时重定位有什么区别-各自应用场景是什么","children":[{"level":3,"title":"一、链接时重定位（Link-Time Relocation）","slug":"一、链接时重定位-link-time-relocation","link":"#一、链接时重定位-link-time-relocation","children":[]},{"level":3,"title":"二、装载时重定位（Load-Time Relocation）","slug":"二、装载时重定位-load-time-relocation","link":"#二、装载时重定位-load-time-relocation","children":[]},{"level":3,"title":"三、核心对比总结","slug":"三、核心对比总结","link":"#三、核心对比总结","children":[]},{"level":3,"title":"四、实际开发中的选择建议","slug":"四、实际开发中的选择建议","link":"#四、实际开发中的选择建议","children":[]},{"level":3,"title":"五、技术演进与混合模式","slug":"五、技术演进与混合模式","link":"#五、技术演进与混合模式","children":[]}]},{"level":2,"title":"操作系统中的内核空间和用户空间","slug":"操作系统中的内核空间和用户空间","link":"#操作系统中的内核空间和用户空间","children":[{"level":3,"title":"一、内核空间与用户空间的核心区别","slug":"一、内核空间与用户空间的核心区别","link":"#一、内核空间与用户空间的核心区别","children":[]},{"level":3,"title":"二、内存隔离的实现原理","slug":"二、内存隔离的实现原理","link":"#二、内存隔离的实现原理","children":[]},{"level":3,"title":"三、用户空间与内核空间的交互","slug":"三、用户空间与内核空间的交互","link":"#三、用户空间与内核空间的交互","children":[]},{"level":3,"title":"四、内核空间的职责","slug":"四、内核空间的职责","link":"#四、内核空间的职责","children":[]},{"level":3,"title":"五、用户空间的限制与优势","slug":"五、用户空间的限制与优势","link":"#五、用户空间的限制与优势","children":[]},{"level":3,"title":"六、实际场景与影响","slug":"六、实际场景与影响","link":"#六、实际场景与影响","children":[]},{"level":3,"title":"七、总结","slug":"七、总结","link":"#七、总结","children":[]}]},{"level":2,"title":"Microsoft Visual Studio 中的crt0.c文件在哪个目录？","slug":"microsoft-visual-studio-中的crt0-c文件在哪个目录","link":"#microsoft-visual-studio-中的crt0-c文件在哪个目录","children":[{"level":3,"title":"1. 默认路径","slug":"_1-默认路径","link":"#_1-默认路径","children":[]},{"level":3,"title":"2. 注意事项","slug":"_2-注意事项","link":"#_2-注意事项","children":[]},{"level":3,"title":"3. 验证与调试","slug":"_3-验证与调试","link":"#_3-验证与调试","children":[]},{"level":3,"title":"4. 相关文件","slug":"_4-相关文件","link":"#_4-相关文件","children":[]},{"level":3,"title":"总结","slug":"总结-2","link":"#总结-2","children":[]}]},{"level":2,"title":"i386、x32 与 x64 的区别及演化过程","slug":"i386、x32-与-x64-的区别及演化过程","link":"#i386、x32-与-x64-的区别及演化过程","children":[{"level":3,"title":"一、i386 的定义","slug":"一、i386-的定义","link":"#一、i386-的定义","children":[]},{"level":3,"title":"二、x32、x64 与 i386 的区别","slug":"二、x32、x64-与-i386-的区别","link":"#二、x32、x64-与-i386-的区别","children":[]},{"level":3,"title":"三、架构演化过程","slug":"三、架构演化过程","link":"#三、架构演化过程","children":[]},{"level":3,"title":"四、总结与对比","slug":"四、总结与对比","link":"#四、总结与对比","children":[]},{"level":3,"title":"五、实际应用建议","slug":"五、实际应用建议","link":"#五、实际应用建议","children":[]}]},{"level":2,"title":"在linux环境下GLIBC 2.41运行库是如何运行一个用户编写的main函数的？上面是从书中摘抄的一些描述，但是有些老旧了，更新局最新的linux和glibc版本，为我解释main函数执行的全生命周期过程，并给出关键点的源码摘要。","slug":"在linux环境下glibc-2-41运行库是如何运行一个用户编写的main函数的-上面是从书中摘抄的一些描述-但是有些老旧了-更新局最新的linux和glibc版本-为我解释main函数执行的全生命周期过程-并给出关键点的源码摘要。","link":"#在linux环境下glibc-2-41运行库是如何运行一个用户编写的main函数的-上面是从书中摘抄的一些描述-但是有些老旧了-更新局最新的linux和glibc版本-为我解释main函数执行的全生命周期过程-并给出关键点的源码摘要。","children":[{"level":3,"title":"一、程序启动的全生命周期","slug":"一、程序启动的全生命周期","link":"#一、程序启动的全生命周期","children":[]},{"level":3,"title":"二、关键源码逻辑解析","slug":"二、关键源码逻辑解析","link":"#二、关键源码逻辑解析","children":[]},{"level":3,"title":"三、现代 Linux/GLIBC 的变化","slug":"三、现代-linux-glibc-的变化","link":"#三、现代-linux-glibc-的变化","children":[]},{"level":3,"title":"四、生命周期流程图","slug":"四、生命周期流程图","link":"#四、生命周期流程图","children":[]},{"level":3,"title":"总结","slug":"总结-3","link":"#总结-3","children":[]}]},{"level":2,"title":"在Windows环境下MSVC CRT是如何运行一个用户编写的main函数的？为我解释main函数执行的全生命周期过程，并给出关键点的源码摘要","slug":"在windows环境下msvc-crt是如何运行一个用户编写的main函数的-为我解释main函数执行的全生命周期过程-并给出关键点的源码摘要","link":"#在windows环境下msvc-crt是如何运行一个用户编写的main函数的-为我解释main函数执行的全生命周期过程-并给出关键点的源码摘要","children":[{"level":3,"title":"一、程序启动的全生命周期","slug":"一、程序启动的全生命周期-1","link":"#一、程序启动的全生命周期-1","children":[]},{"level":3,"title":"二、关键源码逻辑解析","slug":"二、关键源码逻辑解析-1","link":"#二、关键源码逻辑解析-1","children":[]},{"level":3,"title":"三、现代 MSVC CRT 的变化","slug":"三、现代-msvc-crt-的变化","link":"#三、现代-msvc-crt-的变化","children":[]},{"level":3,"title":"四、生命周期流程图","slug":"四、生命周期流程图-1","link":"#四、生命周期流程图-1","children":[]},{"level":3,"title":"总结","slug":"总结-4","link":"#总结-4","children":[]}]},{"level":2,"title":"帮我解释windows中的PE结构，每个细节都要有说明和解释，并使用最新的头文件。","slug":"帮我解释windows中的pe结构-每个细节都要有说明和解释-并使用最新的头文件。","link":"#帮我解释windows中的pe结构-每个细节都要有说明和解释-并使用最新的头文件。","children":[{"level":3,"title":"一、PE 结构全景图","slug":"一、pe-结构全景图","link":"#一、pe-结构全景图","children":[]},{"level":3,"title":"二、PE 结构逐层解析","slug":"二、pe-结构逐层解析","link":"#二、pe-结构逐层解析","children":[]},{"level":3,"title":"三、核心数据目录详解","slug":"三、核心数据目录详解","link":"#三、核心数据目录详解","children":[]},{"level":3,"title":"四、PE 加载与执行流程","slug":"四、pe-加载与执行流程","link":"#四、pe-加载与执行流程","children":[]},{"level":3,"title":"五、现代 PE 特性扩展","slug":"五、现代-pe-特性扩展","link":"#五、现代-pe-特性扩展","children":[]},{"level":3,"title":"六、工具与调试","slug":"六、工具与调试","link":"#六、工具与调试","children":[]},{"level":3,"title":"总结","slug":"总结-5","link":"#总结-5","children":[]}]}],"git":{"createdTime":1739794231000,"updatedTime":1740931790000,"contributors":[{"name":"biezhihua","email":"biezhihua@gmail.com","commits":16}]},"readingTime":{"minutes":153.15,"words":45946},"filePathRelative":"learn-reverse-engineering/程序员的自我修养：链接、装载与库.md","localizedDate":"2025年2月17日","excerpt":""}');export{l as data};
