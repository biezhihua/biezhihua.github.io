import{_ as n,Y as a,Z as s,a2 as t}from"./framework-301d0703.js";const p={},e=t(`<h1 id="callable-如何使用" tabindex="-1"><a class="header-anchor" href="#callable-如何使用" aria-hidden="true">#</a> Callable 如何使用</h1><p><strong>Callable 的使用方法</strong></p><p>在 Python 中，<code>Callable</code> 是 <code>typing</code> 模块中的一个类型提示（type hint），用于指示一个对象是可调用的（例如函数、方法、实现了 <code>__call__</code> 方法的类实例等）。使用 <code>Callable</code>，你可以对函数参数和返回值进行更精确的类型注解，特别是在涉及函数作为参数或返回值的情况下。</p><p>下面我将详细介绍 <code>Callable</code> 的使用方法，包括如何使用它进行类型注解，以及一些实际的示例。</p><h2 id="一、导入-callable" tabindex="-1"><a class="header-anchor" href="#一、导入-callable" aria-hidden="true">#</a> 一、导入 <code>Callable</code></h2><p>首先，你需要从 <code>typing</code> 模块中导入 <code>Callable</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二、基本用法" tabindex="-1"><a class="header-anchor" href="#二、基本用法" aria-hidden="true">#</a> 二、基本用法</h2><p><code>Callable</code> 的基本形式如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>参数类型列表<span class="token punctuation">]</span><span class="token punctuation">,</span> 返回值类型<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>参数类型列表</strong>：一个列表，包含可调用对象的参数类型。</li><li><strong>返回值类型</strong>：可调用对象的返回类型。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable

<span class="token keyword">def</span> <span class="token function">process_data</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>process_data</code> 函数接受一个可调用对象 <code>func</code>，它必须是接受两个 <code>int</code> 参数并返回 <code>int</code> 的函数。</p><h2 id="三、使用-callable-进行类型注解" tabindex="-1"><a class="header-anchor" href="#三、使用-callable-进行类型注解" aria-hidden="true">#</a> 三、使用 <code>Callable</code> 进行类型注解</h2><h3 id="_1-注解函数参数" tabindex="-1"><a class="header-anchor" href="#_1-注解函数参数" aria-hidden="true">#</a> 1. 注解函数参数</h3><p>假设你有一个函数，它接受另一个函数作为参数：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable

<span class="token keyword">def</span> <span class="token function">apply_function</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，<code>func</code> 是一个可调用对象，接受一个 <code>float</code> 参数，返回一个 <code>float</code>。</p><h3 id="_2-注解函数返回值" tabindex="-1"><a class="header-anchor" href="#_2-注解函数返回值" aria-hidden="true">#</a> 2. 注解函数返回值</h3><p>你也可以使用 <code>Callable</code> 来注解函数的返回值：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable

<span class="token keyword">def</span> <span class="token function">get_operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b
    <span class="token keyword">return</span> add
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>get_operation</code> 函数返回一个可调用对象，该对象接受两个 <code>int</code> 参数并返回一个 <code>int</code>。</p><h2 id="四、参数类型为任意类型" tabindex="-1"><a class="header-anchor" href="#四、参数类型为任意类型" aria-hidden="true">#</a> 四、参数类型为任意类型</h2><p>如果你不关心可调用对象的参数类型，可以使用省略号 <code>...</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable

<span class="token keyword">def</span> <span class="token function">logger</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Function is called&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个示例中，<code>func</code> 是一个可调用对象，接受任意参数，返回 <code>None</code>。</p><h2 id="五、实际示例" tabindex="-1"><a class="header-anchor" href="#五、实际示例" aria-hidden="true">#</a> 五、实际示例</h2><h3 id="示例1-回调函数" tabindex="-1"><a class="header-anchor" href="#示例1-回调函数" aria-hidden="true">#</a> 示例1：回调函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable

<span class="token keyword">def</span> <span class="token function">register_callback</span><span class="token punctuation">(</span>callback<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token comment"># 模拟一些操作</span>
    data <span class="token operator">=</span> <span class="token string">&quot;Event data&quot;</span>
    <span class="token comment"># 调用回调函数</span>
    callback<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">my_callback</span><span class="token punctuation">(</span>event_data<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Received event data: </span><span class="token interpolation"><span class="token punctuation">{</span>event_data<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

register_callback<span class="token punctuation">(</span>my_callback<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><code>register_callback</code> 函数接受一个回调函数 <code>callback</code>，它接受一个 <code>str</code> 参数并返回 <code>None</code>。</li><li><code>my_callback</code> 函数符合这个类型签名，可以作为回调函数传入。</li></ul><h3 id="示例2-高阶函数" tabindex="-1"><a class="header-anchor" href="#示例2-高阶函数" aria-hidden="true">#</a> 示例2：高阶函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> List

<span class="token keyword">def</span> <span class="token function">map_function</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>func<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x

result <span class="token operator">=</span> map_function<span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 输出 [1, 4, 9, 16]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><code>map_function</code> 接受一个函数 <code>func</code>，它将被应用于数据列表中的每个元素。</li><li><code>square</code> 函数符合所需的类型，可以作为参数传入。</li></ul><h2 id="六、使用泛型-typevar" tabindex="-1"><a class="header-anchor" href="#六、使用泛型-typevar" aria-hidden="true">#</a> 六、使用泛型 <code>TypeVar</code></h2><p>使用 <code>TypeVar</code> 可以使 <code>Callable</code> 更加通用：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> TypeVar

T <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span>
R <span class="token operator">=</span> TypeVar<span class="token punctuation">(</span><span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">apply</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">,</span> R<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> R<span class="token punctuation">:</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>解释：</strong></p><ul><li><code>T</code> 和 <code>R</code> 是类型变量，表示任意类型。</li><li><code>apply</code> 函数可以接受任何类型的参数和返回值，使其更加通用。</li></ul><h2 id="七、注意事项" tabindex="-1"><a class="header-anchor" href="#七、注意事项" aria-hidden="true">#</a> 七、注意事项</h2><h3 id="_1-参数数量和类型匹配" tabindex="-1"><a class="header-anchor" href="#_1-参数数量和类型匹配" aria-hidden="true">#</a> 1. 参数数量和类型匹配</h3><p>在类型注解中，<code>Callable</code> 的参数类型列表必须与实际可调用对象的参数数量和类型匹配，否则类型检查器会发出警告。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable

<span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a

<span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b

<span class="token keyword">def</span> <span class="token function">use_func</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

use_func<span class="token punctuation">(</span>func1<span class="token punctuation">)</span>  <span class="token comment"># 正常</span>
use_func<span class="token punctuation">(</span>func2<span class="token punctuation">)</span>  <span class="token comment"># 类型检查器会警告参数数量不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用-any-类型" tabindex="-1"><a class="header-anchor" href="#_2-使用-any-类型" aria-hidden="true">#</a> 2. 使用 <code>Any</code> 类型</h3><p>如果参数类型或返回类型不确定，可以使用 <code>Any</code>：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> Any

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>
    <span class="token keyword">return</span> a

<span class="token keyword">def</span> <span class="token function">use_func</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>Any<span class="token punctuation">]</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、与-union-和其他类型结合" tabindex="-1"><a class="header-anchor" href="#八、与-union-和其他类型结合" aria-hidden="true">#</a> 八、与 <code>Union</code> 和其他类型结合</h2><p><code>Callable</code> 可以与 <code>Union</code> 等类型结合使用，表示可调用对象可以有多种类型的参数或返回值。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> Union

<span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">[</span>Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Union<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="九、总结" tabindex="-1"><a class="header-anchor" href="#九、总结" aria-hidden="true">#</a> 九、总结</h2><ul><li><strong><code>Callable</code> 的作用</strong>：用于类型注解，表示一个对象是可调用的，并指定其参数和返回值类型。</li><li><strong>基本语法</strong>：<code>Callable[[参数类型列表], 返回值类型]</code>，参数类型列表使用列表形式，返回值类型紧跟其后。</li><li><strong>参数类型不确定时</strong>：可以使用 <code>...</code> 或 <code>Any</code>，表示接受任意参数类型。</li><li><strong>提高代码可读性和安全性</strong>：使用 <code>Callable</code> 有助于类型检查，提高代码的可维护性。</li></ul><p><strong>示例：完整的代码使用 <code>Callable</code></strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> Any

<span class="token keyword">def</span> <span class="token function">execute_function</span><span class="token punctuation">(</span>func<span class="token punctuation">:</span> Callable<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> Any<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">:</span> Any<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Any<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Executing function...&quot;</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Function executed.&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result

<span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span>

output <span class="token operator">=</span> execute_function<span class="token punctuation">(</span>greet<span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>  <span class="token comment"># 输出 &quot;Hello, Alice!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>希望以上内容能够帮助你理解如何使用 <code>Callable</code> 进行类型注解，以及它的实际应用场景。</p>`,56),o=[e];function c(l,i){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","pyhont-callable.html.vue"]]);export{d as default};
