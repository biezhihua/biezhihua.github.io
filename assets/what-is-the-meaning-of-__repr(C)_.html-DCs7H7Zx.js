import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as t,f as s,o as a}from"./app-C6SdGSfv.js";const r={};function n(h,e){return a(),t("div",null,e[0]||(e[0]=[s(`<h1 id="what-is-the-meaning-of-repr-c" tabindex="-1"><a class="header-anchor" href="#what-is-the-meaning-of-repr-c"><span>What is the meaning of <code>#[repr(C)]</code></span></a></h1><p>在 Rust 中，<code>#[repr(C)]</code> 属性用于指定结构体的内存布局。这个属性特别在与 C 语言接口交互时非常有用，因为它确保了结构体的布局与 C 语言中的布局兼容。</p><p>让我们来详细解释这段代码：</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">#[repr(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">C</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;">)]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">pub</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StretchSize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">f32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repr-c" tabindex="-1"><a class="header-anchor" href="#repr-c"><span><code>#[repr(C)]</code></span></a></h3><ul><li><code>#[repr(C)]</code> 是一个属性（attribute），用于指示编译器使用与 C 语言相同的内存布局来表示该结构体。</li><li>在 Rust 中，默认的结构体布局（称为 &quot;Rust 布局&quot;）是未指定的，且编译器可能会对字段进行重排以优化内存使用或性能。当与 C 代码交互时，这可能会导致问题，因为 C 语言有固定的、预定义的内存布局。</li><li>使用 <code>#[repr(C)]</code> 可以保证结构体的字段按照它们在代码中声明的顺序来布局，与 C 语言结构体兼容。</li></ul><h3 id="pub-struct-stretchsize" tabindex="-1"><a class="header-anchor" href="#pub-struct-stretchsize"><span><code>pub struct StretchSize</code></span></a></h3><ul><li><code>pub struct StretchSize</code> 定义了一个名为 <code>StretchSize</code> 的公共（public）结构体。</li><li><code>pub</code> 关键字表示这个结构体在当前模块之外也是可见的，也就是说，其他模块的代码可以访问这个结构体。</li></ul><h3 id="结构体字段" tabindex="-1"><a class="header-anchor" href="#结构体字段"><span>结构体字段</span></a></h3><ul><li><code>width: f32</code> 和 <code>height: f32</code> 是 <code>StretchSize</code> 结构体的两个字段，分别表示宽度和高度。</li><li>这两个字段都是 <code>f32</code> 类型，即 32 位浮点数，这在 Rust 中是一个常用的浮点类型。</li></ul><h3 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途</span></a></h3><p>这样定义的 <code>StretchSize</code> 结构体通常用于以下情况：</p><ul><li>当你需要将这个结构体传递给 C 语言编写的函数，或从 C 语言函数接收数据时。</li><li>当你在 Rust 中操作一些需要与 C 语言兼容的二进制数据时。</li></ul><p>总之，使用 <code>#[repr(C)]</code> 属性是确保与 C 语言的互操作性的一种重要方式。它允许 Rust 程序员明确控制数据的内存布局，从而可以安全地与 C 语言代码或库进行接口对接。</p>`,14)]))}const c=i(r,[["render",n],["__file","what-is-the-meaning-of-__repr(C)_.html.vue"]]),o=JSON.parse('{"path":"/public-articles/what-is-the-meaning-of-__repr(C)_.html","title":"What is the meaning of #[repr(C)]","lang":"zh-CN","frontmatter":{"description":"What is the meaning of #[repr(C)] 在 Rust 中，#[repr(C)] 属性用于指定结构体的内存布局。这个属性特别在与 C 语言接口交互时非常有用，因为它确保了结构体的布局与 C 语言中的布局兼容。 让我们来详细解释这段代码： #[repr(C)] #[repr(C)] 是一个属性（attribute），用于指示编译...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/public-articles/what-is-the-meaning-of-__repr(C)_.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"What is the meaning of #[repr(C)]"}],["meta",{"property":"og:description","content":"What is the meaning of #[repr(C)] 在 Rust 中，#[repr(C)] 属性用于指定结构体的内存布局。这个属性特别在与 C 语言接口交互时非常有用，因为它确保了结构体的布局与 C 语言中的布局兼容。 让我们来详细解释这段代码： #[repr(C)] #[repr(C)] 是一个属性（attribute），用于指示编译..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is the meaning of #[repr(C)]\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1702541689000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":3,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":1.7,"words":509},"filePathRelative":"public-articles/what-is-the-meaning-of-#[repr(C)].md","localizedDate":"2023年12月14日","excerpt":"","autoDesc":true}');export{c as comp,o as data};
