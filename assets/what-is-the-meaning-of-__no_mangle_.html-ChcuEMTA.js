import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as t,f as i,o as n}from"./app-C6SdGSfv.js";const s={};function o(l,e){return n(),t("div",null,e[0]||(e[0]=[i(`<h1 id="what-is-the-meaning-of-no-mangle" tabindex="-1"><a class="header-anchor" href="#what-is-the-meaning-of-no-mangle"><span>What is the meaning of <code>#[no_mangle]</code></span></a></h1><p>这段 Rust 代码定义了一个可以从 C 语言或其他使用 C ABI (Application Binary Interface) 的语言调用的函数。让我们逐部分解释它：</p><h3 id="no-mangle" tabindex="-1"><a class="header-anchor" href="#no-mangle"><span><code>#[no_mangle]</code></span></a></h3><ul><li><code>#[no_mangle]</code> 是一个编译器指令（attribute），用于告诉 Rust 编译器不要改变这个函数的名字。</li><li>正常情况下，Rust 编译器会对函数名进行修改（称为“mangling”），以支持特性如函数重载等。但是，这会使得使用 C 语言等其他语言很难或无法找到和链接到这个函数。</li><li>使用 <code>#[no_mangle]</code> 可确保函数名在编译后的二进制文件中保持不变，使得其他语言可以通过这个确切的名字来调用该函数。</li></ul><h3 id="pub-extern-c" tabindex="-1"><a class="header-anchor" href="#pub-extern-c"><span><code>pub extern &quot;C&quot;</code></span></a></h3><ul><li><code>pub</code> 表明这个函数是公开的，意味着它可以被同一程序中的其他 Rust 代码或者其他语言的代码调用。</li><li><code>extern &quot;C&quot;</code> 表示这个函数应该使用 C 语言的调用约定（calling convention）。这对于确保从其他语言（特别是 C 语言）正确调用此函数非常重要。</li><li>C 语言调用约定定义了如何传递参数、如何处理栈、如何返回值等，这对于跨语言的函数调用是必需的。</li></ul><h3 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义"><span>函数定义</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> hello_from_rust</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello from Rust!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分定义了函数的具体行为。当这个函数被调用时，它会执行 <code>println!</code> 宏，输出字符串 &quot;Hello from Rust!&quot; 到控制台。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h3><ul><li>这样的函数定义常用于创建可以被 C 语言或其他使用 C ABI 的语言调用的 Rust 库。</li><li>例如，你可能有一个用 Rust 编写的库，你希望它能够被 C 语言编写的程序使用。通过这种方式定义函数，C 程序就可以链接并调用这个 Rust 函数。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>通过组合使用 <code>#[no_mangle]</code> 和 <code>extern &quot;C&quot;</code>，这段代码定义了一个可以从 C 语言环境安全调用的 Rust 函数，同时保证了函数名在编译过程中不会被更改。这是 Rust 与其他语言（特别是 C 语言）互操作时的一种常见模式。</p>`,13)]))}const c=a(s,[["render",o],["__file","what-is-the-meaning-of-__no_mangle_.html.vue"]]),p=JSON.parse('{"path":"/public-articles/what-is-the-meaning-of-__no_mangle_.html","title":"What is the meaning of #[no_mangle]","lang":"zh-CN","frontmatter":{"description":"What is the meaning of #[no_mangle] 这段 Rust 代码定义了一个可以从 C 语言或其他使用 C ABI (Application Binary Interface) 的语言调用的函数。让我们逐部分解释它： #[no_mangle] #[no_mangle] 是一个编译器指令（attribute），用于告诉 Rust...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/public-articles/what-is-the-meaning-of-__no_mangle_.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"What is the meaning of #[no_mangle]"}],["meta",{"property":"og:description","content":"What is the meaning of #[no_mangle] 这段 Rust 代码定义了一个可以从 C 语言或其他使用 C ABI (Application Binary Interface) 的语言调用的函数。让我们逐部分解释它： #[no_mangle] #[no_mangle] 是一个编译器指令（attribute），用于告诉 Rust..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What is the meaning of #[no_mangle]\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1702541897000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":3,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":1.83,"words":549},"filePathRelative":"public-articles/what-is-the-meaning-of-#[no_mangle].md","localizedDate":"2023年12月14日","excerpt":"","autoDesc":true}');export{c as comp,p as data};
