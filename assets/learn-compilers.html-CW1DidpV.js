import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as a,f as l,o as p}from"./app-D_L6RMuN.js";const s="/public-articles/learn-compilers.png",t={};function c(n,i){return p(),a("div",null,i[0]||(i[0]=[l('<h1 id="learn-compilers" tabindex="-1"><a class="header-anchor" href="#learn-compilers"><span>Learn | Compilers</span></a></h1><p><img src="'+s+`" alt=""></p><h2 id="什么是编译" tabindex="-1"><a class="header-anchor" href="#什么是编译"><span>什么是编译</span></a></h2><blockquote><p>Bilibili: https://www.bilibili.com/video/BV1dL4y1H7T8?p=1&amp;vd_source=7067fca17f42bb32fbfaf035206bde26</p></blockquote><h3 id="计算机程序设计语言及编译" tabindex="-1"><a class="header-anchor" href="#计算机程序设计语言及编译"><span>计算机程序设计语言及编译</span></a></h3><ul><li><p>高级语言 High Level Language</p><ul><li>自然语言的简洁形式</li><li>x = 2</li></ul></li><li><p>汇编语言 Assembly Language</p><ul><li>引入助记符</li><li>MOV X,2</li></ul></li><li><p>机器语言 Machine Language</p><ul><li>可以被计算机直接理解</li><li>C706 0000 0002</li></ul></li><li><p>高级语言 -&gt; 汇编语言 = 编译 Compiling</p></li><li><p>高级语言 -&gt; 机器语言 = 编译 Compiling</p></li><li><p>汇编语言 -&gt; 机器语言 = 汇编 Assembiling</p></li></ul><h3 id="编译器在语言处理系统中的位置" tabindex="-1"><a class="header-anchor" href="#编译器在语言处理系统中的位置"><span>编译器在语言处理系统中的位置</span></a></h3><ul><li>源程序</li><li>预处理器 preprocessor</li><li>经过预处理的源程序</li><li>编译器</li><li>汇编语言程序</li><li>汇编器 Assembler</li><li>可重定位的机器代码 Relocatable</li><li>链接器 Linker、加载器 Loader</li><li>目标机器代码</li></ul><h2 id="编译系统的结构" tabindex="-1"><a class="header-anchor" href="#编译系统的结构"><span>编译系统的结构</span></a></h2><h3 id="人工英汉翻译的例子" tabindex="-1"><a class="header-anchor" href="#人工英汉翻译的例子"><span>人工英汉翻译的例子</span></a></h3><blockquote><p>https://zhuanlan.zhihu.com/p/362072187</p></blockquote><p>源语言句子 -&gt; 第一步：分析源语言 -&gt; 句子的语义 -&gt; 第二步：生成目标语言 -&gt; 目标语言句子</p><ul><li>分析源语言 <ul><li>语义分析 Semantic Analysis</li><li>语法分析 Syntax Analysis</li><li>词法分析 Lexical Analysis</li></ul></li></ul><p><img src="https://pic1.zhimg.com/80/v2-030d08a420bca7456162086ecb04c704_720w.webp" alt=""></p><h3 id="编译器结构" tabindex="-1"><a class="header-anchor" href="#编译器结构"><span>编译器结构</span></a></h3><ul><li>词法分析器 -&gt; 词法单元流</li><li>语法分析器 -&gt; 语法树</li><li>语义分析器 -&gt; 语法树</li><li>中间代码生成器 -&gt; 中间表示形式</li><li>机器无关代码优化器</li><li>目标代码生成器 -&gt; 目标机器语言</li><li>机器相关代码优化器</li></ul><p><img src="https://pic2.zhimg.com/80/v2-6c3637f5e5bbbc839e178f810c113895_720w.webp" alt=""></p><ul><li>编译器前端</li><li>编译器后端</li></ul><h2 id="词法分析-扫描-scanning-概述" tabindex="-1"><a class="header-anchor" href="#词法分析-扫描-scanning-概述"><span>词法分析/扫描(Scanning) 概述</span></a></h2><p>编译的第一个阶段，从左到右逐行扫描源程序的字符，识别出各个单词(是高级语言中有是在意义的最小语法单元，由字符构成)，确定单词的类型。将识别的单词转换成统一的机内表示即词法单元 简称Token。</p><p>token:&lt;种别码，属性值&gt;</p><p><img src="https://pic4.zhimg.com/80/v2-51b995febf4f2e7c055cb0740c3f4527_720w.webp" alt=""></p><p>下面图中是一个词法分析后得到的token序列的例子：</p><p><img src="https://pic3.zhimg.com/80/v2-7c6928e62b7657127220f05fc9083822_720w.webp" alt=""></p><h2 id="语法分析-parsing-概述" tabindex="-1"><a class="header-anchor" href="#语法分析-parsing-概述"><span>语法分析(parsing) 概述</span></a></h2><h3 id="语法分析的定义" tabindex="-1"><a class="header-anchor" href="#语法分析的定义"><span>语法分析的定义</span></a></h3><p>语法分析器从词法分析器输出的 token 序列中识别出各类短语，并构造语法分析树(parse tree)，语法分析树描述了句子的语法结构。</p><p><img src="https://pic4.zhimg.com/80/v2-4c011627644419f6eed405c9ef739ff7_720w.webp" alt=""></p><h3 id="语法分析的规则" tabindex="-1"><a class="header-anchor" href="#语法分析的规则"><span>语法分析的规则</span></a></h3><p>即语法规则又称文法，规定了单词如何构成短语、句子、过程和程序。</p><p>语法规则的标示如下，含义是A定义为B或者C</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>BNF:A::=B∣C</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;句子&gt;::=&lt;主&gt;&lt;谓&gt;&lt;宾&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;主&gt;::=&lt;定&gt;&lt;名&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="语法分析的方法" tabindex="-1"><a class="header-anchor" href="#语法分析的方法"><span>语法分析的方法</span></a></h3><p>推导(derive)和归约(reduce)</p><p>推导：最左推导、最右推导 归约：最右归约、最左归约,推导的逆过程就是归约</p><h3 id="例子-赋值语句的分析树" tabindex="-1"><a class="header-anchor" href="#例子-赋值语句的分析树"><span>例子：赋值语句的分析树</span></a></h3><p><img src="https://pic2.zhimg.com/80/v2-a14ebfe5942e78da4e79a6a93f0dcf25_720w.webp" alt=""></p><h3 id="例子-变量声明语句的分析树" tabindex="-1"><a class="header-anchor" href="#例子-变量声明语句的分析树"><span>例子：变量声明语句的分析树</span></a></h3><p><img src="https://pic1.zhimg.com/80/v2-58b789adf66113d62dd172760c781ba4_720w.webp" alt=""></p><h2 id="语义分析-概述" tabindex="-1"><a class="header-anchor" href="#语义分析-概述"><span>语义分析 概述</span></a></h2><h3 id="语义分析的主要任务" tabindex="-1"><a class="header-anchor" href="#语义分析的主要任务"><span>语义分析的主要任务</span></a></h3><h4 id="收集标识符的属性信息" tabindex="-1"><a class="header-anchor" href="#收集标识符的属性信息"><span>收集标识符的属性信息</span></a></h4><ul><li>种属(Kind)： 简单变量、复合变量(数组、记录、...)、过程、...</li><li>类型 (Type)：整型、实型、字符型、布尔型、指针型、...</li><li>存储位置、长度 <ul><li><img src="https://pic3.zhimg.com/80/v2-26cc7c62cc9d0c77bfcfea454b422292_720w.webp" alt=""></li></ul></li><li>值</li><li>作用域</li><li>参数和返回值信息，参数个数、参数类型、参数传递方式、返回值类型、...</li></ul><p>语义分析阶段收集的标识符的信息都会存储在一个符号表里，每个标识符都对应符号表中的一条记录，记录的每个字段记录标识符的每个属性，符号表通常带有一个字符串表用来存放程序中用到的标识符和字符常数，Name 就会被分为两个部分，一部分存放标识符在字符串表中的起始位置，另一部分用来存储标识符的长度，符号表如下图： <img src="https://pic1.zhimg.com/80/v2-30d4f4fcef94a9ee860b0ece9647f450_720w.webp" alt=""></p><p>除了符号表还有常量表(登记各类常量表)；标号表(登记标号的定义和应用，不常用目标)；入口名表(登记过程的层号、程序符号表入口等)，各种表的生成大部分在词法分析阶段但是在后面各个阶段都有维护；</p><h4 id="语义检查" tabindex="-1"><a class="header-anchor" href="#语义检查"><span>语义检查</span></a></h4><ul><li>变量或过程未经声明就使用</li><li>变量或过程名重复声明</li><li>运算分量类型不匹配</li><li>操作符与操作数之间的类型不匹配 <ul><li>数组下标不是整数</li><li>对非数组变量使用数组访问操作符</li><li>对非过程名使用过程调用操作符</li><li>过程调用的<strong>参数类型或数目不匹配</strong></li><li>函数返回类型有误</li></ul></li></ul><h2 id="中间代码生成及编译器后端" tabindex="-1"><a class="header-anchor" href="#中间代码生成及编译器后端"><span>中间代码生成及编译器后端</span></a></h2><h3 id="常用的中间代码表示形式" tabindex="-1"><a class="header-anchor" href="#常用的中间代码表示形式"><span>常用的中间代码表示形式</span></a></h3><ul><li>三地址码 (Three-address Code)： <ul><li>三地址码由类似于汇编语言的指令序列组成，每个指令最多有三个操作数(operand)</li></ul></li><li>语法结构树/语法树 (Syntax Trees)</li><li>逆波兰式</li></ul><h4 id="三地址指令的表示" tabindex="-1"><a class="header-anchor" href="#三地址指令的表示"><span>三地址指令的表示：</span></a></h4><ul><li>四元式 (Quadruples)，(op, y, z, x)</li><li>三元式 (Triples)</li><li>间接三元式(Indirect triples)</li></ul><p><img src="https://pic3.zhimg.com/80/v2-b2aa99ac42a1abef2b5a921bb8cbc99e_720w.webp" alt=""></p><h3 id="中间代码生成案例" tabindex="-1"><a class="header-anchor" href="#中间代码生成案例"><span>中间代码生成案例</span></a></h3><p><img src="https://pic2.zhimg.com/80/v2-3e61dfb5938cc1b99939e34b63cd7619_720w.webp" alt=""></p>`,55)]))}const o=e(t,[["render",c],["__file","learn-compilers.html.vue"]]),d=JSON.parse('{"path":"/public-articles/learn-compilers.html","title":"Learn | Compilers","lang":"zh-CN","frontmatter":{"article":true,"description":"Learn | Compilers 什么是编译 Bilibili: https://www.bilibili.com/video/BV1dL4y1H7T8?p=1&vd_source=7067fca17f42bb32fbfaf035206bde26 计算机程序设计语言及编译 高级语言 High Level Language 自然语言的简洁形式 x = ...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/public-articles/learn-compilers.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"Learn | Compilers"}],["meta",{"property":"og:description","content":"Learn | Compilers 什么是编译 Bilibili: https://www.bilibili.com/video/BV1dL4y1H7T8?p=1&vd_source=7067fca17f42bb32fbfaf035206bde26 计算机程序设计语言及编译 高级语言 High Level Language 自然语言的简洁形式 x = ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/biezhihua/public-articles/learn-compilers.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Learn | Compilers\\",\\"image\\":[\\"https://github.com/biezhihua/public-articles/learn-compilers.png\\",\\"https://pic1.zhimg.com/80/v2-030d08a420bca7456162086ecb04c704_720w.webp\\",\\"https://pic2.zhimg.com/80/v2-6c3637f5e5bbbc839e178f810c113895_720w.webp\\",\\"https://pic4.zhimg.com/80/v2-51b995febf4f2e7c055cb0740c3f4527_720w.webp\\",\\"https://pic3.zhimg.com/80/v2-7c6928e62b7657127220f05fc9083822_720w.webp\\",\\"https://pic4.zhimg.com/80/v2-4c011627644419f6eed405c9ef739ff7_720w.webp\\",\\"https://pic2.zhimg.com/80/v2-a14ebfe5942e78da4e79a6a93f0dcf25_720w.webp\\",\\"https://pic1.zhimg.com/80/v2-58b789adf66113d62dd172760c781ba4_720w.webp\\",\\"https://pic3.zhimg.com/80/v2-26cc7c62cc9d0c77bfcfea454b422292_720w.webp\\",\\"https://pic1.zhimg.com/80/v2-30d4f4fcef94a9ee860b0ece9647f450_720w.webp\\",\\"https://pic3.zhimg.com/80/v2-b2aa99ac42a1abef2b5a921bb8cbc99e_720w.webp\\",\\"https://pic2.zhimg.com/80/v2-3e61dfb5938cc1b99939e34b63cd7619_720w.webp\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1694144314000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":9,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":4.12,"words":1237},"filePathRelative":"public-articles/learn-compilers.md","localizedDate":"2023年9月8日","excerpt":"","autoDesc":true}');export{o as comp,d as data};
