import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as i,f as a,o as l}from"./app-B-AbqSPw.js";const e={};function p(t,s){return l(),i("div",null,s[0]||(s[0]=[a(`<h1 id="算法应用" tabindex="-1"><a class="header-anchor" href="#算法应用"><span>算法应用</span></a></h1><h2 id="最小值和最大值" tabindex="-1"><a class="header-anchor" href="#最小值和最大值"><span>最小值和最大值</span></a></h2><h3 id="寻找最小值" tabindex="-1"><a class="header-anchor" href="#寻找最小值"><span>寻找最小值</span></a></h3><p>在下面的程序中，我们假设该集合元素存放在数组A中，且A.length = n：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MINIMUM(A)</span></span>
<span class="line"><span>1. min = A[1]</span></span>
<span class="line"><span>2. for i = 2 to n</span></span>
<span class="line"><span>3.     if min &gt; A[i]</span></span>
<span class="line"><span>4.        min = A[i]</span></span>
<span class="line"><span>5. return min</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们得到结论：为了确定最小值，必须要做n-1次比较。因此，从所执行的比较次数来看，算法MINIMUM是最优的。</p><h3 id="同时找到最小值和最大值" tabindex="-1"><a class="header-anchor" href="#同时找到最小值和最大值"><span>同时找到最小值和最大值</span></a></h3><p>事实上，我们只需要最多$3\\left \\lfloor 2/n \\right \\rfloor$次比较就可以同时找到最小值和最大值。具体的方法是记录已知的最小值和最大值。但我们并不是将每一个输人元素与当前的最小值和最大值进行比较一一这样做的代价是每个元素需要 2 次比较，而是对输元素成对地进行处理。首先，我们将一对输人元素相互进行比较，然后把较小的与当前最小值比较，把较大的与当前最大值进行比较。这样，对每两个元素共需 3 次比较。</p><p>如何设定已知的最小值和最大值的初始值依赖于n是奇数还是偶数。如果n是奇数，我们就将最小值和最大值的初值都设为第一个元素的值，然后成对地处理余下的元素。如果n是偶数，就对前两个元素做一次比较，以决定最小值和最大值的初值，然后与n是奇数的情形一样，成对地处理余下的元素。</p><p>如果n是奇数，那么总共进行$3\\left \\lfloor 2/n \\right \\rfloor$次比较。如果n是偶数，则是先进行一次初始比较，然后进行3(n—2)/2次比较，共3n/2-2次比较。因此，不管是哪一种情况，总的比较次数至多是$3\\left \\lfloor 2/n \\right \\rfloor$。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MIN-MAX(A)</span></span>
<span class="line"><span>1  n = A.length</span></span>
<span class="line"><span>2  if n is odd</span></span>
<span class="line"><span>3      min = max = A[1]</span></span>
<span class="line"><span>4  else if A[1] &lt; A[2]</span></span>
<span class="line"><span>5      min = A[1]</span></span>
<span class="line"><span>6      max = A[2]</span></span>
<span class="line"><span>7  else</span></span>
<span class="line"><span>8      min = A[2]</span></span>
<span class="line"><span>9      max = A[1]</span></span>
<span class="line"><span>10 for i = 3 to n-1 step 2</span></span>
<span class="line"><span>11     if A[i] &gt; A[i+1]</span></span>
<span class="line"><span>12         if A[i] &gt; max</span></span>
<span class="line"><span>13             max = A[i]</span></span>
<span class="line"><span>14         if A[i+1] &lt; min</span></span>
<span class="line"><span>15             min = A[i+1]</span></span>
<span class="line"><span>16     else</span></span>
<span class="line"><span>17         if A[i+1] &gt; max</span></span>
<span class="line"><span>18             max = A[i+1]</span></span>
<span class="line"><span>19         if A[i] &lt; min</span></span>
<span class="line"><span>20             min = A[i]</span></span>
<span class="line"><span>21 return (min, max)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该算法首先判断数组的长度 $n$ 是否为奇数，如果是奇数则将 $min$ 和 $max$ 的初值均设为 $A[1]$。如果是偶数，则将 $A[1]$ 和 $A[2]$ 进行比较，将较小的数赋给 $min$，较大的数赋给 $max$。接着，从下标 $3$ 开始遍历数组，每次取两个数进行比较，更新 $min$ 和 $max$ 的值。在比较两个数的大小时，如果 $A[i] &gt; A[i+1]$，则说明 $A[i]$ 可能是最大值，$A[i+1]$ 可能是最小值；如果 $A[i] &lt; A[i+1]$，则说明 $A[i+1]$ 可能是最大值，$A[i]$ 可能是最小值。最后返回最小值和最大值的元组。</p><h2 id="最大子数组问题" tabindex="-1"><a class="header-anchor" href="#最大子数组问题"><span>最大子数组问题</span></a></h2><p>MAXIMUM SUBARRAY PROBLEM</p><p>https://segmentfault.com/a/1190000000733277</p><p>https://en.wikipedia.org/wiki/Maximum_subarray_problem</p><p>https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E5%88%97%E9%97%AE%E9%A2%98</p><h3 id="暴力求解-思路" tabindex="-1"><a class="header-anchor" href="#暴力求解-思路"><span>暴力求解 - 思路</span></a></h3><h3 id="分治策略-思路" tabindex="-1"><a class="header-anchor" href="#分治策略-思路"><span>分治策略 - 思路</span></a></h3><p>假定我们要寻找子数组$A[low.. high]$的最大子数组。</p><p>使用分治策略意味着我们要将子数组划分为两个规模尽量相等的子数组。</p><p>也就是说，找到子数组的中央位置，比如$mid$，然后考虑求解两个子数组$A[low..mid]$和$A[mid+1..high]$，但是仅仅这样还不够，$A[low..high]$的任何连续子数组$A[i..j]$所处的位置必然是以下三种情况之一：</p><ul><li>完全位于子数组$A[low..mid]$中，$low &lt;= i &lt;= j &lt;= mid$。</li><li>完全位于子数组$A[mid+1..high]$中，$min &lt; i &lt;= j &lt;= high$。</li><li>跨越了中点，$low &lt;= i &lt;= mid &lt; j &lt;= high$。</li></ul><p>也就是说，$A[low..high]$的一个最大子数组必然是下列三种情况下的子数组中的和的最大者：</p><ul><li>完全位于$A[low..mid]$中</li><li>完全位于$A[mid+1..high]$中</li><li>完全位于跨越中点$A[low， hight]中</li></ul><p>我们可以递归地求解$A[low..mid]$和$A[mid+1..high]$的最大子数组，因为这两个子问题仍是最大子数组问题，只是规模更小。</p><p>因此，剩下的全部工作就是寻找跨越中点的最大子数组，然后在三种情况中选取和最大者。</p><p>我们可以很容易地在线性时间内求出跨越中点的最大子数组。此问题并非原问题规模更小的实例，因为它加入了限制 - 求出的子数组必须跨越中点。</p><p>任何跨越中点的子数组都由两个子数组$A[i..mid]$和$A[mid+1..j]$组成，其中$low &lt;= i &lt;= min 且 min &lt; j &lt;= high$。</p><p>因此，我们只需找出形如$A[i..mid]$和$A[mid+1..j]$的最大子数组，然后将其合并即可。</p><p>过程FIND-MAX-CROSSING-SUBARRAY接收数组$A$和下标$low$、$mid$和$high$为输入，返回一个下标元组划定跨越中点的最大子数组的边界，并返回最大子数组中值的和。</p><p>FIND-MAX-CROSSING-SUBARRAY(A，low， mid，high)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 left-sum = -oo </span></span>
<span class="line"><span>2 sum = 0 </span></span>
<span class="line"><span>3 for i = mid downto low </span></span>
<span class="line"><span>4       sum = sum+A[i] </span></span>
<span class="line"><span>5       if sum &gt; left-sum </span></span>
<span class="line"><span>6           left-sum = sum </span></span>
<span class="line"><span>7           max-left = i </span></span>
<span class="line"><span>8  right-sum = -oo </span></span>
<span class="line"><span>9  sum = 0 </span></span>
<span class="line"><span>10 for j = mid + 1 to high </span></span>
<span class="line"><span>11      sum = sum + A[j] </span></span>
<span class="line"><span>12      if sum &gt; right-sum </span></span>
<span class="line"><span>13          right-sum = sum </span></span>
<span class="line"><span>14          max-right = j </span></span>
<span class="line"><span>15 return (max-left，max-right，left-sum + right-sum)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此过程的工作方式如下所述：</p><ul><li>第1~7行求出左半部$A[low..mid]$的最大子数组。 <ul><li>由于此子数组必须包含$A[mid]$，第3~7行的for循环的循环变量i是从mid开始，递减直至达到low，因此，它所考察的每个子数组都具有$A[i..mid]$的形式。</li><li>第1~2行初始化变量left-sum和sum，前者保存目前为止找到的最大和，后者保存$A[i..mid]$中所有值的和。</li><li>每当第5行找到一个子数组$A[i..mid]$的和大于left-sum时，我们在第6行将left-sum更新为这个子数组的和，并在第7行更新变量max-left来记录当前下标i。</li></ul></li><li>第8~14求右半部$A[mid+1..high]$的最大子数组，过程与左半部类似。 <ul><li>此处，第10~14行的for循环的循环变量j是从mid+l开始，递增直至达到high，因此，它所考察的每个子数组都具有$A[mid+1..j]$的形式。</li><li>最后，第15行返回下标max-left和max-right，划定跨越中点的最大子数组的边界，并返回子数组$A[max-left. max-right]$的和left-sum+right-sum。</li></ul></li></ul><p>FIND-MAXIMUM-SUBARRAY(A，low，high)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1 if high == low // base case， only one element </span></span>
<span class="line"><span>2       return (low， high， A[low]) </span></span>
<span class="line"><span>3 else mid = ⌊(low+high)⌋ / 2 // recursive case</span></span>
<span class="line"><span>4       (left-low， left-high， left-sum) = FIND-MAXIMUM-SUBARRAY(A， low， mid) </span></span>
<span class="line"><span>5       (right-low， right-high， right-sum) = FIND-MAXIMUM-SUBARRAY(A， mid+l. high) </span></span>
<span class="line"><span>6       (cross-low， cross-high， cross-sum) = FIND-MAX-CROSSING-SUBARRAY(A， low， mid， high) </span></span>
<span class="line"><span>7       if left-sum &gt;= right-sum and left-sum &gt;= cross-sum </span></span>
<span class="line"><span>8           return (left-low， left-high， left-sum) </span></span>
<span class="line"><span>9       elseif right-sum &gt;= left-sum and right-sum &gt;= cross-sum </span></span>
<span class="line"><span>10          return (right-low， right-high， right-sum) </span></span>
<span class="line"><span>11      else return (cross-low， cross-high， cross-sum)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用FIND-MAXIMUM-SUBARRAY(A，1， A. length)会求出$A[1..n]$的最大子数组。</p><ul><li>第1行测试基本情况，即子数组只有一个元素的情况。在此情况下，子数组只有一个子数组——它自身，因此第2行返回一个下标元组，开始和结束下标均指向唯一的元素，并返回此元素的值作为最大和。</li><li>第3~11行处理递归情况。 <ul><li>第3行划分子数组，计算中点下标$mid$。我们称子数组$A[low..mid]$为左子数组，$A[mid+1..high]$为右子数组。因为我们知道子数组$A[low..high]$至少包含两个元元素，则左、右两个子数组各至少包含一个元素。</li><li>第4行和第5行分别递归地求解左右子数组中的最大子数组。</li><li>第6~11行完成合并工作。 <ul><li>第6行，求跨越中点的最大子数组（回忆一下，第6行求解的子问题并非原问题的规模更小的实例，因为我们将其看做合并部分）。</li><li>第7行，检测最大和子数组是否在左子数组中，若是，第8行返回此子数组。</li><li>第9行，否则，检测最大和子数组是否在右子数组中，若是，第10行返回此子数组。</li><li>第11行，如果左、右子数组均不包含最大子数组，则最大子数组必然跨越中点，第11行将其返回。</li></ul></li></ul></li></ul><h3 id="分治策略-分析" tabindex="-1"><a class="header-anchor" href="#分治策略-分析"><span>分治策略 - 分析</span></a></h3><p>FIND-MAXIMUM-SUBARRAY运行时间$T(n)$的递归式： $$ T(n) = \\left{\\begin{matrix} \\Theta (1) &amp; 若n = 1 \\ 2T(n / 2) + \\Theta(n) &amp; 若n &gt;= 1 \\ \\end{matrix}\\right. $$</p><p>$T(n) = \\Theta(nlgn)$</p><h3 id="线性时间-思路" tabindex="-1"><a class="header-anchor" href="#线性时间-思路"><span>线性时间 - 思路</span></a></h3><p>使用如下思想为最大子数组问题设计一个非递归的、线性时间的算法。</p><p>从数组的左边界开始，由左至右处理，记录到目前为止已经处理过的最大子数组。</p><p>若已知$A[1..j]$的最大子数组，基于如下性质将解扩展为$A[1..j+1]$的最大子数组：</p><ul><li>$A[1..j+1]$的最大子数组要么是$A[1..j]$的最大子数组，要么是某个子数组$A[i..j+1](i &lt;= i &lt;= j)$。</li></ul><p>在已知$A[1..j]$的最大子数组的情况下，可以在线性时间内找出形如$A[i..j+1]$的最大子数组。</p><hr><p>Kadane算法扫描一次整个数列的所有数值，在每一个扫描点计算以该点数值为结束点的子数列的最大和（正数和）。</p><p>该子数列由两部分组成：以前一个位置为结束点的最大子数列、该位置的数值。</p><p>因为该算法用到了“最佳子结构”（以每个位置为终点的最大子数列都是基于其前一位置的最大子数列计算得出），该算法可看成动态规划的一个例子。</p><hr><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>int maxsubset(int *a,int l,int r){</span></span>
<span class="line"><span>    int i = 0</span></span>
<span class="line"><span>    int temp = 0;</span></span>
<span class="line"><span>    int summax=INT_MIN;</span></span>
<span class="line"><span>    for(i=l;i&lt;=r;i++){</span></span>
<span class="line"><span>        temp+=a[i];</span></span>
<span class="line"><span>        if(temp &gt; summax) summax=temp;</span></span>
<span class="line"><span>        if(temp &lt; 0) temp=0;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    return summax;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果$A[1..j]$已经得到了其最大子数组，那么$A[1..j+1]$最大子数组只能是两种情况：</p><ul><li>（1）$A[1..j+1]$的最大子数组是$A[1..j]$;</li><li>（2）$A[1..j+1]$的最大子数组是$A[i..j+1]， 1 &lt;= i &lt;= j$;</li></ul><p>如何求得所谓的（2）中的$A[i..j+1]$呢？</p><p>首先需要承认这样的事实，如果一个数组$A[p..r]$求和得到负值，那么数组$A[p..r+1]$的最大子数组肯定不会是$A[p..r+1]$，因为$A[p..r] + A[r+1] &lt; A[r+1]$。</p><p>在以上程序中，我们用temp存储所谓的$A[p..r]$，只要$A[p..r]$的求和是负值，那么从下一个$A[r+1]$值开始，temp重新从零开始求和，只要temp &gt; summax，就更新summax，这样，我们一次遍历后，就能得到最大的summax。</p>`,59)]))}const m=n(e,[["render",p],["__file","Algorithms-apply.html.vue"]]),h=JSON.parse('{"path":"/learn-leetcode/Algorithms-apply.html","title":"算法应用","lang":"zh-CN","frontmatter":{"description":"算法应用 最小值和最大值 寻找最小值 在下面的程序中，我们假设该集合元素存放在数组A中，且A.length = n： 我们得到结论：为了确定最小值，必须要做n-1次比较。因此，从所执行的比较次数来看，算法MINIMUM是最优的。 同时找到最小值和最大值 事实上，我们只需要最多$3\\\\left \\\\lfloor 2/n \\\\right \\\\rfloor$次比较就...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/learn-leetcode/Algorithms-apply.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"算法应用"}],["meta",{"property":"og:description","content":"算法应用 最小值和最大值 寻找最小值 在下面的程序中，我们假设该集合元素存放在数组A中，且A.length = n： 我们得到结论：为了确定最小值，必须要做n-1次比较。因此，从所执行的比较次数来看，算法MINIMUM是最优的。 同时找到最小值和最大值 事实上，我们只需要最多$3\\\\left \\\\lfloor 2/n \\\\right \\\\rfloor$次比较就..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1678770176000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":2,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":9.26,"words":2778},"filePathRelative":"learn-leetcode/Algorithms-apply.md","localizedDate":"2023年3月14日","excerpt":"","autoDesc":true}');export{m as comp,h as data};
