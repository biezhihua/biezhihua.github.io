import{_ as n,Y as s,Z as a,a2 as t}from"./framework-301d0703.js";const e={},o=t(`<h1 id="lr-1" tabindex="-1"><a class="header-anchor" href="#lr-1" aria-hidden="true">#</a> LR(1)</h1><h2 id="lr-1-文法-介绍和理解。" tabindex="-1"><a class="header-anchor" href="#lr-1-文法-介绍和理解。" aria-hidden="true">#</a> LR(1)文法 介绍和理解。</h2><p>LR(1) 文法是一种用于语法分析的上下文无关文法 (CFG)，主要用于编译器设计中。它是一种自底向上的语法分析方法，能够处理较为复杂的语法。LR(1) 文法可以处理更多类型的语言结构，与 LL(1) 文法相比，拥有更强的分析能力。</p><h3 id="lr-1-文法基本概念" tabindex="-1"><a class="header-anchor" href="#lr-1-文法基本概念" aria-hidden="true">#</a> LR(1) 文法基本概念</h3><p>LR(1) 是由三个部分构成的：</p><ul><li><strong>L</strong> 代表从左向右读取输入串（Left to Right）。</li><li><strong>R</strong> 代表使用最右推导 (Rightmost Derivation) 进行还原。</li><li><strong>1</strong> 表示在进行语法分析时，向前查看一个符号 (Lookahead 1)。</li></ul><h3 id="lr-1-语法分析器的工作原理" tabindex="-1"><a class="header-anchor" href="#lr-1-语法分析器的工作原理" aria-hidden="true">#</a> LR(1) 语法分析器的工作原理</h3><p>LR(1) 分析器构建了一个<strong>分析表</strong>（通常是 Action 表和 Goto 表），通过状态转换实现对输入串的分析。这些表基于文法生成的<strong>项目集规范族</strong>（LR(1) 项目集）来构建。语法分析器会使用一个栈来保存分析状态和语法符号，并根据输入串和状态表进行移入（Shift）和规约（Reduce）操作。</p><ol><li><strong>移入操作 (Shift)</strong>：将当前输入符号移入栈中，并更新状态。</li><li><strong>规约操作 (Reduce)</strong>：当发现某个产生式右侧的符号已经匹配时，进行规约操作，将其替换为该产生式的左侧符号。</li><li><strong>接受 (Accept)</strong>：当输入符号被成功处理，并且达到了文法的结束符时，分析器接受该输入串。</li><li><strong>错误 (Error)</strong>：当输入符号无法与当前状态匹配时，报告语法错误。</li></ol><h3 id="lr-1-分析表的构建" tabindex="-1"><a class="header-anchor" href="#lr-1-分析表的构建" aria-hidden="true">#</a> LR(1) 分析表的构建</h3><ul><li><strong>项目 (Item)</strong>：一个 LR(1) 项目是形如 <code>[A → α•β, a]</code> 的形式，表示文法规则 <code>A → αβ</code>，其中 <code>•</code> 表示当前项目的进度，<code>a</code> 是向前看符号。</li><li><strong>项目集 (Item Set)</strong>：多个 LR(1) 项目组成项目集，表示分析过程中的某种状态。</li><li><strong>项目集规范族 (Canonical LR(1) Collection)</strong>：从初始状态开始，通过状态间的转移构建整个项目集规范族。</li></ul><h3 id="lr-1-的优缺点" tabindex="-1"><a class="header-anchor" href="#lr-1-的优缺点" aria-hidden="true">#</a> LR(1) 的优缺点</h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点：</h4><ul><li><strong>强大的分析能力</strong>：LR(1) 分析器能够处理比 LL(1) 和 SLR 文法更复杂的语法结构，如左递归。</li><li><strong>确定性强</strong>：通过向前查看符号（Lookahead），LR(1) 可以避免某些语法冲突，从而进行精确的语法分析。</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点：</h4><ul><li><strong>分析表较大</strong>：由于 LR(1) 项目集引入了向前看符号，导致其项目集规范族更大，生成的分析表也更大，增加了存储和处理的开销。</li><li><strong>构建复杂</strong>：LR(1) 分析表的构建比 SLR 或 LALR 文法复杂得多。</li></ul><h3 id="lr-1-文法的变种" tabindex="-1"><a class="header-anchor" href="#lr-1-文法的变种" aria-hidden="true">#</a> LR(1) 文法的变种</h3><p>为了克服 LR(1) 文法分析表过大的问题，人们提出了改进的变种，如：</p><ul><li><strong>SLR 文法</strong>：简单 LR 文法（Simple LR），通过简化 LR 项目的构造，减小分析表的规模，但降低了一部分的分析能力。</li><li><strong>LALR 文法</strong>：Look-Ahead LR 文法，保留了 LR(1) 的分析能力，同时减少了分析表的规模，是 LR(1) 文法的一种常见简化。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>LR(1) 文法是一种非常强大的语法分析技术，适用于处理复杂的上下文无关文法，主要用于编译器的语法分析阶段。虽然构造复杂且占用的内存较多，但其分析能力非常强，是编译器实现中的一个重要部分。</p><h2 id="lr-1-非终结符标识符是什么意思" tabindex="-1"><a class="header-anchor" href="#lr-1-非终结符标识符是什么意思" aria-hidden="true">#</a> LR(1） 非终结符标识符是什么意思</h2><p>在 LR(1) 文法中，<strong>非终结符 (Non-terminal)</strong> 是一种重要的语法符号，用来表示文法中的某些结构或模式。非终结符在文法规则中作为左部符号，能够进一步推导出由终结符或其他非终结符组成的序列。</p><h3 id="非终结符的作用" tabindex="-1"><a class="header-anchor" href="#非终结符的作用" aria-hidden="true">#</a> 非终结符的作用</h3><ol><li><p><strong>语法规则中的变量</strong>：非终结符类似于编程语言中的变量，用于定义更复杂的语法结构。例如，如果你有一个规则 <code>S → AB</code>，其中 <code>S</code>、<code>A</code> 和 <code>B</code> 都是非终结符，它们可以进一步推导出其他符号。</p></li><li><p><strong>表达抽象的语法结构</strong>：非终结符往往用于表达语法的抽象层次。比如，在编译器中，<code>expr</code> 可以代表一个表达式，<code>stmt</code> 可以代表一个语句。终结符则是实际的语言符号，比如 <code>+</code>、<code>-</code>、<code>if</code> 等。</p></li></ol><h3 id="非终结符标识符的含义" tabindex="-1"><a class="header-anchor" href="#非终结符标识符的含义" aria-hidden="true">#</a> 非终结符标识符的含义</h3><p>在 LR(1) 文法中，<strong>非终结符标识符</strong> 是指文法中用于表示非终结符的符号，它们用于定义文法规则。例如，在文法规则 <code>S → A B</code> 中，<code>S</code>、<code>A</code> 和 <code>B</code> 都是非终结符的标识符。标识符的具体含义如下：</p><ul><li><strong>非终结符标识符</strong>：文法中的符号（通常是大写字母或描述性字符串）用来表示某一类可推导的结构。例如 <code>S</code>、<code>A</code>、<code>expr</code>、<code>stmt</code> 等都是非终结符标识符。</li><li><strong>终结符标识符</strong>：与非终结符相对，终结符标识符代表实际的语言符号，如 <code>+</code>、<code>if</code>、<code>a</code> 等，它们不能被进一步推导。</li></ul><h3 id="举例说明" tabindex="-1"><a class="header-anchor" href="#举例说明" aria-hidden="true">#</a> 举例说明</h3><p>假设你有以下 LR(1) 文法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>S → A B
A → &#39;a&#39;
B → &#39;b&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中：</p><ul><li><code>S</code>、<code>A</code> 和 <code>B</code> 都是<strong>非终结符标识符</strong>，它们可以通过推导规则替换为终结符或其他非终结符。</li><li><code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code> 是<strong>终结符</strong>，它们代表实际的输入符号。</li></ul><p>LR(1) 分析器根据这些非终结符和终结符的规则构建<strong>语法分析表</strong>，并用来匹配输入串是否符合文法。</p><h3 id="非终结符标识符在-lr-1-文法中的使用" tabindex="-1"><a class="header-anchor" href="#非终结符标识符在-lr-1-文法中的使用" aria-hidden="true">#</a> 非终结符标识符在 LR(1) 文法中的使用</h3><p>在 LR(1) 文法中，非终结符标识符与终结符一起定义了文法的产生式规则。分析器通过这些规则来决定如何处理输入的符号序列，并利用非终结符标识符在状态转换表中进行状态切换或规约操作。</p><p>总结来说，<strong>非终结符标识符</strong>是 LR(1) 文法中的核心符号，用来表示可以继续展开或推导的语法结构。</p><h2 id="lr-1-中first合计是什么意思" tabindex="-1"><a class="header-anchor" href="#lr-1-中first合计是什么意思" aria-hidden="true">#</a> LR(1) 中First合计是什么意思</h2><p>在 LR(1) 语法分析中，<strong>First 合计</strong>（通常称为 <strong>First 集合</strong>）是用于决定某个产生式的推导开始符号的集合。它在语法分析器的构造中起着关键作用，特别是在确定如何处理 Lookahead（前瞻符号）时。</p><h3 id="first-集合的定义" tabindex="-1"><a class="header-anchor" href="#first-集合的定义" aria-hidden="true">#</a> First 集合的定义</h3><p>对于一个文法符号（终结符或非终结符）<code>X</code>，<strong>First 集合</strong>是指从 <code>X</code> 开始能够推导出的第一个终结符的集合。具体来说，First 集合表示的是：</p><ul><li>对于终结符，First 集合就是该终结符本身。</li><li>对于非终结符，First 集合包含它能推导出的符号串的第一个终结符。</li><li>如果某个非终结符能推导出空串 <code>ε</code>，那么 First 集合还包含 <code>ε</code>。</li></ul><h3 id="first-集合的计算规则" tabindex="-1"><a class="header-anchor" href="#first-集合的计算规则" aria-hidden="true">#</a> First 集合的计算规则</h3><p>给定一个产生式 <code>A → α</code>，<code>α</code> 是由终结符和非终结符构成的符号串，First 集合的计算规则如下：</p><ol><li><p><strong>First(终结符 a)</strong> = {a}：对于终结符 <code>a</code>，First 集合就是 <code>a</code> 本身。</p></li><li><p><strong>First(ε)</strong> = {ε}：如果某个符号能直接推导出空串 <code>ε</code>，那么它的 First 集合包含 <code>ε</code>。</p></li><li><p><strong>First(非终结符 A)</strong>：对于非终结符 <code>A</code>，First 集合包含所有 <code>A</code> 的产生式 <code>A → α</code> 的 First(α)，即 <code>A</code> 能推导出的第一个符号集合。</p></li><li><p><strong>First(αβ)</strong>：如果有一个产生式 <code>A → αβ</code>，则 First(αβ) 的计算分为以下几种情况：</p><ul><li>如果 First(α) 不包含 <code>ε</code>，则 First(αβ) = First(α)。</li><li>如果 First(α) 包含 <code>ε</code>，则 First(αβ) = First(α) - {ε} ∪ First(β)。</li><li>如果 First(β) 也包含 <code>ε</code>，那么 First(αβ) 中还要包含 <code>ε</code>。</li></ul></li></ol><h3 id="first-集合在-lr-1-中的应用" tabindex="-1"><a class="header-anchor" href="#first-集合在-lr-1-中的应用" aria-hidden="true">#</a> First 集合在 LR(1) 中的应用</h3><p>在 LR(1) 语法分析中，First 集合被用于构建<strong>项集规范族</strong>以及决定前瞻符号（Lookahead）时的行为。Lookahead 符号在 LR(1) 分析器中用于消除移入/规约冲突，帮助分析器正确选择动作。</p><p>具体应用包括：</p><ol><li><strong>移入操作</strong>：根据当前输入符号，决定是否进行移入操作。这个输入符号通常是从 First 集合中取得的符号。</li><li><strong>规约操作</strong>：在规约过程中，分析器会查看 First 集合中的前瞻符号，以确定是否可以进行某个规约。</li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><p>假设我们有以下文法规则：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>S → AB
A → a | ε
B → b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来计算每个符号的 First 集合：</p><ol><li><strong>First(A)</strong>：<code>A → a | ε</code>，因此 First(A) = {a, ε}，因为 <code>A</code> 可以推导出 <code>a</code> 或空串 <code>ε</code>。</li><li><strong>First(B)</strong>：<code>B → b</code>，因此 First(B) = {b}，因为 <code>B</code> 只能推导出 <code>b</code>。</li><li><strong>First(AB)</strong>：根据 <code>S → AB</code> 和 First(A) = {a, ε}，我们计算 First(AB)： <ul><li>First(A) 包含 <code>ε</code>，所以我们需要看 First(B)。</li><li>First(AB) = First(A) - {ε} ∪ First(B) = {a} ∪ {b} = {a, b}。</li></ul></li></ol><p>因此，<code>S → AB</code> 的 First 集合为 <code>{a, b}</code>。</p><h3 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h3><p><strong>First 合计（First 集合）</strong> 在 LR(1) 分析中用于确定从某个符号开始推导时可能遇到的第一个终结符。它对于语法分析器的构造至关重要，特别是在处理 Lookahead 符号时。</p><h2 id="lr-1-中-闭包集是什么意思。" tabindex="-1"><a class="header-anchor" href="#lr-1-中-闭包集是什么意思。" aria-hidden="true">#</a> LR(1) 中 闭包集是什么意思。</h2><p>在 LR(1) 语法分析中，<strong>闭包集</strong>（Closure）是构造项目集规范族中的一个关键概念。闭包集用于描述在某个状态下，分析器可能需要进一步扩展和探索的所有文法产生式。它在构建 LR(1) 分析器的过程中，帮助我们推导出可以继续扩展的语法规则。</p><h3 id="项目和-lr-1-项目" tabindex="-1"><a class="header-anchor" href="#项目和-lr-1-项目" aria-hidden="true">#</a> 项目和 LR(1) 项目</h3><p>要理解闭包集，首先要了解<strong>项目</strong>（Item）的概念。一个项目是文法规则的某种形式表示，带有一个标记 <code>•</code>，表示当前正在处理该规则的哪个部分。对于 LR(1) 项目，还包含一个<strong>前瞻符号</strong>（Lookahead），帮助分析器在规约时知道接下来可能的输入符号。</p><p>例如，给定文法规则 <code>A → X Y Z</code>，其项目表示为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A → • X Y Z  // 表示还没处理任何符号
A → X • Y Z  // 表示已经处理了 X，接下来处理 Y
A → X Y • Z  // 表示已经处理了 X 和 Y，接下来处理 Z
A → X Y Z •  // 表示已经处理了整个产生式
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LR(1) 项目则在这些项目的基础上添加前瞻符号。例如，一个 LR(1) 项目可能是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A → X • Y Z, a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里 <code>a</code> 是前瞻符号，用于帮助分析器决定是否要规约。</p><h3 id="闭包集-closure-的定义" tabindex="-1"><a class="header-anchor" href="#闭包集-closure-的定义" aria-hidden="true">#</a> 闭包集（Closure）的定义</h3><p>对于给定的 LR(1) 项目集合 <code>I</code>，<strong>闭包集</strong> <code>closure(I)</code> 是从 <code>I</code> 开始，递归地将所有可能的推导规则添加进集合中。闭包集的计算遵循以下步骤：</p><ol><li><p>对于 <code>I</code> 中的每个项目，如果项目的 <code>•</code> 之后有一个非终结符 <code>B</code>，则：</p><ul><li>找到所有产生式 <code>B → ...</code>，将这些产生式的初始项目（即 <code>B → • ...</code>）加入到集合中。</li><li>对于每个新添加的项目，前瞻符号由原项目的前瞻符号以及紧随 <code>B</code> 的符号的 First 集合决定。</li></ul></li><li><p>重复上述步骤，直到无法再添加新的项目为止。</p></li></ol><p>简而言之，闭包集递归地将所有可能的推导产生式添加进来，确保每个项目集包含所有可能需要考虑的进一步推导。</p><h3 id="闭包集的计算步骤" tabindex="-1"><a class="header-anchor" href="#闭包集的计算步骤" aria-hidden="true">#</a> 闭包集的计算步骤</h3><p>假设我们有以下文法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>S → A
A → a A | b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>并且我们有初始项目 <code>I0 = { [S → • A, $] }</code>，表示我们在分析开始时还没处理 <code>A</code>，前瞻符号是 <code>$</code>，代表输入结束符。现在我们计算其闭包集 <code>closure(I0)</code>。</p><ol><li><p><code>I0</code> 中的项目为 <code>[S → • A, $]</code>。在 <code>•</code> 之后有非终结符 <code>A</code>，因此我们需要把 <code>A</code> 的产生式加入到闭包集中。</p></li><li><p>找到 <code>A</code> 的产生式：<code>A → a A</code> 和 <code>A → b</code>。我们将初始状态的项目加入闭包集。此时，我们得到新的项目：</p><ul><li><code>[A → • a A, $]</code></li><li><code>[A → • b, $]</code></li></ul></li><li><p>现在，所有项目的 <code>•</code> 后面都是终结符（<code>a</code> 或 <code>b</code>），因此不再需要扩展闭包集。最终的闭包集是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>closure(I0) = {
    [S → • A, $],
    [A → • a A, $],
    [A → • b, $]
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="闭包集的作用" tabindex="-1"><a class="header-anchor" href="#闭包集的作用" aria-hidden="true">#</a> 闭包集的作用</h3><p>在 LR(1) 分析中，闭包集的主要作用是确保每个状态都完整地包含所有可能的推导规则，这样分析器就能够正确地处理不同的输入和规约情况。它帮助分析器知道在哪些情况下应该移入、规约或进行前瞻符号的判断。</p><h3 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h3><p><strong>闭包集</strong>（Closure）是 LR(1) 分析中的一个重要概念，它递归地将所有可能的产生式项目加入到当前的项目集中，确保分析器在每个状态下都能看到所有可能的推导规则。通过构建闭包集，LR(1) 分析器能够在处理语法时考虑到所有可能的语法扩展，从而实现精确的语法分析。</p><h2 id="lr-1-中-gototable是什么意思" tabindex="-1"><a class="header-anchor" href="#lr-1-中-gototable是什么意思" aria-hidden="true">#</a> LR(1) 中 gototable是什么意思</h2><p>在 LR(1) 语法分析中，<strong>GOTO 表</strong>（Goto Table）是语法分析器中的一个重要数据结构，用于描述在某个状态下，遇到一个非终结符时，分析器应该转移到的下一个状态。GOTO 表主要处理非终结符的转移，决定当遇到一个非终结符时，分析器如何从当前状态转换到新的状态。</p><h3 id="goto-表的作用" tabindex="-1"><a class="header-anchor" href="#goto-表的作用" aria-hidden="true">#</a> GOTO 表的作用</h3><p>LR(1) 语法分析器在进行解析时，使用两张表来指导它的操作：</p><ol><li><strong>Action 表</strong>：处理终结符输入，决定是进行移入（Shift）、规约（Reduce）、接受（Accept）或报错（Error）。</li><li><strong>Goto 表</strong>：处理非终结符，决定在归约或某些操作后，解析器应该跳转到哪个状态。</li></ol><p>GOTO 表负责解析过程中遇到非终结符的状态转移。例如，当语法分析器处理一个产生式并规约到某个非终结符后，它需要知道下一个状态，这个状态由 GOTO 表决定。</p><h3 id="goto-表的工作方式" tabindex="-1"><a class="header-anchor" href="#goto-表的工作方式" aria-hidden="true">#</a> GOTO 表的工作方式</h3><p>在 LR(1) 解析器中，解析器的状态保存在一个栈中。每次移入操作时，终结符和状态都被压入栈中，而规约操作则会根据产生式弹出符号。完成规约后，GOTO 表会告诉解析器基于规约后的非终结符，应该跳转到哪个状态。</p><p>例如，如果当前状态是 <code>I</code>，非终结符是 <code>X</code>，那么 GOTO 表的条目 <code>GOTO[I, X]</code> 将告诉解析器应该跳转到的下一个状态。</p><h3 id="goto-表的构造" tabindex="-1"><a class="header-anchor" href="#goto-表的构造" aria-hidden="true">#</a> GOTO 表的构造</h3><p>GOTO 表是在构造 LR(1) 语法分析表时生成的。它依赖于文法的<strong>项目集规范族</strong>，即 LR(1) 项目集族中的状态及其转移。具体来说，GOTO 表的构造基于以下步骤：</p><ol><li><p><strong>项目集规范族</strong>：首先，构造所有可能的项目集（即 LR(1) 项目集），每个项目集对应一个状态。项目集的构造包括计算初始闭包（Closure）和根据非终结符进行状态转移。</p></li><li><p><strong>状态转移</strong>：对于每个项目集中的非终结符，找到该非终结符对应的状态转移。这些状态转移条目将构成 GOTO 表中的条目。</p></li></ol><h3 id="goto-表的示例" tabindex="-1"><a class="header-anchor" href="#goto-表的示例" aria-hidden="true">#</a> GOTO 表的示例</h3><p>假设有如下文法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>S → A
A → aA | b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在构造 LR(1) 解析器时，首先构造项目集规范族，然后基于这些状态生成 GOTO 表。下面是 GOTO 表的一个简单示例：</p><table><thead><tr><th>状态</th><th>非终结符 <code>A</code></th><th>非终结符 <code>S</code></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td></tr><tr><td>1</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td></tr></tbody></table><p>假设状态 0 是初始状态：</p><ul><li>如果在状态 0 遇到非终结符 <code>A</code>，那么 GOTO 表告诉解析器应该跳转到状态 1。</li><li>如果在状态 0 遇到非终结符 <code>S</code>，则跳转到状态 2。</li></ul><h3 id="goto-表与-action-表的关系" tabindex="-1"><a class="header-anchor" href="#goto-表与-action-表的关系" aria-hidden="true">#</a> GOTO 表与 ACTION 表的关系</h3><p>GOTO 表和 ACTION 表配合工作：</p><ul><li><strong>ACTION 表</strong> 处理终结符输入，根据输入的终结符决定是移入、规约还是接受。</li><li><strong>GOTO 表</strong> 处理非终结符，根据规约后的非终结符决定跳转到哪个状态。</li></ul><p>例如，当一个产生式完成规约时（如 <code>A → aA</code>），GOTO 表决定下一个状态，以便处理后续的输入或语法结构。</p><h3 id="goto-表的作用流程" tabindex="-1"><a class="header-anchor" href="#goto-表的作用流程" aria-hidden="true">#</a> GOTO 表的作用流程</h3><ol><li><p><strong>规约完成</strong>：当语法分析器根据某个产生式（如 <code>A → aA</code>）进行规约时，它会弹出相应的符号栈。</p></li><li><p><strong>寻找 GOTO 表</strong>：规约后，会把产生的非终结符（如 <code>A</code>）放回栈上，然后查询 GOTO 表，寻找当前状态和非终结符 <code>A</code> 对应的下一个状态。</p></li><li><p><strong>状态跳转</strong>：GOTO 表返回的状态将作为下一个状态，解析器继续进行移入或规约操作。</p></li></ol><h3 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3" aria-hidden="true">#</a> 总结</h3><p>在 LR(1) 语法分析中，<strong>GOTO 表</strong> 是一个处理非终结符的状态转移表，它告诉解析器在遇到某个非终结符时，应该跳转到哪个状态。它与 ACTION 表配合工作，确保解析器能够正确解析输入的语法结构。GOTO 表的构造基于项目集规范族，用于处理规约后的状态转移，使得解析器在规约完成后能够继续处理输入。</p><h2 id="重新为我详细、完成的介绍lr-1-并写一些小的demo帮助我理解。" tabindex="-1"><a class="header-anchor" href="#重新为我详细、完成的介绍lr-1-并写一些小的demo帮助我理解。" aria-hidden="true">#</a> 重新为我详细、完成的介绍LR(1) ，并写一些小的Demo帮助我理解。</h2><h3 id="lr-1-简介" tabindex="-1"><a class="header-anchor" href="#lr-1-简介" aria-hidden="true">#</a> LR(1) 简介</h3><p><strong>LR(1)</strong> 是一种用于上下文无关文法（CFG）的自底向上语法分析算法。它通过向前查看一个符号（Lookahead 1）来帮助决定语法分析的下一步动作。LR(1) 是一种非常强大的语法分析方法，能够处理复杂的语言结构，广泛应用于编译器设计中。</p><p>在 LR(1) 中，&quot;L&quot; 表示从左到右扫描输入（Left-to-right），&quot;R&quot; 表示使用最右推导的规约（Rightmost in reverse），而 &quot;1&quot; 表示使用一个符号的前瞻（Lookahead 1）来帮助决定如何规约或移入。</p><h3 id="组成部分" tabindex="-1"><a class="header-anchor" href="#组成部分" aria-hidden="true">#</a> 组成部分</h3><p>LR(1) 分析器主要由以下几个部分组成：</p><ol><li><strong>项目集（Item Set）</strong>：项目是产生式的表示形式，带有一个 <code>·</code> 标记，用于指示当前处理的位置。</li><li><strong>状态</strong>：每个状态由一个项目集组成，代表语法分析的某一阶段。</li><li><strong>ACTION 表</strong>：处理终结符，决定是移入、规约、接受还是报错。</li><li><strong>GOTO 表</strong>：处理非终结符，决定状态转移。</li><li><strong>栈</strong>：用于记录分析器的状态和符号。</li></ol><h3 id="解析流程" tabindex="-1"><a class="header-anchor" href="#解析流程" aria-hidden="true">#</a> 解析流程</h3><p>LR(1) 分析器的工作过程如下：</p><ol><li><strong>移入操作（Shift）</strong>：将当前输入符号移入栈中，并将状态转移至新的状态。</li><li><strong>规约操作（Reduce）</strong>：根据项目中的产生式，将栈中的符号替换为该产生式的左侧符号，并通过 GOTO 表转移状态。</li><li><strong>接受（Accept）</strong>：当输入符号全部处理完，且分析器状态达到接受状态时，语法分析完成。</li><li><strong>报错（Error）</strong>：当无法找到合适的移入或规约时，报告语法错误。</li></ol><h3 id="lr-1-分析表的构建-1" tabindex="-1"><a class="header-anchor" href="#lr-1-分析表的构建-1" aria-hidden="true">#</a> LR(1) 分析表的构建</h3><ul><li><strong>ACTION 表</strong>：基于当前状态和输入符号，决定是否移入、规约、接受或报错。</li><li><strong>GOTO 表</strong>：基于当前状态和规约后的非终结符，决定跳转到哪个状态。</li></ul><h3 id="lr-1-项目和闭包" tabindex="-1"><a class="header-anchor" href="#lr-1-项目和闭包" aria-hidden="true">#</a> LR(1) 项目和闭包</h3><ul><li><p><strong>LR(1) 项目</strong>：包含一个产生式和一个前瞻符号（Lookahead）。 例如，<code>[A → X · Y Z, a]</code> 表示当前处理 <code>A → X Y Z</code> 产生式，已经处理到 <code>X</code>，下一个要处理的是 <code>Y</code>，并且前瞻符号是 <code>a</code>。</p></li><li><p><strong>闭包（Closure）</strong>：给定一个项目集，闭包集包含所有可能推导的产生式。它递归地将 <code>·</code> 后面的非终结符的所有产生式添加到项目集中。</p></li></ul><h3 id="示例文法" tabindex="-1"><a class="header-anchor" href="#示例文法" aria-hidden="true">#</a> 示例文法</h3><p>为了帮助理解，我们使用一个简单的文法：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>S → E
E → E + T | T
T → T * F | F
F → ( E ) | id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个文法描述了一个简单的四则运算，包括加法、乘法和括号。</p><h3 id="lr-1-分析表构造" tabindex="-1"><a class="header-anchor" href="#lr-1-分析表构造" aria-hidden="true">#</a> LR(1) 分析表构造</h3><h4 id="_1-项目集" tabindex="-1"><a class="header-anchor" href="#_1-项目集" aria-hidden="true">#</a> 1. 项目集</h4><p>首先我们要构造 LR(1) 项目集规范族。初始状态为 <code>S → · E, $</code>，其中 <code>$</code> 代表输入结束符。接着我们计算闭包集，并根据输入符号或非终结符进行状态转移。</p><ul><li><p>初始状态（I0）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[S → · E, $]
[E → · E + T, $]
[E → · T, $]
[T → · T * F, $]
[T → · F, $]
[F → · ( E ), $]
[F → · id, $]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过计算闭包集，我们将所有与 <code>E</code>、<code>T</code>、<code>F</code> 相关的项目添加进来。</p></li></ul><h4 id="_2-状态转移" tabindex="-1"><a class="header-anchor" href="#_2-状态转移" aria-hidden="true">#</a> 2. 状态转移</h4><ul><li>对于状态 I0，遇到终结符 <code>id</code>，进入状态 I1（移入 <code>id</code>）。</li><li>对于状态 I0，遇到终结符 <code>(</code>，进入状态 I2（移入 <code>(</code>）。</li></ul><p>类似地，我们根据不同的输入构造其他状态。</p><h4 id="_3-action-和-goto-表" tabindex="-1"><a class="header-anchor" href="#_3-action-和-goto-表" aria-hidden="true">#</a> 3. ACTION 和 GOTO 表</h4><p>根据状态转移，我们构造 ACTION 表和 GOTO 表。比如，状态 I0 遇到终结符 <code>id</code> 或非终结符 <code>(</code> 时，ACTION 表中指示移入操作，遇到非终结符 <code>E</code> 时，GOTO 表中指示跳转到状态 I1。</p><h3 id="lr-1-解析示例" tabindex="-1"><a class="header-anchor" href="#lr-1-解析示例" aria-hidden="true">#</a> LR(1) 解析示例</h3><p>我们可以通过一个简单的示例来理解 LR(1) 解析的具体步骤。假设输入串是 <code>id + id * id</code>，对应的推导过程如下：</p><ol><li>初始状态：栈为空，输入为 <code>id + id * id $</code>。</li><li>移入：将 <code>id</code> 移入栈，并转移到对应状态。</li><li>规约：根据文法规则 <code>F → id</code> 进行规约，将 <code>id</code> 规约为 <code>F</code>。</li><li>继续移入或规约，直到输入处理完毕并接受。</li></ol><h3 id="小demo代码" tabindex="-1"><a class="header-anchor" href="#小demo代码" aria-hidden="true">#</a> 小Demo代码</h3><p>为了更好地理解 LR(1) 的工作原理，这里有一个简单的 Python 实现的 LR(1) 解析器原型：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">LR1Parser</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action_table<span class="token punctuation">,</span> goto_table<span class="token punctuation">,</span> grammar<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>action_table <span class="token operator">=</span> action_table
        self<span class="token punctuation">.</span>goto_table <span class="token operator">=</span> goto_table
        self<span class="token punctuation">.</span>grammar <span class="token operator">=</span> grammar

    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tokens<span class="token punctuation">)</span><span class="token punctuation">:</span>
        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 初始状态栈</span>
        index <span class="token operator">=</span> <span class="token number">0</span>

        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">:</span>
            state <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
            token <span class="token operator">=</span> tokens<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

            action <span class="token operator">=</span> self<span class="token punctuation">.</span>action_table<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> action <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Error: unexpected token&quot;</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>

            <span class="token keyword">if</span> action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;shift&#39;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 移入下一个状态</span>
                index <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;reduce&#39;</span><span class="token punctuation">:</span>
                rule <span class="token operator">=</span> self<span class="token punctuation">.</span>grammar<span class="token punctuation">[</span>action<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
                <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>rule<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 弹出栈中符号</span>
                nonterminal <span class="token operator">=</span> rule<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                goto_state <span class="token operator">=</span> self<span class="token punctuation">.</span>goto_table<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">(</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nonterminal<span class="token punctuation">)</span><span class="token punctuation">)</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>goto_state<span class="token punctuation">)</span>  <span class="token comment"># 转移到GOTO状态</span>
            <span class="token keyword">elif</span> action<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;accept&#39;</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Input is accepted&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Error&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token comment"># 定义ACTION表和GOTO表</span>
action_table <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&#39;accept&#39;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&#39;shift&#39;</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment"># 继续定义其他移入和规约规则...</span>
<span class="token punctuation">}</span>

goto_table <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
    <span class="token comment"># 继续定义其他GOTO转移...</span>
<span class="token punctuation">}</span>

<span class="token comment"># 文法规则： (左侧, 右侧)</span>
grammar <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;T&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;T&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token comment"># 创建解析器并解析输入</span>
parser <span class="token operator">=</span> LR1Parser<span class="token punctuation">(</span>action_table<span class="token punctuation">,</span> goto_table<span class="token punctuation">,</span> grammar<span class="token punctuation">)</span>
tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">]</span>
parser<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>tokens<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解析过程解释" tabindex="-1"><a class="header-anchor" href="#解析过程解释" aria-hidden="true">#</a> 解析过程解释</h3><ol><li><strong>action_table</strong> 和 <strong>goto_table</strong> 是 LR(1) 分析表的简化版本。</li><li><strong>grammar</strong> 表示文法规则。每个规则用于规约时的处理。</li><li><strong>tokens</strong> 是输入串，表示待解析的符号。</li><li><strong>parse</strong> 方法模拟了 LR(1) 的解析流程，包括移入、规约和接受操作。</li></ol><h3 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4" aria-hidden="true">#</a> 总结</h3><p>LR(1) 是强大的自底向上的语法分析方法，能够处理复杂的上下文无关文法。通过 ACTION 表和 GOTO 表的配合，解析器能够准确地决定移入、规约或接受操作。LR(1) 项目集、闭包、以及前瞻符号共同构建了这个系统，使其能够高效解析许多编程语言的语法。</p><h2 id="重新为我详细、完成的介绍lr-1-详细的介绍其中的各类概念-例如-文法、终结符、非终结符、frist集、闭包、goto表、表达式的含义-并阐述他们之间的协作关系-最后使用c-写一些demo帮助我理解。" tabindex="-1"><a class="header-anchor" href="#重新为我详细、完成的介绍lr-1-详细的介绍其中的各类概念-例如-文法、终结符、非终结符、frist集、闭包、goto表、表达式的含义-并阐述他们之间的协作关系-最后使用c-写一些demo帮助我理解。" aria-hidden="true">#</a> 重新为我详细、完成的介绍LR(1) ，详细的介绍其中的各类概念，例如：文法、终结符、非终结符、Frist集、闭包、GOTO表、表达式的含义，并阐述他们之间的协作关系，最后使用C++写一些Demo帮助我理解。</h2><p>LR(1) 解析器详解</p><p>LR(1) 解析器是一种自底向上的语法分析方法，广泛应用于编译器设计中。它能够有效地处理上下文无关文法，生成语法分析树。下面我们将详细介绍其中的各个概念，并通过C++示例来帮助理解。</p><h3 id="_1-文法" tabindex="-1"><a class="header-anchor" href="#_1-文法" aria-hidden="true">#</a> 1. 文法</h3><p><strong>文法</strong>（Grammar）是定义语言语法规则的集合，由以下四部分组成：</p><ul><li><strong>非终结符</strong>（Non-terminal symbols）：表示语法结构的符号，如表达式、语句等。</li><li><strong>终结符</strong>（Terminal symbols）：实际输入的基本符号，如关键字、运算符、标识符等。</li><li><strong>开始符号</strong>（Start symbol）：文法的起始非终结符。</li><li><strong>产生式集合</strong>（Productions）：定义非终结符如何展开为终结符和非终结符的规则。</li></ul><p><strong>示例：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>E → E + T
E → T
T → T * F
T → F
F → ( E )
F → id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-终结符和非终结符" tabindex="-1"><a class="header-anchor" href="#_2-终结符和非终结符" aria-hidden="true">#</a> 2. 终结符和非终结符</h3><ul><li><strong>终结符</strong>：不能再被展开的基本符号。</li><li><strong>非终结符</strong>：可以被展开为其他符号的符号。</li></ul><p>在上述文法中：</p><ul><li><strong>终结符</strong>：<code>+</code>, <code>*</code>, <code>(</code>, <code>)</code>, <code>id</code></li><li><strong>非终结符</strong>：<code>E</code>, <code>T</code>, <code>F</code></li></ul><h3 id="_3-first-集" tabindex="-1"><a class="header-anchor" href="#_3-first-集" aria-hidden="true">#</a> 3. FIRST 集</h3><p><strong>FIRST 集</strong>用于计算一个符号或符号串可能产生的第一个终结符集合。</p><p><strong>计算方法：</strong></p><ol><li>如果是终结符，其 FIRST 集就是自身。</li><li>如果是非终结符，递归计算其产生式右部的 FIRST 集。</li></ol><p><strong>示例：</strong></p><ul><li><code>FIRST(id) = { id }</code></li><li><code>FIRST(F) = { &#39;(&#39;, id }</code></li></ul><h3 id="_4-闭包-closure" tabindex="-1"><a class="header-anchor" href="#_4-闭包-closure" aria-hidden="true">#</a> 4. 闭包（Closure）</h3><p><strong>闭包</strong>是针对项目集（Item Set）而言的。项目表示的是对产生式的预测。</p><p><strong>项目表示：</strong></p><ul><li>如 <code>E → E + T •</code></li></ul><p>表示已经看到了 <code>E + T</code>，圆点表示当前位置。</p><p><strong>闭包计算：</strong></p><ol><li>对于项目集中的每个项目，如果圆点后是非终结符 A，添加 A 的所有产生式的初始项目（圆点在最左侧）。</li><li>重复上述过程，直到不再添加新项目。</li></ol><h3 id="_5-goto-函数" tabindex="-1"><a class="header-anchor" href="#_5-goto-函数" aria-hidden="true">#</a> 5. GOTO 函数</h3><p><strong>GOTO</strong> 函数描述从一个项目集在读入某个符号后转移到另一个项目集的过程。</p><p><strong>计算方法：</strong></p><ol><li>对于项目集 I，符号 X，<code>GOTO(I, X)</code> 是从 I 中所有圆点前是 X 的项目移动圆点后得到的项目集合，然后对该集合求闭包。</li></ol><h3 id="_6-表达式的含义" tabindex="-1"><a class="header-anchor" href="#_6-表达式的含义" aria-hidden="true">#</a> 6. 表达式的含义</h3><p>在 LR(1) 解析器中，表达式通常指项目，如 <code>E → E + T •</code>。它表示解析器当前的状态和期待。</p><h3 id="_7-各概念的协作关系" tabindex="-1"><a class="header-anchor" href="#_7-各概念的协作关系" aria-hidden="true">#</a> 7. 各概念的协作关系</h3><ul><li><strong>文法</strong>定义了语言的语法规则。</li><li><strong>终结符</strong>和<strong>非终结符</strong>是文法的基本元素。</li><li><strong>FIRST 集</strong>帮助预测可能的输入符号。</li><li><strong>闭包</strong>和 <strong>GOTO</strong> 用于构建 LR(1) 项目集规范族，构建语法分析表。</li><li><strong>表达式</strong>（项目）表示解析过程中的状态。</li></ul><h3 id="_8-c-示例" tabindex="-1"><a class="header-anchor" href="#_8-c-示例" aria-hidden="true">#</a> 8. C++ 示例</h3><p>下面我们通过一个简单的C++程序，模拟构建 FIRST 集和闭包的过程。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// 定义产生式</span>
<span class="token keyword">struct</span> <span class="token class-name">Production</span> <span class="token punctuation">{</span>
    string left<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> right<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 文法定义</span>
<span class="token keyword">class</span> <span class="token class-name">Grammar</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> terminals<span class="token punctuation">;</span>
    set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> nonTerminals<span class="token punctuation">;</span>
    string startSymbol<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>Production<span class="token operator">&gt;</span> productions<span class="token punctuation">;</span>
    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> set<span class="token operator">&lt;</span>string<span class="token operator">&gt;&gt;</span> firstSets<span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> left<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        productions<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">,</span> right<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        nonTerminals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">:</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isupper</span><span class="token punctuation">(</span>symbol<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nonTerminals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                terminals<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">computeFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> terminal <span class="token operator">:</span> terminals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            firstSets<span class="token punctuation">[</span>terminal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>terminal<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> nonTerminal <span class="token operator">:</span> nonTerminals<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            firstSets<span class="token punctuation">[</span>nonTerminal<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">bool</span> changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>changed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> prod <span class="token operator">:</span> productions<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> string<span class="token operator">&amp;</span> A <span class="token operator">=</span> prod<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> alpha <span class="token operator">=</span> prod<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                size_t before <span class="token operator">=</span> firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>alpha<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> symbol <span class="token operator">:</span> alpha<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>firstSets<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> firstSets<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>firstSets<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&quot;ε&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> firstSets<span class="token punctuation">[</span>symbol<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstSets<span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> before<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">printFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> <span class="token punctuation">[</span>symbol<span class="token punctuation">,</span> firstSet<span class="token punctuation">]</span> <span class="token operator">:</span> firstSets<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;FIRST(&quot;</span> <span class="token operator">&lt;&lt;</span> symbol <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;) = { &quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> firstSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;}\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Grammar grammar<span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span>startSymbol <span class="token operator">=</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">;</span>

    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&#39;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&#39;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;+&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&#39;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;E&#39;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ε</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;T&#39;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&#39;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;T&#39;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;T&#39;&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ε</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">addProduction</span><span class="token punctuation">(</span><span class="token string">&quot;F&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    grammar<span class="token punctuation">.</span><span class="token function">computeFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    grammar<span class="token punctuation">.</span><span class="token function">printFirstSets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>运行结果：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>FIRST(id) = { id }
FIRST(*) = { * }
FIRST(E) = { ( id }
FIRST(E&#39;) = { + ε }
FIRST(T) = { ( id }
FIRST(T&#39;) = { * ε }
FIRST(F) = { ( id }
FIRST(+) = { + }
FIRST(() = { ( }
FIRST()) = { ) }
FIRST(ε) = { ε }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ul><li>该程序定义了一个简单的文法，并计算了各个符号的 FIRST 集。</li><li>通过 <code>computeFirstSets</code> 方法，递归地计算 FIRST 集。</li><li><code>printFirstSets</code> 方法输出结果，帮助理解 FIRST 集的内容。</li></ul><h3 id="_9-总结" tabindex="-1"><a class="header-anchor" href="#_9-总结" aria-hidden="true">#</a> 9. 总结</h3><p>LR(1) 解析器通过构建项目集规范族和语法分析表，实现了高效的语法分析。理解文法、终结符、非终结符、FIRST 集、闭包和 GOTO 函数之间的关系，对于掌握编译原理至关重要。希望通过上述解释和示例，能帮助您更好地理解 LR(1) 解析器的工作原理。</p>`,185),p=[o];function c(i,l){return s(),a("div",null,p)}const u=n(e,[["render",c],["__file","lr1.html.vue"]]);export{u as default};
