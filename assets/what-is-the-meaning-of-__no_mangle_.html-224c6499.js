import{_ as n,Y as e,Z as a,a2 as t}from"./framework-301d0703.js";const s={},o=t(`<h1 id="what-is-the-meaning-of-no-mangle" tabindex="-1"><a class="header-anchor" href="#what-is-the-meaning-of-no-mangle" aria-hidden="true">#</a> What is the meaning of <code>#[no_mangle]</code></h1><p>这段 Rust 代码定义了一个可以从 C 语言或其他使用 C ABI (Application Binary Interface) 的语言调用的函数。让我们逐部分解释它：</p><h3 id="no-mangle" tabindex="-1"><a class="header-anchor" href="#no-mangle" aria-hidden="true">#</a> <code>#[no_mangle]</code></h3><ul><li><code>#[no_mangle]</code> 是一个编译器指令（attribute），用于告诉 Rust 编译器不要改变这个函数的名字。</li><li>正常情况下，Rust 编译器会对函数名进行修改（称为“mangling”），以支持特性如函数重载等。但是，这会使得使用 C 语言等其他语言很难或无法找到和链接到这个函数。</li><li>使用 <code>#[no_mangle]</code> 可确保函数名在编译后的二进制文件中保持不变，使得其他语言可以通过这个确切的名字来调用该函数。</li></ul><h3 id="pub-extern-c" tabindex="-1"><a class="header-anchor" href="#pub-extern-c" aria-hidden="true">#</a> <code>pub extern &quot;C&quot;</code></h3><ul><li><code>pub</code> 表明这个函数是公开的，意味着它可以被同一程序中的其他 Rust 代码或者其他语言的代码调用。</li><li><code>extern &quot;C&quot;</code> 表示这个函数应该使用 C 语言的调用约定（calling convention）。这对于确保从其他语言（特别是 C 语言）正确调用此函数非常重要。</li><li>C 语言调用约定定义了如何传递参数、如何处理栈、如何返回值等，这对于跨语言的函数调用是必需的。</li></ul><h3 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义" aria-hidden="true">#</a> 函数定义</h3><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">hello_from_rust</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from Rust!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这部分定义了函数的具体行为。当这个函数被调用时，它会执行 <code>println!</code> 宏，输出字符串 &quot;Hello from Rust!&quot; 到控制台。</li></ul><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><ul><li>这样的函数定义常用于创建可以被 C 语言或其他使用 C ABI 的语言调用的 Rust 库。</li><li>例如，你可能有一个用 Rust 编写的库，你希望它能够被 C 语言编写的程序使用。通过这种方式定义函数，C 程序就可以链接并调用这个 Rust 函数。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>通过组合使用 <code>#[no_mangle]</code> 和 <code>extern &quot;C&quot;</code>，这段代码定义了一个可以从 C 语言环境安全调用的 Rust 函数，同时保证了函数名在编译过程中不会被更改。这是 Rust 与其他语言（特别是 C 语言）互操作时的一种常见模式。</p>`,13),i=[o];function l(c,d){return e(),a("div",null,i)}const u=n(s,[["render",l],["__file","what-is-the-meaning-of-__no_mangle_.html.vue"]]);export{u as default};
