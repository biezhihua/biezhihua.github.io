import{_ as t,Y as r,Z as o,$ as a,a0 as e}from"./framework-301d0703.js";const d={},i=a("h1",{id:"android-逆向",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#android-逆向","aria-hidden":"true"},"#"),e(" android 逆向")],-1),c=a("p",null,[e("Android逆向这个方向有不少独立开发者，其技术栈总结如下：1，开发语言：Java/JNI/C/C++,ArmV7/V8汇编（指令集，栈平衡，过程调用规范），Smali语法。2，编译原理：LLVM，Proguard/R8, C/C++语言内存模型，编译优化。3，文件结构：DEX文件结构、ART的运行机制；ELF（so）文件结构，Linker加载、链接so机制。4，Linux操作系统：进程管理，内存管理，文件系统，IO设备驱动，系统调用。5，Android 运行机制：主要在FW层，如AMS、PMS，WMS，Binder，权限管理。6， 反编译工具：Jadx-gui，apktool，DEX2Jar，Jeb，IDApro，Ghidra，Radare2，Binary Ninja，模拟执行用的unicorn，unidbg。 7，抓包分析工具：Charles、Fiddler、Wireshark 、 Burpsuite、r0capture、mitmproxy、httpcanary，tcpdump（Postman、Curl、firebug/ httpwatch，测试调试用）。 8，通讯协议&加密算法：Http/Https,WebSocket,Tcp/IP,TLS,SSL,Socket;Gson/Protobuf/Xml;DES,AES,RC4,SM4,RSA,ECC；MD5，Base64，Sha-1/Sha-256;及各变种算法。 9,代码对抗技术：字符串/代码/资源的混淆、加密，Java2C，花指令，OLLVM，VMP等。 10,HOOK框架：Xposed/Lposed/Exposed, Frida HOOK/Trace/Stalker, Sandhook,xHook等。需要对抗的技术点：反调试，反内存dump/patch，反hook，反二次打包，手机环境检测（root，模拟器，云手机等），程序/数据/资源的完整性检查，网络抓包检测等。"),a("img",{src:"https://pic4.zhimg.com/v2-f5acf62e9415ea79fcb75e0e6303a245_b.jpg","data-size":"normal","data-rawwidth":"13194","data-rawheight":"6231","data-original-token":"v2-f5acf62e9415ea79fcb75e0e6303a245","data-default-watermark-src":"https://pic2.zhimg.com/v2-12a9688c00be555b3dc6929344dfee51_b.jpg",class:"origin_image zh-lightbox-thumb",width:"13194","data-original":"https://pic4.zhimg.com/v2-f5acf62e9415ea79fcb75e0e6303a245_r.jpg"}),e("Android逆向技术栈需要指出的是，看起来技术蛮多，但并不是要掌握所有的技术才能挣钱，根据业务选择需要的技术即可。其中最难的部分当属各种版本的VMP+OLLVM了。")],-1),n=[i,c];function s(h,p){return r(),o("div",null,n)}const l=t(d,[["render",s],["__file","android-逆向学习.html.vue"]]);export{l as default};
