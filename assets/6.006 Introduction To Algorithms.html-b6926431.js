import{_ as o,C as a,Y as n,Z as r,$ as e,a0 as i,a1 as s,a2 as l}from"./framework-301d0703.js";const c={},d={id:"_6-006-introduction-to-algorithms",tabindex:"-1"},h=e("a",{class:"header-anchor",href:"#_6-006-introduction-to-algorithms","aria-hidden":"true"},"#",-1),p={href:"https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/",target:"_blank",rel:"noopener noreferrer"},m=l('<h2 id="lecture-1-algorithmic-thinking-peak-finding" tabindex="-1"><a class="header-anchor" href="#lecture-1-algorithmic-thinking-peak-finding" aria-hidden="true">#</a> Lecture 1: Algorithmic Thinking, Peak Finding</h2><p>https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/resources/lecture-1-algorithmic-thinking-peak-finding/</p><p>https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/resources/recitation-1-asymptotic-complexity-peak-finding/</p><p>This course covers:</p><ul><li>Efficient procedures for solving problems on large inputs (Ex: U.S. Highway Map, Human Genome)</li><li>Scalability</li><li>Classic data structures and elementary algorithms (CLRS text)</li><li>Real implementations in Python</li><li>Fun problem sets!</li></ul><p>The course is divided into 8 modules — each of which has a motivating problem and problem set(s) (except for the last module). Tentative module topics and motivating problems are as described below:</p><ul><li>Algorithmic Thinking: Peak Finding</li><li>Sorting &amp; Trees: Event Simulation</li><li>Hashing: Genome Comparison</li><li>Numerics: RSA Encryption</li><li>Graphs: Rubik’s Cube</li><li>Shortest Paths: Caltech → MIT</li><li>Dynamic Programming: Image Compression</li><li>Advanced Topics</li></ul><p>16 minutes</p><h3 id="peek-finder" tabindex="-1"><a class="header-anchor" href="#peek-finder" aria-hidden="true">#</a> Peek Finder</h3><p>But I am depressed, and that&#39;s all there is to it! 但我的确情绪低落，事情就是这样！</p><p>traversal 英 [trəˈvərs(ə)l] 美 [trəˈvərs(ə)l] n. [计] 遍历；横越；横断物</p><p>Write a nontrivial desktop app. 写过一个普通的桌面应用。</p><p>divide and conquer algorithm 分治算</p><p>Greedy Ascent Algorithm 贪婪上升算法</p><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><p>https://www.zhihu.com/question/34410128/answer/127170986</p><p>如何理解Big O，Big Omega，Big Theta？</p><p>最近正在学习time complexity，涉及到了上述三个名次，不是很理解。 还有Big O是upper bound，Omega是Lower Bound，Theta是Average Case。。并不能很好的get到点，求大神解答</p><p>比如插入排序，上限n2，下限n，平均n2。最坏情况，最好情况，平均情况。</p><p>就是微积分里面的阶的概念，把两个趋向于无穷的函数做比值，考虑n趋向于无穷时的上极限，它有趋于无穷、趋于0、趋于非零常数三种情况，就对应分母是分子的严格下界、严格上界、等阶三种情况。不趋向于无穷、不趋于0则定义为分母是分子的上界和下界的情况。这和算法导论中使用的定义是等效的。没明白的话，也许应该先好好学一下微积分。</p>',20);function u(g,_){const t=a("ExternalLinkIcon");return n(),r("div",null,[e("h1",d,[h,i(),e("a",p,[i("6.006 Introduction To Algorithms"),s(t)])]),m])}const k=o(c,[["render",u],["__file","6.006 Introduction To Algorithms.html.vue"]]);export{k as default};
