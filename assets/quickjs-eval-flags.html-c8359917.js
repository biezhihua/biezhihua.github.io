import{_ as s,Y as n,Z as a,a2 as e}from"./framework-301d0703.js";const o={},t=e(`<h1 id="在-quickjs-中-js-eval-函数用于在指定的上下文中执行-javascript-代码。您可以通过设置不同的标志-flags-来控制代码的解析和执行方式。以下是您列出的每个标志的含义、作用以及如何使用它们的详细说明。" tabindex="-1"><a class="header-anchor" href="#在-quickjs-中-js-eval-函数用于在指定的上下文中执行-javascript-代码。您可以通过设置不同的标志-flags-来控制代码的解析和执行方式。以下是您列出的每个标志的含义、作用以及如何使用它们的详细说明。" aria-hidden="true">#</a> 在 QuickJS 中，<code>JS_Eval()</code> 函数用于在指定的上下文中执行 JavaScript 代码。您可以通过设置不同的标志（flags）来控制代码的解析和执行方式。以下是您列出的每个标志的含义、作用以及如何使用它们的详细说明。</h1><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/* JS_Eval() flags */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_EVAL_TYPE_GLOBAL</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">/* 全局代码（默认） */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_EVAL_TYPE_MODULE</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">/* 模块代码 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_EVAL_TYPE_DIRECT</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">/* 直接调用（内部使用） */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_EVAL_TYPE_INDIRECT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> </span><span class="token comment">/* 间接调用（内部使用） */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_EVAL_TYPE_MASK</span>     <span class="token expression"><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_EVAL_FLAG_STRICT</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> </span><span class="token comment">/* 强制“严格”模式 */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">JS_EVAL_FLAG_STRIP</span>    <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> </span><span class="token comment">/* 强制“剥离”模式 */</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="标志的含义和作用" tabindex="-1"><a class="header-anchor" href="#标志的含义和作用" aria-hidden="true">#</a> 标志的含义和作用</h2><h3 id="_1-评估类型标志" tabindex="-1"><a class="header-anchor" href="#_1-评估类型标志" aria-hidden="true">#</a> 1. 评估类型标志</h3><p>这些标志决定了被评估代码的类型以及 JavaScript 引擎应该如何解析它。</p><ul><li><p><strong><code>JS_EVAL_TYPE_GLOBAL</code></strong> <code>(0 &lt;&lt; 0)</code></p><ul><li><strong>含义</strong>：将代码作为全局代码执行。</li><li><strong>作用</strong>：代码在全局作用域中执行。这是默认行为，如果未指定类型标志，将采用此方式。</li><li><strong>使用</strong>：当您希望被评估的代码影响全局上下文时，使用此标志。</li></ul></li><li><p><strong><code>JS_EVAL_TYPE_MODULE</code></strong> <code>(1 &lt;&lt; 0)</code></p><ul><li><strong>含义</strong>：将代码作为模块执行。</li><li><strong>作用</strong>：将代码解析为 ECMAScript 模块，允许使用 <code>import</code> 和 <code>export</code> 语句。</li><li><strong>使用</strong>：当您的代码包含模块语法，或者您希望将代码封装在自己的模块作用域中时，使用此标志。</li></ul></li><li><p><strong><code>JS_EVAL_TYPE_DIRECT</code></strong> <code>(2 &lt;&lt; 0)</code> 和 <strong><code>JS_EVAL_TYPE_INDIRECT</code></strong> <code>(3 &lt;&lt; 0)</code></p><ul><li><strong>含义</strong>：用于直接和间接的 <code>eval()</code> 调用。</li><li><strong>作用</strong>：主要供引擎内部使用，以处理特定的代码评估情况。</li><li><strong>使用</strong>：通常不直接由开发者使用。</li></ul></li><li><p><strong><code>JS_EVAL_TYPE_MASK</code></strong> <code>(3 &lt;&lt; 0)</code></p><ul><li><strong>含义</strong>：用于提取评估类型的位掩码。</li><li><strong>作用</strong>：在内部用于隔离评估类型的位。</li><li><strong>使用</strong>：一般不直接使用此标志。</li></ul></li></ul><h3 id="_2-执行模式标志" tabindex="-1"><a class="header-anchor" href="#_2-执行模式标志" aria-hidden="true">#</a> 2. 执行模式标志</h3><p>这些标志改变了被评估代码的执行方式。</p><ul><li><p><strong><code>JS_EVAL_FLAG_STRICT</code></strong> <code>(1 &lt;&lt; 3)</code></p><ul><li><strong>含义</strong>：强制严格模式执行。</li><li><strong>作用</strong>：代码在 JavaScript 的严格模式下执行，实施更严格的语法和错误检查。</li><li><strong>使用</strong>：当您希望代码遵循严格模式，以捕获潜在错误时，使用此标志。</li></ul></li><li><p><strong><code>JS_EVAL_FLAG_STRIP</code></strong> <code>(1 &lt;&lt; 4)</code></p><ul><li><strong>含义</strong>：启用剥离模式。</li><li><strong>作用</strong>：从编译后的代码中移除调试信息，例如源代码和变量名。这可以减少内存使用并防止代码被反向工程。</li><li><strong>使用</strong>：当您希望优化内存使用或增强代码安全性时，使用此标志。</li></ul></li></ul><h2 id="如何使用这些标志" tabindex="-1"><a class="header-anchor" href="#如何使用这些标志" aria-hidden="true">#</a> 如何使用这些标志</h2><p>在调用 <code>JS_Eval()</code> 函数时，您可以通过 <code>flags</code> 参数传递这些标志，以控制代码的评估方式。可以使用按位或操作符（<code>|</code>）组合多个标志。</p><h3 id="函数签名" tabindex="-1"><a class="header-anchor" href="#函数签名" aria-hidden="true">#</a> 函数签名</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>JSValue <span class="token function">JS_Eval</span><span class="token punctuation">(</span>JSContext <span class="token operator">*</span>ctx<span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>input<span class="token punctuation">,</span>
                <span class="token class-name">size_t</span> input_len<span class="token punctuation">,</span>
                <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span>
                <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong><code>ctx</code></strong>：JavaScript 上下文。</li><li><strong><code>input</code></strong>：要评估的 JavaScript 代码。</li><li><strong><code>input_len</code></strong>：代码的长度。</li><li><strong><code>filename</code></strong>：用于错误报告的文件名。</li><li><strong><code>flags</code></strong>：评估标志。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><ol><li><p><strong>在严格模式下评估全局代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> flags <span class="token operator">=</span> JS_EVAL_TYPE_GLOBAL <span class="token operator">|</span> JS_EVAL_FLAG_STRICT<span class="token punctuation">;</span>
JSValue result <span class="token operator">=</span> <span class="token function">JS_Eval</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> code<span class="token punctuation">,</span> code_len<span class="token punctuation">,</span> <span class="token string">&quot;myfile.js&quot;</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>评估模块代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> flags <span class="token operator">=</span> JS_EVAL_TYPE_MODULE<span class="token punctuation">;</span>
JSValue result <span class="token operator">=</span> <span class="token function">JS_Eval</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> code<span class="token punctuation">,</span> code_len<span class="token punctuation">,</span> <span class="token string">&quot;mymodule.js&quot;</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>在严格和剥离模式下评估模块代码</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> flags <span class="token operator">=</span> JS_EVAL_TYPE_MODULE <span class="token operator">|</span> JS_EVAL_FLAG_STRICT <span class="token operator">|</span> JS_EVAL_FLAG_STRIP<span class="token punctuation">;</span>
JSValue result <span class="token operator">=</span> <span class="token function">JS_Eval</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> code<span class="token punctuation">,</span> code_len<span class="token punctuation">,</span> <span class="token string">&quot;securemodule.js&quot;</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li><strong>组合标志</strong>：使用按位或操作符（<code>|</code>）来组合多个标志。</li><li><strong>默认行为</strong>：如果未指定类型标志，默认使用 <code>JS_EVAL_TYPE_GLOBAL</code>。</li><li><strong>内部标志</strong>：除非您在底层扩展或与引擎交互，否则应避免使用 <code>JS_EVAL_TYPE_DIRECT</code> 和 <code>JS_EVAL_TYPE_INDIRECT</code>。</li><li><strong>错误处理</strong>：始终使用 <code>JS_IsException()</code> 检查返回的 <code>JSValue</code> 是否包含异常。</li></ul><h3 id="实用建议" tabindex="-1"><a class="header-anchor" href="#实用建议" aria-hidden="true">#</a> 实用建议</h3><ul><li><strong>严格模式</strong>：建议启用 <code>JS_EVAL_FLAG_STRICT</code>，以便及早捕获错误。</li><li><strong>剥离模式</strong>：在生产环境中使用 <code>JS_EVAL_FLAG_STRIP</code>，以优化性能和增强安全性。</li><li><strong>模块代码</strong>：在评估模块代码时，确保代码符合 ECMAScript 模块语法。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><strong><code>JS_EVAL_TYPE_GLOBAL</code></strong>：在全局作用域中执行代码（默认）。</li><li><strong><code>JS_EVAL_TYPE_MODULE</code></strong>：将代码作为 ECMAScript 模块执行。</li><li><strong><code>JS_EVAL_FLAG_STRICT</code></strong>：强制以严格模式执行代码。</li><li><strong><code>JS_EVAL_FLAG_STRIP</code></strong>：移除调试信息，优化内存和安全性。</li></ul><p>通过理解和使用这些标志，您可以控制 QuickJS 中 JavaScript 代码的执行环境，满足您特定的应用需求。</p>`,23),c=[t];function l(p,i){return n(),a("div",null,c)}const d=s(o,[["render",l],["__file","quickjs-eval-flags.html.vue"]]);export{d as default};
