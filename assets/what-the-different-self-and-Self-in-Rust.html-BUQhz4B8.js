import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as i,f as s,o as n}from"./app-D4ZtVCQo.js";const a={};function l(r,e){return n(),i("div",null,e[0]||(e[0]=[s(`<h1 id="what-the-different-self-and-self-in-rust" tabindex="-1"><a class="header-anchor" href="#what-the-different-self-and-self-in-rust"><span>What the different self and Self in Rust</span></a></h1><p>In Rust, <code>self</code> and <code>Self</code> have distinct meanings and are used in different contexts:</p><ol><li><p><strong><code>self</code></strong>:</p><ul><li><strong>Usage</strong>: <code>self</code> is used as the first parameter of an instance method of a struct or enum. It represents the instance of the struct or enum on which the method is called.</li><li><strong>Variants</strong>: It has three forms: <ul><li><code>self</code> - Used when the method consumes the struct (takes ownership).</li><li><code>&amp;self</code> - Used when the method only needs a reference to the struct, without taking ownership.</li><li><code>&amp;mut self</code> - Used when the method needs a mutable reference to the struct.</li></ul></li><li><strong>Example</strong>: In a method definition like <code>fn do_something(&amp;self)</code>, <code>self</code> refers to the instance of the struct.</li></ul></li><li><p><strong><code>Self</code></strong>:</p><ul><li><strong>Usage</strong>: <code>Self</code> (note the capital &#39;S&#39;) is an alias for the type of the current trait or impl block.</li><li><strong>Context</strong>: It&#39;s typically used in trait definitions and their impl blocks. In a trait, <code>Self</code> refers to the type that implements the trait. In an impl block, <code>Self</code> refers to the type that the block is implementing traits for or adding methods to.</li><li><strong>Example</strong>: In a trait definition like <code>trait Example { fn clone(&amp;self) -&gt; Self; }</code>, <code>Self</code> refers to the type that implements the <code>Example</code> trait.</li></ul></li></ol><h3 id="example-to-illustrate-the-difference" tabindex="-1"><a class="header-anchor" href="#example-to-illustrate-the-difference"><span>Example to Illustrate the Difference:</span></a></h3><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyStruct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">impl</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> MyStruct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Here, self refers to the instance of MyStruct</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> instance_method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        println!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Called on an instance of MyStruct&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Here, Self refers to the MyStruct type itself</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    fn</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() -&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;">        MyStruct</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above example:</p><ul><li><code>&amp;self</code> in <code>instance_method</code> refers to the instance of <code>MyStruct</code>.</li><li><code>Self</code> in <code>new</code> is used as a type name, referring to <code>MyStruct</code>. It&#39;s a way to avoid repeating the type name <code>MyStruct</code>.</li></ul>`,7)]))}const o=t(a,[["render",l],["__file","what-the-different-self-and-Self-in-Rust.html.vue"]]),c=JSON.parse('{"path":"/public-articles/what-the-different-self-and-Self-in-Rust.html","title":"What the different self and Self in Rust","lang":"zh-CN","frontmatter":{"article":true,"description":"What the different self and Self in Rust In Rust, self and Self have distinct meanings and are used in different contexts: self: Usage: self is used as the first parameter of an...","head":[["meta",{"property":"og:url","content":"https://github.com/biezhihua/public-articles/what-the-different-self-and-Self-in-Rust.html"}],["meta",{"property":"og:site_name","content":"biezhihua的日常"}],["meta",{"property":"og:title","content":"What the different self and Self in Rust"}],["meta",{"property":"og:description","content":"What the different self and Self in Rust In Rust, self and Self have distinct meanings and are used in different contexts: self: Usage: self is used as the first parameter of an..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-08T14:25:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-08T14:25:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"What the different self and Self in Rust\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-08T14:25:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"别志华\\",\\"url\\":\\"https://github.com/biezhihua\\"}]}"]]},"git":{"createdTime":1700578249000,"updatedTime":1741443934000,"contributors":[{"name":"biezhihua","username":"biezhihua","email":"biezhihua@gmail.com","commits":2,"url":"https://github.com/biezhihua"}]},"readingTime":{"minutes":0.96,"words":287},"filePathRelative":"public-articles/what-the-different-self-and-Self-in-Rust.md","localizedDate":"2023年11月21日","excerpt":"","autoDesc":true}');export{o as comp,c as data};
